{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/qualifiers/flag/FlagQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/dataStructureUtils.js", "../../@cloudinary/transformation-builder-sdk/internal/models/actionToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/ActionModel.js", "../../@cloudinary/transformation-builder-sdk/internal/Action.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/toFloatAsString.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/aspectRatio/AspectRatioQualifierValue.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/flag.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/objectFlip.js", "../../@cloudinary/transformation-builder-sdk/internal/internalConstants.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeSimpleAction.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/qualifiers/focusOn/FocusOnValue.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/focusOn.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createGravityModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/autoFocus.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/qualifiers/compass/CompassQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createGravityFromModel.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeAdvancedAction.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/base/BackgroundQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/BlurredBackgroundAction.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/prepareColor.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/base/BaseCommonBackground.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/auto/BackgroundAutoBorderQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/base/BaseGradientBackground.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/gradient/BackgroundBorderGradientQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/gradient/BackgroundPredominantGradientQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/auto/BackgroundAutoPredominantQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/encodePromptComponents.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background/shared/BackgroundGenerativeFillQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createBackgroundModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textDecoration.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textAlignment.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStroke.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/streamingProfile.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/simulateColorBlind.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/rotate/RotationModeQualifierValue.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/rotationMode.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region/NamedRegion.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region/CustomRegion.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region/RectangleRegion.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/region.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/quality.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/position/PositionQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/outlineMode.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/improveMode.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gradientDirection/GradientDirectionQualifierValue.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gradientDirection.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/format/FormatQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/format.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontWeight.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontStyle.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/fontHinting.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/expression/ExpressionQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/expression.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/dither.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/colorSpace.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/color.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/background.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/audioFrequency.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/audioCodec.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/aspectRatio.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/artisticFilter.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/animatedFormat/AnimatedFormatQualifierValue.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/animatedFormat.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/chromaSubSampling.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/dpr.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/BaseSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/VideoSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/ImageSource.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/serializeCloudinaryCharacters.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IStrokeModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/textStyle.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/BaseTextSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/SubtitlesSource.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/base64Encode.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/FetchSource.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createTextStyleFromModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/TextSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source/sourceTypes/AudioSource.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/source.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/GradientFade.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createBackgroundFromModel.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizePadAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeScaleAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ThumbnailAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeCropAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeFillAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeLimitFitAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeLimitFillAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeLimitPadAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeMinimumPadAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize/ResizeAutoPadAction.js", "../../@cloudinary/transformation-builder-sdk/actions/resize.js", "../../@cloudinary/transformation-builder-sdk/actions/roundCorners/RoundCornersAction.js", "../../@cloudinary/transformation-builder-sdk/actions/border.js", "../../@cloudinary/transformation-builder-sdk/actions/roundCorners.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Blur.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Accelerate.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/SimpleEffectAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/LeveledEffectAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Loop.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Cartoonify.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Outline.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/MakeTransparent.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Vectorize.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/SimulateColorBlind.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/EffectActionWithLevel.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/AssistColorBlind.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GradientFade.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/FadeOut.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Colorize.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Shadow.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/StyleTransfer.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Dither.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Deshake.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/pixelate/Pixelate.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/EffectActionWithStrength.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/Blackwhite.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/leveled/FadeIn.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/RemoveBackgroundAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Theme.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/BackgroundRemoval.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/DropShadow.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeRemove.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeReplace.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeRecolor.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/GenerativeBackgroundReplace.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/Extract.js", "../../@cloudinary/transformation-builder-sdk/actions/effect.js", "../../@cloudinary/transformation-builder-sdk/actions/rotate/RotateAction.js", "../../@cloudinary/transformation-builder-sdk/actions/rotate.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust/FillLightAction.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust/RecolorAction.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust/OpacityAdjustAction.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust/By3dLutAction.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust/ImproveAction.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust/ReplaceColorAction.js", "../../@cloudinary/transformation-builder-sdk/actions/effect/EffectActions/EffectActionWithBlend.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust/simple/ViesusCorrectAdjustAction.js", "../../@cloudinary/transformation-builder-sdk/actions/adjust.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/blendMode/BlendModeQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IImageSourceModel.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IFetchSourceModel.js", "../../@cloudinary/transformation-builder-sdk/internal/models/ITextSourceModel.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IAudioSourceModel.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createSourceFromModel.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createPositionFromModel.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/video/TimelinePosition.js", "../../@cloudinary/transformation-builder-sdk/internal/models/createTimelinePositionFromModel.js", "../../@cloudinary/transformation-builder-sdk/actions/layer/LayerAction.js", "../../@cloudinary/transformation-builder-sdk/actions/overlay.js", "../../@cloudinary/transformation-builder-sdk/actions/underlay.js", "../../@cloudinary/transformation-builder-sdk/actions/namedTransformation/NamedTransformationAction.js", "../../@cloudinary/transformation-builder-sdk/actions/namedTransformation.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryAction.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/progressive.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryFormatAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryQualityAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryColorSpaceFromICCAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryColorSpaceAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryDPRAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery.js", "../../@cloudinary/transformation-builder-sdk/actions/customFunction/CustomFunctionAction.js", "../../@cloudinary/transformation-builder-sdk/actions/customFunction/RemoteAction.js", "../../@cloudinary/transformation-builder-sdk/actions/customFunction.js", "../../@cloudinary/transformation-builder-sdk/actions/videoEdit/TrimAction.js", "../../@cloudinary/transformation-builder-sdk/actions/background/actions/BackgroundColor.js", "../../@cloudinary/transformation-builder-sdk/internal/RawAction.js", "../../@cloudinary/transformation-builder-sdk/internal/models/IErrorObject.js", "../../@cloudinary/transformation-builder-sdk/transformation/Transformation.js", "../../@cloudinary/transformation-builder-sdk/actions/videoEdit/ConcatenateAction.js", "../../@cloudinary/transformation-builder-sdk/actions/videoEdit/VolumeAction.js", "../../@cloudinary/transformation-builder-sdk/actions/videoEdit/PreviewAction.js", "../../@cloudinary/transformation-builder-sdk/actions/videoEdit.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/BitRateAction.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/AudioCodecAction.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/AudioFrequencyAction.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/FPSRangeAction.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/FPSAction.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/KeyframeIntervalsAction.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/StreamingProfile.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/ToAnimatedAction.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/videoCodecType/VideoCodecType.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/videoCodec.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode/VideoCodecAction.js", "../../@cloudinary/transformation-builder-sdk/actions/transcode.js", "../../@cloudinary/transformation-builder-sdk/actions/psdTools/ClipAction.js", "../../@cloudinary/transformation-builder-sdk/actions/psdTools/GetLayerAction.js", "../../@cloudinary/transformation-builder-sdk/actions/psdTools/SmartObjectAction.js", "../../@cloudinary/transformation-builder-sdk/actions/psdTools.js", "../../@cloudinary/transformation-builder-sdk/actions/animated.js"],
  "sourcesContent": ["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @memberOf Qualifiers.Flag\r\n * @extends {SDK.Qualifier}\r\n * @description the FlagQualifier class\r\n */\r\nclass FlagQualifier extends Qualifier {\r\n    constructor(flagType, flagValue) {\r\n        let qualifierValue;\r\n        if (flagValue) {\r\n            qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\r\n        }\r\n        else {\r\n            qualifierValue = flagType;\r\n        }\r\n        super('fl', qualifierValue);\r\n        this.flagValue = flagValue;\r\n    }\r\n    toString() {\r\n        return super.toString().replace(/\\./g, '%2E');\r\n    }\r\n    getFlagValue() {\r\n        return this.flagValue;\r\n    }\r\n}\r\nexport { FlagQualifier };\r\n", "/**\r\n * Sort a map by key\r\n * @private\r\n * @param map <string, any>\r\n * @Return array of map's values sorted by key\r\n */\r\nfunction mapToSortedArray(map, flags) {\r\n    const array = Array.from(map.entries());\r\n    // objects from the Array.from() method above are stored in array of arrays:\r\n    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\r\n    // Flags is an array of FlagQualifierObj\r\n    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\r\n    flags.forEach((flag) => {\r\n        array.push(['fl', flag]); // push ['fl', flagQualifier]\r\n    });\r\n    return array.sort().map((v) => v[1]);\r\n}\r\n/**\r\n * Checks if `value` is a string.\r\n * @private\r\n * @param {*} value The value to check.\r\n * @return {boolean} `true` if `value` is a string, else `false`.\r\n */\r\nfunction isString(value) {\r\n    return (typeof value === 'string' || value instanceof String);\r\n}\r\nexport { isString, mapToSortedArray };\r\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\r\n/**\r\n * Returns the action's model\r\n */\r\nexport function actionToJson() {\r\n    var _a, _b, _c;\r\n    const actionModelIsNotEmpty = this._actionModel && Object.keys(this._actionModel).length;\r\n    const sourceTransformationError = (_c = (_b = (_a = this._actionModel) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.transformation) === null || _c === void 0 ? void 0 : _c.error;\r\n    // Should return error when there is unsupported transformation inside\r\n    if (sourceTransformationError && sourceTransformationError instanceof Error) {\r\n        return { error: sourceTransformationError };\r\n    }\r\n    if (actionModelIsNotEmpty) {\r\n        return this._actionModel;\r\n    }\r\n    return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\r\n}\r\n", "import { actionToJson } from \"./actionToJson.js\";\r\nexport class ActionModel {\r\n    constructor() {\r\n        this._actionModel = {};\r\n    }\r\n    toJson() {\r\n        return actionToJson.apply(this);\r\n    }\r\n}\r\n", "import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\r\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\r\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\r\nimport { ActionModel } from \"./models/ActionModel.js\";\r\n/**\r\n * @summary SDK\r\n * @memberOf SDK\r\n * @description Defines the category of transformation to perform.\r\n */\r\nclass Action extends ActionModel {\r\n    constructor() {\r\n        super(...arguments);\r\n        // We're using map, to overwrite existing keys. for example:\r\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\r\n        this.qualifiers = new Map();\r\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\r\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\r\n        // So flags are stored separately until the very end because of that reason\r\n        this.flags = [];\r\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\r\n        this.actionTag = ''; // A custom name tag to identify this action in the future\r\n    }\r\n    prepareQualifiers() { }\r\n    /**\r\n     * @description Returns the custom name tag that was given to this action\r\n     * @return {string}\r\n     */\r\n    getActionTag() {\r\n        return this.actionTag;\r\n    }\r\n    /**\r\n     * @description Sets the custom name tag for this action\r\n     * @return {this}\r\n     */\r\n    setActionTag(tag) {\r\n        this.actionTag = tag;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        this.prepareQualifiers();\r\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\r\n    }\r\n    /**\r\n     * @description Adds the parameter to the action.\r\n     * @param {SDK.Qualifier} qualifier\r\n     * @return {this}\r\n     */\r\n    addQualifier(qualifier) {\r\n        // if string, find the key and value\r\n        if (typeof qualifier === 'string') {\r\n            const [key, value] = qualifier.toLowerCase().split('_');\r\n            if (key === 'fl') {\r\n                // if string qualifier is a flag, store it in the flags arrays\r\n                this.flags.push(new FlagQualifier(value));\r\n            }\r\n            else {\r\n                // if the string qualifier is not a flag, create a new qualifier from it\r\n                this.qualifiers.set(key, new Qualifier(key, value));\r\n            }\r\n        }\r\n        else {\r\n            // if a qualifier object, insert to the qualifiers map\r\n            this.qualifiers.set(qualifier.key, qualifier);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Adds a flag to the current action.\r\n     * @param {Qualifiers.Flag} flag\r\n     * @return {this}\r\n     */\r\n    addFlag(flag) {\r\n        if (typeof flag === 'string') {\r\n            this.flags.push(new FlagQualifier(flag));\r\n        }\r\n        else {\r\n            if (flag instanceof FlagQualifier) {\r\n                this.flags.push(flag);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    addValueToQualifier(qualifierKey, qualifierValue) {\r\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\r\n        return this;\r\n    }\r\n}\r\nexport { Action };\r\n", "/**\r\n * @description\r\n * Returns a string representing the float value of the input, if the input was a number-like.\r\n * Examples:\r\n * - '1.0' -> '1.0'\r\n * - 1 -> '1.0'\r\n * - '5' -> '5.0'\r\n * - 'auto' -> 'auto'\r\n * @private\r\n * @param {string|number} value\r\n * @return {string}\r\n */\r\nexport function toFloatAsString(value) {\r\n    // Turn the input to string\r\n    // The Function will return `returnValue` value if the input is not a number-like expression\r\n    const returnValue = value.toString();\r\n    // if the string contains letters, return the input\r\n    if (returnValue.match(/[A-Z]/gi)) {\r\n        return returnValue;\r\n    }\r\n    // If the leading digit is 0, and we have more than 1 digit, it's not a number.\r\n    // 00, 00000, 0x15 etc.\r\n    if (returnValue.length > 1 && returnValue[0] === '0') {\r\n        return returnValue;\r\n    }\r\n    // Final sanity check, parse the number as a float and check if its NaN\r\n    const isNumberLike = !isNaN(parseFloat(returnValue)) && returnValue.indexOf(':') === -1;\r\n    // If it's a number-like, but the input does not contain a decimal - add it.\r\n    if (isNumberLike && returnValue.indexOf('.') === -1) {\r\n        return `${returnValue}.0`;\r\n    }\r\n    else {\r\n        // If the input already contains a decimal, just return the value\r\n        return returnValue;\r\n    }\r\n}\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Qualifiers.AspectRatio\r\n * @extends {SDK.QualifierValue}\r\n */\r\nexport class AspectRatioQualifierValue extends QualifierValue {\r\n}\r\n", "/**\r\n * @description Defines flags that you can use to alter the default transformation behavior.\r\n * @namespace Flag\r\n * @memberOf Qualifiers\r\n */\r\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\r\n * Plays all frames rather than just delivering the first one as a static image.\r\n * Use this flag in addition to the flag or parameter controlling the delivery format,\r\n * for example f_auto or fl_awebp.\r\n\r\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\r\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animated() {\r\n    return new FlagQualifier('animated');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated WebPs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animatedWebP() {\r\n    return new FlagQualifier('awebp');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used together with automatic quality (q_auto):\r\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction anyFormat() {\r\n    return new FlagQualifier('any_format');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated PNGs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animatedPng() {\r\n    return new FlagQualifier('apng');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image\r\n * (e.g., manually created using PhotoShop).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction clip() {\r\n    return new FlagQualifier('clip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\r\n * using PhotoShop)\r\n * using an evenodd clipping rule.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction clipEvenOdd() {\r\n    return new FlagQualifier('clip_evenodd');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\r\n * transformation.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction forceStrip() {\r\n    return new FlagQualifier('force_strip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Allows custom flag\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction custom(value) {\r\n    return new FlagQualifier(value);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction forceIcc() {\r\n    return new FlagQualifier('force_icc');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Delivers the image as an attachment.\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction attachment(filename) {\r\n    return new FlagQualifier('attachment', filename);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\r\n * transformed image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction getInfo() {\r\n    return new FlagQualifier('getinfo');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\r\n * Delivering in this format requires a private CDN configuration.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction hlsv3() {\r\n    return new FlagQualifier('hlsv3');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Sets the cache-control to immutable for the asset.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction immutableCache() {\r\n    return new FlagQualifier('immutable_cache');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\r\n * recalculated to maintain the aspect ratio of the original image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction ignoreInitialAspectRatio() {\r\n    return new FlagQualifier('ignore_aspect_ratio');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps the copyright related fields when stripping meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepAttribution() {\r\n    return new FlagQualifier('keep_attribution');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * Keep the Display Aspect Ratio metadata of the uploaded video (if it’s different from the current video\r\n * dimensions).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepDar() {\r\n    return new FlagQualifier('keep_dar');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps all meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepIptc() {\r\n    return new FlagQualifier('keep_iptc');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\r\n * overlay or underlay instead of applying on the containing image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction layerApply() {\r\n    return new FlagQualifier('layer_apply');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Automatically use lossy compression when delivering animated GIF files.\r\n *\r\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\r\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\r\n * format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction lossy() {\r\n    return new FlagQualifier('lossy');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Convert the audio channel to mono\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction mono() {\r\n    return new FlagQualifier('mono');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction noOverflow() {\r\n    return new FlagQualifier('no_overflow');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction noStream() {\r\n    return new FlagQualifier('no_stream');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png24 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png24() {\r\n    return new FlagQualifier('png24');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png32 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png32() {\r\n    return new FlagQualifier('png32');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the PNG8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png8() {\r\n    return new FlagQualifier('png8');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\r\n * delivered in PNG format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction preserveTransparency() {\r\n    return new FlagQualifier('preserve_transparency');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\r\n *\r\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\r\n * image is loaded.\r\n *\r\n * @param {string} mode? The mode to determine a specific progressive outcome as follows:\r\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\r\n *          (less iterations). This is the default mode when using q_auto.\r\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\r\n *           the required resolution.\r\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\r\n *           a specific value for quality.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction progressive(mode) {\r\n    return new FlagQualifier('progressive', mode);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction regionRelative() {\r\n    return new FlagQualifier('region_relative');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\r\n * order to enable\r\n * PDF resizing and overlay manipulations.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction rasterize() {\r\n    return new FlagQualifier('rasterize');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction relative() {\r\n    return new FlagQualifier('relative');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction sanitize() {\r\n    return new FlagQualifier('sanitize');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\r\n * overlay.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction splice() {\r\n    return new FlagQualifier('splice');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction stripProfile() {\r\n    return new FlagQualifier('strip_profile');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description If the requested video transformation has already been generated, this flag works identically to\r\n * Flag::attachment.\r\n *\r\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\r\n * to begin immediately, streaming it as a fragmented video file.\r\n *\r\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\r\n * the download will begin only after the complete transformed video has been generated.\r\n *\r\n * Most standard video players successfully play fragmented video files without issue.\r\n *\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction streamingAttachment(filename) {\r\n    return new FlagQualifier('streaming_attachment', filename);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction tiff8Lzw() {\r\n    return new FlagQualifier('tiff8_lzw');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers#automatic_tiling|Tiling overlay}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction tiled() {\r\n    return new FlagQualifier('tiled');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\r\n * includes a directive to play only a section of the video).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction truncateTS() {\r\n    return new FlagQualifier('truncate_ts');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction waveform() {\r\n    return new FlagQualifier('waveform');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction ignoreMaskChannels() {\r\n    return new FlagQualifier('ignore_mask_channels');\r\n}\r\nconst Flag = {\r\n    animated, anyFormat, animatedPng, animatedWebP,\r\n    clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize,\r\n    sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache,\r\n    keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono,\r\n    layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip,\r\n    tiled, noOverflow, ignoreMaskChannels\r\n};\r\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };\r\n", "/**\r\n * Flip keys and values for given object\r\n * @param obj\r\n */\r\nfunction objectFlip(obj) {\r\n    const result = {};\r\n    Object.keys(obj).forEach((key) => {\r\n        result[obj[key]] = key;\r\n    });\r\n    return result;\r\n}\r\nexport { objectFlip };\r\n", "/**\r\n * This file is for internal constants only.\r\n * It is not intended for public use and is not part of the public API\r\n */\r\nimport { objectFlip } from \"./utils/objectFlip.js\";\r\nexport const CONDITIONAL_OPERATORS = {\r\n    \"=\": \"eq\",\r\n    \"!=\": \"ne\",\r\n    \"<\": \"lt\",\r\n    \">\": \"gt\",\r\n    \"<=\": \"lte\",\r\n    \">=\": \"gte\",\r\n    \"&&\": \"and\",\r\n    \"||\": \"or\",\r\n    \"*\": \"mul\",\r\n    \"/\": \"div\",\r\n    \"+\": \"add\",\r\n    \"-\": \"sub\",\r\n    \"^\": \"pow\"\r\n};\r\nexport const RESERVED_NAMES = {\r\n    \"aspect_ratio\": \"ar\",\r\n    \"aspectRatio\": \"ar\",\r\n    \"current_page\": \"cp\",\r\n    \"currentPage\": \"cp\",\r\n    \"duration\": \"du\",\r\n    \"face_count\": \"fc\",\r\n    \"faceCount\": \"fc\",\r\n    \"height\": \"h\",\r\n    \"initial_aspect_ratio\": \"iar\",\r\n    \"initial_height\": \"ih\",\r\n    \"initial_width\": \"iw\",\r\n    \"initialAspectRatio\": \"iar\",\r\n    \"initialHeight\": \"ih\",\r\n    \"initialWidth\": \"iw\",\r\n    \"initial_duration\": \"idu\",\r\n    \"initialDuration\": \"idu\",\r\n    \"page_count\": \"pc\",\r\n    \"page_x\": \"px\",\r\n    \"page_y\": \"py\",\r\n    \"pageCount\": \"pc\",\r\n    \"pageX\": \"px\",\r\n    \"pageY\": \"py\",\r\n    \"tags\": \"tags\",\r\n    \"width\": \"w\",\r\n    \"trimmed_aspect_ratio\": \"tar\",\r\n    \"current_public_id\": \"cpi\",\r\n    \"initial_density\": \"idn\",\r\n    \"page_names\": \"pgnames\"\r\n};\r\nexport const ACTION_TYPE_TO_CROP_MODE_MAP = {\r\n    limitFit: 'limit',\r\n    limitFill: 'lfill',\r\n    minimumFit: 'mfit',\r\n    thumbnail: 'thumb',\r\n    limitPad: 'lpad',\r\n    minimumPad: 'mpad',\r\n    autoPad: 'auto_pad'\r\n};\r\nexport const ACTION_TYPE_TO_DELIVERY_MODE_MAP = {\r\n    colorSpace: 'cs',\r\n    dpr: 'dpr',\r\n    density: 'dn',\r\n    defaultImage: 'd',\r\n    format: 'f',\r\n    quality: 'q'\r\n};\r\nexport const ACTION_TYPE_TO_EFFECT_MODE_MAP = {\r\n    redEye: 'redeye',\r\n    advancedRedEye: 'adv_redeye',\r\n    oilPaint: 'oil_paint',\r\n    unsharpMask: 'unsharp_mask',\r\n    makeTransparent: 'make_transparent',\r\n    generativeRestore: 'gen_restore',\r\n    upscale: 'upscale'\r\n};\r\nexport const ACTION_TYPE_TO_QUALITY_MODE_MAP = {\r\n    autoBest: 'auto:best',\r\n    autoEco: 'auto:eco',\r\n    autoGood: 'auto:good',\r\n    autoLow: 'auto:low',\r\n    jpegminiHigh: 'jpegmini:1',\r\n    jpegminiMedium: 'jpegmini:2',\r\n    jpegminiBest: 'jpegmini:0'\r\n};\r\nexport const ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP = {\r\n    fullHd: 'full_hd',\r\n    fullHdWifi: 'full_hd_wifi',\r\n    fullHdLean: 'full_hd_lean',\r\n    hdLean: 'hd_lean'\r\n};\r\nexport const CHROMA_VALUE_TO_CHROMA_MODEL_ENUM = {\r\n    444: \"CHROMA_444\",\r\n    420: \"CHROMA_420\"\r\n};\r\nexport const COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP = {\r\n    'noCmyk': 'no_cmyk',\r\n    'keepCmyk': 'keep_cmyk',\r\n    'tinySrgb': 'tinysrgb',\r\n    'srgbTrueColor': 'srgb:truecolor'\r\n};\r\nexport const ACTION_TYPE_TO_BLEND_MODE_MAP = {\r\n    'antiRemoval': 'anti_removal'\r\n};\r\nexport const CHROMA_MODEL_ENUM_TO_CHROMA_VALUE = objectFlip(CHROMA_VALUE_TO_CHROMA_MODEL_ENUM);\r\nexport const COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP = objectFlip(COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP);\r\nexport const CROP_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_CROP_MODE_MAP);\r\nexport const DELIVERY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_DELIVERY_MODE_MAP);\r\nexport const EFFECT_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_EFFECT_MODE_MAP);\r\nexport const QUALITY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_QUALITY_MODE_MAP);\r\nexport const STREAMING_PROFILE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP);\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\r\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\r\nimport { ignoreInitialAspectRatio, regionRelative, relative } from \"../../qualifiers/flag.js\";\r\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\r\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @description Defines a resize using width and height.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeSimpleAction extends Action {\r\n    /**\r\n     * @param {string} cropType\r\n     * @param {number | string} cropWidth The required width of a transformed asset.\r\n     * @param {number | string} cropHeight The required height of a transformed asset.\r\n     */\r\n    constructor(cropType, cropWidth, cropHeight) {\r\n        super();\r\n        this._actionModel = { dimensions: {} };\r\n        this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\r\n        this.addQualifier(new Qualifier('c', cropType));\r\n        cropWidth && this.width(cropWidth);\r\n        cropHeight && this.height(cropHeight);\r\n    }\r\n    /**\r\n     * @description Sets the height of the resize\r\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\r\n     */\r\n    height(x) {\r\n        this._actionModel.dimensions.height = x;\r\n        return this.addQualifier(new Qualifier('h', x));\r\n    }\r\n    /**\r\n     * @description Sets the width of the resize\r\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\r\n     */\r\n    width(x) {\r\n        this._actionModel.dimensions.width = x;\r\n        return this.addQualifier(new Qualifier('w', x));\r\n    }\r\n    /**\r\n     * @description Sets the aspect ratio of the asset.\r\n     * For a list of supported types see {@link Qualifiers.AspectRatio|\r\n      * AspectRatio values}\r\n     * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\r\n     * @return {this}\r\n     */\r\n    aspectRatio(ratio) {\r\n        // toFloatAsString is used to ensure 1 turns into 1.0\r\n        if (ratio instanceof AspectRatioQualifierValue) {\r\n            this._actionModel.dimensions.aspectRatio = `${ratio}`;\r\n            return this.addQualifier(new Qualifier('ar', ratio));\r\n        }\r\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\r\n            this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\r\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\r\n        }\r\n        if (ratio instanceof FlagQualifier) {\r\n            this._actionModel.dimensions.aspectRatio = `${ratio.qualifierValue}`;\r\n            return this.addFlag(ratio);\r\n        }\r\n    }\r\n    /**\r\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\r\n     * @return {this}\r\n     */\r\n    relative() {\r\n        this._actionModel.relative = true;\r\n        return this.addFlag(relative());\r\n    }\r\n    /**\r\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\r\n     * @return {this}\r\n     */\r\n    regionRelative() {\r\n        this._actionModel.regionRelative = true;\r\n        return this.addFlag(regionRelative());\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, dimensions, relative, regionRelative } = actionModel;\r\n        const { aspectRatio, width, height } = dimensions;\r\n        const cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(cropMode, width, height);\r\n        aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\r\n        relative && result.relative();\r\n        regionRelative && result.regionRelative();\r\n        return result;\r\n    }\r\n}\r\nexport { ResizeSimpleAction };\r\n", "import { QualifierValue } from \"../../../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Qualifiers.FocusOn\r\n * @extends {SDK.QualifierValue}\r\n */\r\nclass FocusOnValue extends QualifierValue {\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n    toString() {\r\n        return this.name;\r\n    }\r\n}\r\nexport { FocusOnValue };\r\n", "import { FocusOnValue } from \"./gravity/qualifiers/focusOn/FocusOnValue.js\";\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects birds\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction bird() {\r\n    return new FocusOnValue('bird');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Detects dogs\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction dog() {\r\n    return new FocusOnValue('dog');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects cats\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction cat() {\r\n    return new FocusOnValue('cat');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects microwaves\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction microwave() {\r\n    return new FocusOnValue('microwave');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects refrigerators\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction refrigerator() {\r\n    return new FocusOnValue('refrigerator');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects bottles\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction bottle() {\r\n    return new FocusOnValue('bottle');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects sinks\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction sink() {\r\n    return new FocusOnValue('sink');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects skateboards\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction skateboard() {\r\n    return new FocusOnValue('skateboard');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects people\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction person() {\r\n    return new FocusOnValue('person');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects the largest face in an image with the Advanced Facial Attribute Detection add-on and makes it the focus of the transformation.\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction advancedFace() {\r\n    return new FocusOnValue('adv_face');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects all faces in an image with the Advanced Facial Attribute Detection add-on and makes them the focus of the transformation.\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction advancedFaces() {\r\n    return new FocusOnValue('adv_faces');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects all eyes in an image with the Advanced Facial Attribute Detection add-on and makes them the focus of the transformation.\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction advancedEyes() {\r\n    return new FocusOnValue('adv_eyes');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects the largest face in the asset and makes it the focus of the transformation.\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction face() {\r\n    return new FocusOnValue('face');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects all the faces in the asset and makes them the focus of the transformation.\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction faces() {\r\n    return new FocusOnValue('faces');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects all the faces in the asset and makes them the focus of the transformation.\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction background() {\r\n    return new FocusOnValue('background');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects aeroplane\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction aeroplane() {\r\n    return new FocusOnValue('aeroplane');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects bicycle\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction bicycle() {\r\n    return new FocusOnValue('bicycle');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects boat\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction boat() {\r\n    return new FocusOnValue('boat');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects bus\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction bus() {\r\n    return new FocusOnValue('bus');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects car\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction car() {\r\n    return new FocusOnValue('car');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects chair\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction chair() {\r\n    return new FocusOnValue('chair');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects cow\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction cow() {\r\n    return new FocusOnValue('cow');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects diningtable\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction diningtable() {\r\n    return new FocusOnValue('diningtable');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects horse\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction horse() {\r\n    return new FocusOnValue('horse');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects motorbike\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction motorbike() {\r\n    return new FocusOnValue('motorbike');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects pottedplant\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction pottedplant() {\r\n    return new FocusOnValue('pottedplant');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects sheep\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction sheep() {\r\n    return new FocusOnValue('sheep');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects sofa\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction sofa() {\r\n    return new FocusOnValue('sofa');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects train\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction train() {\r\n    return new FocusOnValue('train');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detects tvmonitor\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction tvmonitor() {\r\n    return new FocusOnValue('tvmonitor');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FocusOn\r\n * @description Detect all text elements in an image using the {@link https://cloudinary.com/documentation/ocr_text_detection_and_extraction_addon|OCR Text Detection and Extraction add-on} and use the detected bounding box coordinates as the basis of the transformation.\r\n * @return {Qualifiers.FocusOn.FocusOnValue} FocusOnValue\r\n */\r\nfunction ocr() {\r\n    return new FocusOnValue('ocr_text');\r\n}\r\n/**\r\n * @memberOf Qualifiers\r\n * @namespace FocusOn\r\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\r\n */\r\nconst FocusOn = {\r\n    person,\r\n    cat,\r\n    microwave,\r\n    refrigerator,\r\n    skateboard,\r\n    bird,\r\n    bottle,\r\n    dog,\r\n    sink,\r\n    face,\r\n    train,\r\n    sofa,\r\n    sheep,\r\n    pottedplant,\r\n    horse,\r\n    faces,\r\n    cow,\r\n    bus,\r\n    boat,\r\n    advancedEyes,\r\n    advancedFace,\r\n    advancedFaces,\r\n    aeroplane,\r\n    background,\r\n    bicycle,\r\n    car,\r\n    chair,\r\n    diningtable,\r\n    tvmonitor,\r\n    motorbike,\r\n    ocr\r\n};\r\nexport { FocusOnValue, FocusOn, person, cat, microwave, refrigerator, skateboard, bird, bottle, dog, sink, face, train, sofa, sheep, pottedplant, horse, faces, cow, bus, boat, advancedEyes, advancedFace, advancedFaces, aeroplane, background, bicycle, car, chair, diningtable, tvmonitor, motorbike, ocr };\r\n", "import { AutoGravity } from \"../../qualifiers/gravity/autoGravity/AutoGravity.js\";\r\nimport { FocusOnGravity } from \"../../qualifiers/gravity/focusOnGravity/FocusOnGravity.js\";\r\nimport { autoGravity } from \"../../qualifiers/gravity.js\";\r\nimport { FocusOnValue } from \"../../qualifiers/focusOn.js\";\r\n/**\r\n * true if gravity starts with 'auto' or 'auto:'\r\n * @param gravity\r\n */\r\nfunction isIAutoGravityString(gravity) {\r\n    return gravity && `${gravity}`.split(':')[0] === 'auto';\r\n}\r\n/**\r\n * Validate that given val is an ICompassGravity\r\n * @param gravity\r\n */\r\nfunction isCompassGravity(gravity) {\r\n    //const gravityString = `${(typeof gravity === \"string\" ? gravity : gravity.qualifierValue)}`;\r\n    const gravityValue = getGravityValue(gravity);\r\n    return ['north', 'center', 'east', 'west', 'south', 'north_west', 'south_east', 'south_west', 'north_east'].includes(gravityValue);\r\n}\r\n/**\r\n * Get the value of given gravity\r\n * @param gravity\r\n */\r\nfunction getGravityValue(gravity) {\r\n    return `${gravity}`.replace('g_', '');\r\n}\r\n/**\r\n * Creates a compassGravity model\r\n * @param gravity\r\n */\r\nfunction createCompassGravityModel(gravity) {\r\n    return {\r\n        compass: getGravityValue(gravity),\r\n        gravityType: 'direction'\r\n    };\r\n}\r\n/**\r\n * Validate that given gravity is an instance of ocr gravity\r\n * @param gravity\r\n */\r\nfunction isOcrGravity(gravity) {\r\n    return getGravityValue(gravity) === 'ocr_text';\r\n}\r\n/**\r\n * Creates an ocr gravity model\r\n */\r\nfunction createOcrGravityModel() {\r\n    return {\r\n        gravityType: 'ocr'\r\n    };\r\n}\r\n/**\r\n * Validate that given gravity is an instance of AutoGravity\r\n * @param gravity\r\n */\r\nfunction isAutoGravity(gravity) {\r\n    return `${gravity.qualifierValue}`.split(':')[0] === 'auto';\r\n}\r\n/**\r\n * Create an instance of IAutoGravityObjectModel\r\n * @param gravity\r\n */\r\nfunction createIAutoFocusObject(gravity) {\r\n    const gravityString = gravity.toString();\r\n    const values = gravityString.split('_');\r\n    const result = {\r\n        object: values[0]\r\n    };\r\n    if (values.length > 1) {\r\n        if (values[1] === 'avoid') {\r\n            result.avoid = true;\r\n        }\r\n        else {\r\n            result.weight = +values[1];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Creates an auto gravity model from given AutoGravity\r\n * @param gravity\r\n */\r\nfunction createAutoGravityModel(gravity) {\r\n    let values;\r\n    const gravityQualifier = gravity === 'auto' ? new AutoGravity() : gravity;\r\n    if (`${gravity}`.startsWith('auto:')) {\r\n        values = `${gravity}`.split(':').filter((v) => v !== 'auto');\r\n    }\r\n    else {\r\n        values = gravityQualifier.qualifierValue.values.filter((v) => v !== 'auto');\r\n    }\r\n    const autoFocus = values.map(createIAutoFocusObject);\r\n    return {\r\n        gravityType: 'auto',\r\n        autoFocus\r\n    };\r\n}\r\n/**\r\n * Create IFocusOnGravityModel from FocusOnGravity\r\n * @param gravity\r\n */\r\nfunction createFocusOnGravityModel(gravity) {\r\n    const hasAutoGravity = `${gravity}`.split(':').includes('auto');\r\n    const values = gravity.qualifierValue.values;\r\n    const focusOnValues = hasAutoGravity ? values.slice(0, values.length - 1) : values;\r\n    const result = {\r\n        gravityType: 'object',\r\n        focusOnObjects: focusOnValues.map((v) => `${v}`)\r\n    };\r\n    if (hasAutoGravity) {\r\n        // Remove the first 'auto' value by slicing it, because it's added by autoGravity()\r\n        const autoFocusObjects = values[values.length - 1].values.slice(1);\r\n        const autoGravityInstance = autoGravity().autoFocus(...autoFocusObjects);\r\n        result.fallbackGravity = createAutoGravityModel(autoGravityInstance);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Creates a FocusOnGravity from given string\r\n * @param gravity\r\n */\r\nfunction createFocusOnGravity(gravity) {\r\n    const values = gravity.split(':');\r\n    const focusOnValues = values.map((g) => new FocusOnValue(g));\r\n    return new FocusOnGravity(focusOnValues);\r\n}\r\n/**\r\n * Create a model of given gravity\r\n * @param gravity\r\n */\r\nexport function createGravityModel(gravity) {\r\n    if (isCompassGravity(gravity)) {\r\n        return createCompassGravityModel(gravity);\r\n    }\r\n    if (isOcrGravity(gravity)) {\r\n        return createOcrGravityModel();\r\n    }\r\n    if (isIAutoGravityString(gravity) || isAutoGravity(gravity)) {\r\n        return createAutoGravityModel(gravity);\r\n    }\r\n    return createFocusOnGravityModel(typeof gravity === 'string' ? createFocusOnGravity(gravity) : gravity);\r\n}\r\n", "import { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\r\nimport { FocusOnValue } from \"./focusOn.js\";\r\n/**\r\n * @summary qualifier\r\n * @namespace AutoFocus\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\r\n */\r\n/**\r\n * @memberOf Qualifiers.AutoFocus\r\n * @extends {SDK.QualifierValue}\r\n * @see Visit {@link Qualifiers.Gravity|Gravity} for an example\r\n */\r\nclass AutoFocus extends QualifierValue {\r\n    constructor(focusOn, weight) {\r\n        super();\r\n        this._weight = weight;\r\n        this.focusOn = focusOn;\r\n        this.shouldAvoid = false;\r\n    }\r\n    /**\r\n     * @summary qualifier\r\n     * @description Specifies the object to focus on automatically\r\n     * Accepts an AutoFocusObject (which is just a wrapper for a FocusOn object, but with extra method: avoid, weight)\r\n     * @param {Qualifiers.FocusOn} obj The object to focus on.\r\n     * @param {number} weight\r\n     */\r\n    static focusOn(obj, weight) {\r\n        const focusOn = obj instanceof FocusOnValue ? obj : new FocusOnValue(obj);\r\n        return new AutoFocus(focusOn, weight);\r\n    }\r\n    shouldAddWeight() {\r\n        return typeof this._weight === 'number' || typeof this._weight === 'string' || this.shouldAvoid;\r\n    }\r\n    /**\r\n     * @summary qualifier\r\n     * @desc Get the name of the of the object\r\n     */\r\n    getName() {\r\n        return this.focusOn.name;\r\n    }\r\n    /**\r\n     * @summary qualifier\r\n     * @desc Get the weight for the object\r\n     */\r\n    getWeight() {\r\n        if (this.shouldAvoid) {\r\n            return 'avoid';\r\n        }\r\n        else {\r\n            return this._weight;\r\n        }\r\n    }\r\n    /**\r\n     * @summary qualifier\r\n     * @desc Return the string representation of this QualifierValue\r\n     */\r\n    toString() {\r\n        // Future proofing, in case we'd like to support some custom string in the future, or if data is coming from a DB\r\n        if (this.shouldAddWeight()) {\r\n            return `${this.getName()}_${this.getWeight()}`;\r\n        }\r\n        else {\r\n            return `${this.getName()}`;\r\n        }\r\n    }\r\n    /**\r\n     * @summary qualifier\r\n     * @description Sets the importance level of the object within the automatic gravity algorithm\r\n     * @param {numebr} w The focus weight for the object\r\n     * @return {this}\r\n     */\r\n    weight(w) {\r\n        this._weight = w;\r\n        return this;\r\n    }\r\n    /**\r\n     * @summary qualifier\r\n     * @description Attempts to avoid the detected object in the image\r\n     * @return {this}\r\n     */\r\n    avoid() {\r\n        this.shouldAvoid = true;\r\n        return this;\r\n    }\r\n}\r\nconst focusOn = AutoFocus.focusOn;\r\nexport { AutoFocus, focusOn };\r\n", "import { QualifierValue } from \"../../../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Qualifiers.Compass\r\n * @extends {SDK.QualifierValue}\r\n */\r\nclass CompassQualifier extends QualifierValue {\r\n    constructor(val) {\r\n        super();\r\n        this.val = val;\r\n    }\r\n    toString() {\r\n        return this.val;\r\n    }\r\n}\r\nexport { CompassQualifier };\r\n", "import { autoGravity, focusOn } from \"../../qualifiers/gravity.js\";\r\nimport { FocusOnValue, ocr } from \"../../qualifiers/focusOn.js\";\r\nimport { AutoFocus } from \"../../qualifiers/autoFocus.js\";\r\nimport { CompassGravity } from \"../../qualifiers/gravity/compassGravity/CompassGravity.js\";\r\nimport { CompassQualifier } from \"../../qualifiers/gravity/qualifiers/compass/CompassQualifier.js\";\r\n/**\r\n * Validates that gravityModel is an ICompassGravityModel\r\n * @param gravityModel\r\n */\r\nfunction isCompassGravityModel(gravityModel) {\r\n    return gravityModel.gravityType === 'direction';\r\n}\r\n/**\r\n * Validates that gravityModel is an IOcrGravityModel\r\n * @param gravityModel\r\n */\r\nfunction isOcrGravityModel(gravityModel) {\r\n    return gravityModel.gravityType === 'ocr';\r\n}\r\n/**\r\n * Validates that gravityModel is an IAutoGravityModel\r\n * @param gravityModel\r\n */\r\nfunction isAutoGravityModel(gravityModel) {\r\n    return gravityModel.gravityType === 'auto';\r\n}\r\n/**\r\n * Create AutoFocus from IAutoGravityObjectModel\r\n * @param autoGravityObjectModel\r\n */\r\nfunction createAutoFocusFromModel(autoGravityObjectModel) {\r\n    const { object, weight, avoid } = autoGravityObjectModel;\r\n    const autoFocus = new AutoFocus(new FocusOnValue(object));\r\n    (weight || weight === 0) && autoFocus.weight(weight);\r\n    avoid && autoFocus.avoid();\r\n    return autoFocus;\r\n}\r\n/**\r\n * Create AutoGravity from IAutoGravityModel\r\n * @param gravityModel\r\n */\r\nfunction createAutoGravityFromModel(gravityModel) {\r\n    const autoFocusModel = gravityModel.autoFocus || [];\r\n    const autoFocus = autoFocusModel.map(createAutoFocusFromModel);\r\n    return autoGravity().autoFocus(...autoFocus);\r\n}\r\n/**\r\n * Create FocusOnGravity from given IFocusOnGravityModel\r\n * @param gravityModel\r\n */\r\nfunction createFocusOnGravityFromModel(gravityModel) {\r\n    const focusOnObjects = (gravityModel.focusOnObjects || []).map((str) => new FocusOnValue(str));\r\n    const result = focusOn(...focusOnObjects);\r\n    if (gravityModel.fallbackGravity) {\r\n        const autoGravity = createAutoGravityFromModel(gravityModel.fallbackGravity);\r\n        result.fallbackGravity(autoGravity);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create gravity instance from given gravity model\r\n * @param gravityModel\r\n */\r\nfunction createGravityFromModel(gravityModel) {\r\n    if (isCompassGravityModel(gravityModel)) {\r\n        return new CompassGravity(new CompassQualifier(gravityModel.compass));\r\n    }\r\n    if (isOcrGravityModel(gravityModel)) {\r\n        return focusOn(ocr());\r\n    }\r\n    if (isAutoGravityModel(gravityModel)) {\r\n        return createAutoGravityFromModel(gravityModel);\r\n    }\r\n    return createFocusOnGravityFromModel(gravityModel);\r\n}\r\nexport { createGravityFromModel };\r\n", "import { ResizeSimpleAction } from \"./ResizeSimpleAction.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { createGravityModel } from \"../../internal/models/createGravityModel.js\";\r\nimport { createGravityFromModel } from \"../../internal/models/createGravityFromModel.js\";\r\n/**\r\n * @description Defines an advanced resize.\r\n * @extends Actions.Resize.ResizeSimpleAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeAdvancedAction extends ResizeSimpleAction {\r\n    /**\r\n     * @description Which part of the original image to include.\r\n     * @param {Qualifiers.Gravity} gravity\r\n     */\r\n    gravity(gravity) {\r\n        this._actionModel.gravity = createGravityModel(gravity);\r\n        const gravityQualifier = typeof gravity === \"string\" ? new Qualifier('g', gravity) : gravity;\r\n        return this.addQualifier(gravityQualifier);\r\n    }\r\n    static fromJson(actionModel) {\r\n        const result = super.fromJson.apply(this, [actionModel]);\r\n        if (actionModel.gravity) {\r\n            result.gravity(createGravityFromModel(actionModel.gravity));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { ResizeAdvancedAction };\r\n", "import { Qualifier } from \"../../../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Defines the visual appearance of the background.\r\n * @memberOf Qualifiers.Background\r\n * @extends {SDK.Qualifier}\r\n */\r\nclass BackgroundQualifier extends Qualifier {\r\n    constructor(backgroundValue) {\r\n        // The qualifier key for this qualifier\r\n        super('b');\r\n        // Such as color (b_red)\r\n        if (backgroundValue) {\r\n            this.addValue(backgroundValue);\r\n        }\r\n    }\r\n}\r\nexport { BackgroundQualifier };\r\n", "import { BackgroundQualifier } from \"./base/BackgroundQualifier.js\";\r\nexport const DEFAULT_INTENSITY = 100;\r\nexport const DEFAULT_BRIGHTNESS = 0;\r\n/**\r\n * @description A class for blurred background transformations.\r\n * @memberOf Qualifiers.Background\r\n * @extends {Qualifiers.Background.BackgroundQualifier}\r\n */\r\nclass BlurredBackgroundAction extends BackgroundQualifier {\r\n    /**\r\n     * @description Sets the intensity of the blur.\r\n     * @param {number} value - The intensity of the blur.\r\n     */\r\n    intensity(value) {\r\n        this.intensityLevel = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the brightness of the background.\r\n     * @param {number} value - The brightness of the background.\r\n     */\r\n    brightness(value) {\r\n        this.brightnessLevel = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description\r\n     * Stringify the qualifier\r\n     * BackgroundQualifiers don't have a value, but instead override the toString() function\r\n     */\r\n    toString() {\r\n        // b_blurred:{intensity}:{brightness}\r\n        const intensity = this.intensityLevel !== undefined ? `:${this.intensityLevel}` : '';\r\n        const brightness = this.brightnessLevel !== undefined\r\n            ? this.intensityLevel !== undefined\r\n                ? `:${this.brightnessLevel}`\r\n                : `:${DEFAULT_INTENSITY}:${this.brightnessLevel}`\r\n            : '';\r\n        return `b_blurred${intensity}${brightness}`;\r\n    }\r\n}\r\nexport default BlurredBackgroundAction;\r\n", "/**\r\n * Returns RGB or Color\r\n * @private\r\n * @param color\r\n */\r\nexport function prepareColor(color) {\r\n    if (color) {\r\n        return color.match(/^#/) ? `rgb:${color.substr(1)}` : color;\r\n    }\r\n    else {\r\n        return color;\r\n    }\r\n}\r\n", "import { prepareColor } from \"../../../../internal/utils/prepareColor.js\";\r\nimport { BackgroundQualifier } from \"./BackgroundQualifier.js\";\r\n/**\r\n * @description Defines the background color to use when resizing with padding.\r\n * @memberOf Qualifiers.Background\r\n * @extends {Qualifiers.Background.BackgroundQualifier}\r\n */\r\nclass BaseCommonBackground extends BackgroundQualifier {\r\n    constructor() {\r\n        super();\r\n        this._palette = [];\r\n    }\r\n    /**\r\n     * @description Selects the strongest contrasting color to use for padding.\r\n     * @return {this}\r\n     */\r\n    contrast() {\r\n        this._contrast = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Defines the custom colors to use when resizing using content-aware padding.\r\n     * @param {...string} colors One or more colors - Example: palette('green', 'red', blue')\r\n     * @return {this}\r\n     */\r\n    palette(...colors) {\r\n        this._palette = colors.map((color) => {\r\n            return prepareColor(color);\r\n        });\r\n        return this;\r\n    }\r\n}\r\nexport { BaseCommonBackground };\r\n", "import { BaseCommonBackground } from \"../base/BaseCommonBackground.js\";\r\n/**\r\n * @description Automatically determines the color to use for padding, if needed when resizing an asset. Selects the\r\n * predominant color from the border of the image.\r\n * @memberOf Qualifiers.Background\r\n * @extends {Qualifiers.Background.BaseCommonBackground}\r\n */\r\nclass BackgroundAutoBorderQualifier extends BaseCommonBackground {\r\n    /**\r\n     * @description\r\n     * Stringify the qualifier\r\n     * BackgroundQualifiers don't have a value, but instead override the toString() function.\r\n     */\r\n    toString() {\r\n        return `\r\n    b_auto:border\r\n    ${this._contrast ? '_contrast' : ''}\r\n    ${this._palette.length ? `:palette_${this._palette.join('_')}` : ''}\r\n    `.replace(/\\s+/g, '');\r\n    }\r\n}\r\nexport { BackgroundAutoBorderQualifier };\r\n", "import { BaseCommonBackground } from \"./BaseCommonBackground.js\";\r\n/**\r\n * @description Defines the gradient fade effect to use for the background when resizing with padding.\r\n * @memberOf Qualifiers.Background\r\n * @extends {Qualifiers.Background.BaseCommonBackground}\r\n */\r\nclass BaseGradientBackground extends BaseCommonBackground {\r\n    /**\r\n     *\r\n     * @description Sets the number of predominant colors to use (2 or 4).\r\n     * @param {number} num\r\n     * @return {this}\r\n     */\r\n    gradientColors(num) {\r\n        this._gradientColors = num;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the direction for a background gradient fade effect.\r\n     * @param {Qualifiers.GradientDirection | GradientDirectionType | string} direction Use one of these functions\r\n     * provided by {@link Qualifiers.GradientDirection|GradientDirection}\r\n     * @return {this}\r\n     */\r\n    gradientDirection(direction) {\r\n        this._gradientDirection = direction;\r\n        return this;\r\n    }\r\n}\r\nexport { BaseGradientBackground };\r\n", "import { BaseGradientBackground } from \"../base/BaseGradientBackground.js\";\r\n/**\r\n * @description Specifies that the gradient fade effect, used for the background when resizing with padding, uses the\r\n * predominant colors in the border pixels of the image.\r\n * @memberOf Qualifiers.Background\r\n * @extends {Qualifiers.Background.BaseGradientBackground}\r\n */\r\nclass BackgroundBorderGradientQualifier extends BaseGradientBackground {\r\n    /**\r\n     * @description\r\n     * Stringify the qualifier\r\n     * BackgroundQualifiers don't have a value, but instead override the toString() function.\r\n     */\r\n    toString() {\r\n        return `\r\n    b_auto:border_gradient\r\n    ${this._contrast ? '_contrast' : ''}\r\n    ${this._gradientColors ? `:${this._gradientColors}` : ''}\r\n    ${this._gradientDirection ? `:${this._gradientDirection}` : ''}\r\n    ${this._palette.length ? `:palette_${this._palette.join('_')}` : ''}\r\n    `.replace(/\\s+/g, '');\r\n    }\r\n}\r\nexport { BackgroundBorderGradientQualifier };\r\n", "import { BaseGradientBackground } from \"../base/BaseGradientBackground.js\";\r\n/**\r\n * @description Specifies that the gradient fade effect, used for the background when resizing with padding, uses the\r\n * predominant colors in the whole of the image.\r\n * @memberOf Qualifiers.Background\r\n * @extends {Qualifiers.Background.BaseGradientBackground}\r\n */\r\nclass BackgroundPredominantGradientQualifier extends BaseGradientBackground {\r\n    /**\r\n     * @description\r\n     * Stringify the qualifier\r\n     * BackgroundQualifiers don't have a value, but instead override the toString() function.\r\n     */\r\n    toString() {\r\n        return `\r\n    b_auto:predominant_gradient\r\n    ${this._contrast ? '_contrast' : ''}\r\n    ${this._gradientColors ? `:${this._gradientColors}` : ''}\r\n    ${this._gradientDirection ? `:${this._gradientDirection}` : ''}\r\n    ${this._palette.length ? `:palette_${this._palette.join('_')}` : ''}\r\n    `.replace(/\\s+/g, '');\r\n    }\r\n}\r\nexport { BackgroundPredominantGradientQualifier };\r\n", "import { BaseCommonBackground } from \"../base/BaseCommonBackground.js\";\r\n/**\r\n * @description Automatically determines the color to use for padding, if needed when resizing an asset. Selects the\r\n * predominant color from the whole image.\r\n * @memberOf Qualifiers.Background\r\n * @extends {Qualifiers.Background.BaseCommonBackground}\r\n */\r\nclass BackgroundAutoPredominantQualifier extends BaseCommonBackground {\r\n    /**\r\n     * @description\r\n     * Stringify the qualifier\r\n     * BackgroundQualifiers don't have a value, but instead override the toString() function.\r\n     */\r\n    toString() {\r\n        return `\r\n    b_auto:predominant\r\n    ${this._contrast ? '_contrast' : ''}\r\n    ${this._palette.length ? `:palette_${this._palette.join('_')}` : ''}\r\n    `.replace(/\\s+/g, '');\r\n    }\r\n}\r\nexport { BackgroundAutoPredominantQualifier };\r\n", "export const encodePromptComponent = (prompt) => composeStringOperations(encodeURIComponent, replaceMissingChars, decodeSpaces)(prompt);\r\nconst charsMissingFromUrlEncode = /[!'()*~_.-]/g;\r\nconst missingCharsMap = {\r\n    '!': '%21',\r\n    \"'\": '%27',\r\n    '(': '%28',\r\n    ')': '%29',\r\n    '*': '%2A',\r\n    '~': '%7E',\r\n    _: '%5F',\r\n    '.': '%2E',\r\n    '-': '%2D',\r\n};\r\nconst replaceMissingChars = (str) => {\r\n    return str.replace(charsMissingFromUrlEncode, (match) => { var _a; return (_a = missingCharsMap[match]) !== null && _a !== void 0 ? _a : match; });\r\n};\r\nconst decodeSpaces = (str) => str.replace(/%20/g, ' ');\r\nconst composeStringOperations = (...fns) => (arg) => fns.reduce((acc, fn) => fn(acc), arg);\r\n", "import { encodePromptComponent } from \"../../../internal/utils/encodePromptComponents.js\";\r\nimport { BackgroundQualifier } from \"./base/BackgroundQualifier.js\";\r\n/**\r\n * @description Automatically fills the padded area using generative AI to extend the image seamlessly.\r\n * Optionally include a prompt to guide the image generation.\r\n * @memberOf Qualifiers.Background\r\n */\r\nclass BackgroundGenerativeFillQualifier extends BackgroundQualifier {\r\n    constructor() {\r\n        super(\"gen_fill\");\r\n        this._backgroundType = 'generativeFill';\r\n    }\r\n    prompt(prompt) {\r\n        try {\r\n            this._prompt = decodeURIComponent(prompt);\r\n        }\r\n        catch (_a) {\r\n            this._prompt = prompt;\r\n        }\r\n        return this;\r\n    }\r\n    getPrompt() {\r\n        return this._prompt;\r\n    }\r\n    getBackgroundType() {\r\n        return this._backgroundType;\r\n    }\r\n    /**\r\n     * @description\r\n     * Override the toString() function to explicitly stringify the qualifier.\r\n     */\r\n    toString() {\r\n        return `b_gen_fill${this._prompt ? `:prompt_${encodePromptComponent(this._prompt)}` : ''}`;\r\n    }\r\n}\r\nexport { BackgroundGenerativeFillQualifier };\r\n", "import BlurredBackgroundAction from \"../../qualifiers/background/shared/BlurredBackgroundAction.js\";\r\nimport { BackgroundAutoBorderQualifier } from \"../../qualifiers/background/shared/auto/BackgroundAutoBorderQualifier.js\";\r\nimport { BackgroundBorderGradientQualifier } from \"../../qualifiers/background/shared/gradient/BackgroundBorderGradientQualifier.js\";\r\nimport { BackgroundPredominantGradientQualifier } from \"../../qualifiers/background/shared/gradient/BackgroundPredominantGradientQualifier.js\";\r\nimport { BackgroundAutoPredominantQualifier } from \"../../qualifiers/background/shared/auto/BackgroundAutoPredominantQualifier.js\";\r\nimport { BackgroundGenerativeFillQualifier } from \"../../qualifiers/background/shared/BackgroundGenerativeFillQualifier.js\";\r\n/**\r\n * Get the value of given background\r\n * @param background\r\n */\r\nfunction getBackgroundValue(background) {\r\n    return `${background}`.replace('b_', '');\r\n}\r\n/**\r\n * Create an IAutoBackgroundModel from given background\r\n */\r\nfunction createAutoBackgroundModel() {\r\n    return { backgroundType: 'auto' };\r\n}\r\n/**\r\n * Create an IBlurredBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createBlurredBackgroundModel(background) {\r\n    const { intensityLevel, brightnessLevel } = background;\r\n    const result = {\r\n        backgroundType: 'blurred'\r\n    };\r\n    if (intensityLevel || intensityLevel === 0) {\r\n        result.intensity = intensityLevel;\r\n    }\r\n    if (brightnessLevel || brightnessLevel === 0) {\r\n        result.brightness = brightnessLevel;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create an IContrastPaletteBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createContrastPaletteBackgroundModel(background) {\r\n    const contrast = background._contrast;\r\n    const palette = background._palette;\r\n    const result = {\r\n        backgroundType: ''\r\n    };\r\n    if (contrast) {\r\n        result.contrast = true;\r\n    }\r\n    if (palette) {\r\n        result.palette = palette;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create an IBorderBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createBorderBackgroundModel(background) {\r\n    return Object.assign(Object.assign({}, createContrastPaletteBackgroundModel(background)), { backgroundType: 'border' });\r\n}\r\n/**\r\n * Create an IBaseGradientBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createBaseGradientBackgroundModel(background) {\r\n    const gradientColors = background._gradientColors;\r\n    const gradientDirection = `${background._gradientDirection}`;\r\n    const result = createContrastPaletteBackgroundModel(background);\r\n    if (gradientColors) {\r\n        result.gradientColors = gradientColors;\r\n    }\r\n    if (gradientDirection) {\r\n        result.gradientDirection = gradientDirection;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Create an IBorderGradientBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createBorderGradientBackgroundModel(background) {\r\n    return Object.assign(Object.assign({}, createBaseGradientBackgroundModel(background)), { backgroundType: 'borderGradient' });\r\n}\r\n/**\r\n * Create an IColorBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createColorBackgroundModel(background) {\r\n    return {\r\n        backgroundType: 'color',\r\n        color: getBackgroundValue(background)\r\n    };\r\n}\r\n/**\r\n * Create an IPredominantBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createPredominantBackgroundModel(background) {\r\n    return Object.assign(Object.assign({}, createContrastPaletteBackgroundModel(background)), { backgroundType: 'predominant' });\r\n}\r\n/**\r\n * Create an IPredominantGradientBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createPredominantGradientBackgroundModel(background) {\r\n    return Object.assign(Object.assign({}, createBaseGradientBackgroundModel(background)), { backgroundType: 'predominantGradient' });\r\n}\r\n/**\r\n * Create an IGenerativeFillBackgroundModel from given background\r\n * @param urlValue\r\n */\r\nfunction createGenerativeFillBackgroundModel(background) {\r\n    return Object.assign({ backgroundType: background.getBackgroundType() }, (background.getPrompt() ? { prompt: background.getPrompt() } : {}));\r\n}\r\n/**\r\n * Create an IBackgroundModel from given background\r\n * @param background\r\n */\r\nfunction createBackgroundModel(background) {\r\n    if (getBackgroundValue(background) === 'auto') {\r\n        return createAutoBackgroundModel();\r\n    }\r\n    if (background instanceof BlurredBackgroundAction) {\r\n        return createBlurredBackgroundModel(background);\r\n    }\r\n    if (background instanceof BackgroundAutoBorderQualifier) {\r\n        return createBorderBackgroundModel(background);\r\n    }\r\n    if (background instanceof BackgroundBorderGradientQualifier) {\r\n        return createBorderGradientBackgroundModel(background);\r\n    }\r\n    if (background instanceof BackgroundAutoPredominantQualifier) {\r\n        return createPredominantBackgroundModel(background);\r\n    }\r\n    if (background instanceof BackgroundPredominantGradientQualifier) {\r\n        return createPredominantGradientBackgroundModel(background);\r\n    }\r\n    if (background instanceof BackgroundGenerativeFillQualifier) {\r\n        return createGenerativeFillBackgroundModel(background);\r\n    }\r\n    return createColorBackgroundModel(background);\r\n}\r\nexport { createBackgroundModel };\r\n", "/**\r\n * @description Contains functions to select the text decoration to be used with text.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\r\n * @memberOf Qualifiers\r\n * @namespace TextDecoration\r\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextDecoration\r\n */\r\nfunction normal() {\r\n    return '';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextDecoration\r\n */\r\nfunction underline() {\r\n    return 'underline';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextDecoration\r\n */\r\nfunction strikethrough() {\r\n    return 'strikethrough';\r\n}\r\nconst TextDecoration = { normal, underline, strikethrough };\r\nexport { TextDecoration, normal, underline, strikethrough };\r\n", "/**\r\n * @description Contains functions to select the alignment of the text.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\r\n * @memberOf Qualifiers\r\n * @namespace TextAlignment\r\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextAlignment\r\n */\r\nfunction left() {\r\n    return 'left';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextAlignment\r\n */\r\nfunction right() {\r\n    return 'right';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextAlignment\r\n */\r\nfunction center() {\r\n    return 'center';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextAlignment\r\n */\r\nfunction start() {\r\n    return 'start';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextAlignment\r\n */\r\nfunction end() {\r\n    return 'end';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.TextAlignment\r\n */\r\nfunction justify() {\r\n    return 'justify';\r\n}\r\nconst TextAlignment = { left, right, center, end, justify, start };\r\nexport { TextAlignment, left, right, center, end, justify, start };\r\n", "/**\r\n * @description Contains function to set the outline stroke.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\r\n * @memberOf Qualifiers\r\n * @namespace TextAlignment\r\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\r\n */\r\n/**\r\n * @summary qualifier Adding a Border-like qualifier to the same action.\r\n * @memberOf Qualifiers.Stroke\r\n * @param {number|string|ExpressionQualifier} width The width in pixels.\r\n * @param {number|string|SystemColors} color The color of the border.\r\n */\r\nfunction solid(width, color) {\r\n    return `bo_${width}px_solid_${color}`;\r\n}\r\nconst Stroke = { solid };\r\nexport { Stroke, solid };\r\n", "/**\r\n * @description Qualifiers for applying an ordered dither filter to the image.\r\n * @namespace StreamingProfile\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.StreamingProfile\r\n * @return {string}\r\n */\r\nfunction fullHd() {\r\n    return 'full_hd';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.StreamingProfile\r\n * @return {string}\r\n */\r\nfunction hd() {\r\n    return 'hd';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.StreamingProfile\r\n * @return {string}\r\n */\r\nfunction sd() {\r\n    return 'sd';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.StreamingProfile\r\n * @return {string}\r\n */\r\nfunction fullHdWifi() {\r\n    return 'full_hd_wifi';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.StreamingProfile\r\n * @return {string}\r\n */\r\nfunction fullHdLean() {\r\n    return 'full_hd_lean';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.StreamingProfile\r\n * @return {string}\r\n */\r\nfunction hdLean() {\r\n    return 'hd_lean';\r\n}\r\nconst StreamingProfile = {\r\n    hd,\r\n    sd,\r\n    hdLean,\r\n    fullHd,\r\n    fullHdLean,\r\n    fullHdWifi\r\n};\r\nexport { hd, sd, hdLean, fullHd, fullHdLean, fullHdWifi, StreamingProfile };\r\n", "/**\r\n * @description Contains functions to select the type of color-blind condition to simulate.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/blog/open_your_eyes_to_color_accessibility|Blog: Open your Eyes to Color Accessibility}\r\n * @memberOf Qualifiers\r\n * @namespace SimulateColorBlindValues\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction deuteranopia() {\r\n    return 'deuteranopia';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction protanopia() {\r\n    return 'protanopia';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction tritanopia() {\r\n    return 'tritanopia';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction tritanomaly() {\r\n    return 'tritanomaly';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction deuteranomaly() {\r\n    return 'deuteranomaly';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction coneMonochromacy() {\r\n    return 'cone_monochromacy';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.SimulateColorBlindValues\r\n * @return {string}\r\n */\r\nfunction rodMonochromacy() {\r\n    return 'rod_monochromacy';\r\n}\r\nconst SimulateColorBlind = {\r\n    coneMonochromacy,\r\n    deuteranomaly,\r\n    deuteranopia,\r\n    protanopia,\r\n    rodMonochromacy,\r\n    tritanomaly,\r\n    tritanopia\r\n};\r\nexport { SimulateColorBlind, coneMonochromacy, deuteranomaly, deuteranopia, protanopia, rodMonochromacy, tritanomaly, tritanopia };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Acts as a marker for inputs passed into Rotate.mode()\r\n * @memberOf Qualifiers.RotationMode\r\n * @extends SDK.QualifierValue\r\n */\r\nclass RotationModeQualifierValue extends QualifierValue {\r\n    constructor(val) {\r\n        super();\r\n        this.val = val;\r\n    }\r\n    toString() {\r\n        return this.val;\r\n    }\r\n}\r\nexport { RotationModeQualifierValue };\r\n", "/**\r\n * @description Contains functions to select the rotation mode.\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\r\n * @memberOf Qualifiers\r\n * @namespace RotationMode\r\n * @see Visit {@link Actions.Rotate|Rotate Action} for an example\r\n */\r\nimport { RotationModeQualifierValue } from \"./rotate/RotationModeQualifierValue.js\";\r\n/**\r\n * @summary qualifier\r\n * @description Rotate image 90 degrees clockwise only if the requested aspect ratio does not match the image's aspect ratio.\r\n * @memberOf Qualifiers.RotationMode\r\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\r\n */\r\nfunction autoRight() {\r\n    return new RotationModeQualifierValue('auto_right');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Rotate image 90 degrees counterclockwise only if the requested aspect ratio does not match the image's aspect ratio.\r\n * @memberOf Qualifiers.RotationMode\r\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\r\n */\r\nfunction autoLeft() {\r\n    return new RotationModeQualifierValue('auto_left');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Vertical mirror flip of the image.\r\n * @memberOf Qualifiers.RotationMode\r\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\r\n */\r\nfunction verticalFlip() {\r\n    return new RotationModeQualifierValue('vflip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Horizontal mirror flip of the image.\r\n * @memberOf Qualifiers.RotationMode\r\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\r\n */\r\nfunction horizontalFlip() {\r\n    return new RotationModeQualifierValue('hflip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description By default, the image is automatically rotated according to the EXIF data stored by the camera when the image\r\n *                           was taken. Set the angle to 'ignore' if you do not want the image to be automatically rotated.\r\n * @memberOf Qualifiers.RotationMode\r\n * @return {Qualifiers.RotationMode.RotationModeQualifierValue}\r\n */\r\nfunction ignore() {\r\n    return new RotationModeQualifierValue('ignore');\r\n}\r\nconst RotationMode = { autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };\r\nexport { RotationMode, autoLeft, autoRight, horizontalFlip, ignore, verticalFlip };\r\n", "import { Action } from \"../../internal/Action.js\";\r\n/**\r\n * @memberOf Qualifiers.Region\r\n */\r\nclass NamedRegion extends Action {\r\n    constructor(type) {\r\n        super();\r\n        this.regionType = type;\r\n        this._actionModel.regionType = type;\r\n    }\r\n}\r\nexport { NamedRegion };\r\n", "import { NamedRegion } from \"./NamedRegion.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @memberOf Qualifiers.Region\r\n */\r\nclass CustomRegion extends NamedRegion {\r\n    constructor() {\r\n        super('custom');\r\n    }\r\n    /**\r\n     * @description The x position in pixels.\r\n     * @param {number | string} x\r\n     */\r\n    x(x) {\r\n        this._actionModel.x = x;\r\n        this.addQualifier(new Qualifier('x', x));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The y position in pixels.\r\n     * @param {number | string} y\r\n     */\r\n    y(y) {\r\n        this._actionModel.y = y;\r\n        this.addQualifier(new Qualifier('y', y));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The width of the region in pixels.\r\n     * @param {number | string} width\r\n     */\r\n    width(width) {\r\n        this._actionModel.width = width;\r\n        this.addQualifier(new Qualifier('w', width));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The height of the region in pixels.\r\n     * @param {number | string} height\r\n     */\r\n    height(height) {\r\n        this._actionModel.height = height;\r\n        this.addQualifier(new Qualifier('h', height));\r\n        return this;\r\n    }\r\n    static fromJson(model) {\r\n        const customRegion = new CustomRegion();\r\n        if (model.width) {\r\n            customRegion.width(model.width);\r\n        }\r\n        if (model.height) {\r\n            customRegion.height(model.height);\r\n        }\r\n        if (model.x) {\r\n            customRegion.x(model.x);\r\n        }\r\n        if (model.y) {\r\n            customRegion.y(model.y);\r\n        }\r\n        return customRegion;\r\n    }\r\n}\r\nexport { CustomRegion };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\n/**\r\n * @memberOf Qualifiers.Region\r\n */\r\nclass RectangleRegion extends Action {\r\n    /**\r\n     * Rectangle defines a region where action will be applied\r\n     *\r\n     * @param {number} x The x position in pixels\r\n     * @param {number} y The y position in pixels\r\n     * @param {number} width The width in pixels\r\n     * @param {number} height The height in pixels\r\n     */\r\n    constructor(x, y, width, height) {\r\n        super();\r\n        this.addQualifier(new Qualifier(\"x\", x));\r\n        this.addQualifier(new Qualifier(\"y\", y));\r\n        this.addQualifier(new Qualifier(\"w\", width));\r\n        this.addQualifier(new Qualifier(\"h\", height));\r\n        this._actionModel = {\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n        };\r\n    }\r\n    toString() {\r\n        const { x, y, width, height } = this._actionModel;\r\n        return `(x_${x};y_${y};w_${width};h_${height})`;\r\n    }\r\n}\r\nexport { RectangleRegion };\r\n", "import { CustomRegion } from \"./region/CustomRegion.js\";\r\nimport { NamedRegion } from \"./region/NamedRegion.js\";\r\nimport { RectangleRegion } from \"./region/RectangleRegion.js\";\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Region\r\n * @return {Qualifiers.Region.CustomRegion}\r\n */\r\nfunction custom() {\r\n    return new CustomRegion();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Region\r\n * @return {Qualifiers.Region.NamedRegion}\r\n */\r\nfunction faces() {\r\n    return new NamedRegion(\"faces\");\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Region\r\n * @return {Qualifiers.Region.NamedRegion}\r\n */\r\nfunction ocr() {\r\n    return new NamedRegion(\"ocr_text\");\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Region\r\n * @return {Qualifiers.Region.RectangleRegion}\r\n */\r\nfunction rectangle(x, y, width, height) {\r\n    return new RectangleRegion(x, y, width, height);\r\n}\r\n/**\r\n * @description Contains functions to select the type of region, used with Effect.blur() and Effect.pixelate().\r\n * <b>See also</b>: {@link Actions.Effect.BlurAction|Blur Action}\r\n * <b>See also</b>: {@link Actions.Effect.Pixelate|Blur Action}\r\n * <b>See also</b>: {@link Actions.Effect|Possible effects}\r\n * @namespace Region\r\n * @memberOf Qualifiers\r\n */\r\nconst Region = { ocr, faces, custom, rectangle };\r\nexport { Region, ocr, faces, custom, rectangle };\r\n", "/**\r\n * @memberOf Qualifiers\r\n * @namespace Quality\r\n * @see Visit {@link Actions.Delivery.quality|Delivery Quality} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Quality auto\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction auto() { return 'auto'; }\r\n/**\r\n * @summary qualifier\r\n * @description Quality best\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction autoBest() { return 'auto:best'; }\r\n/**\r\n * @summary qualifier\r\n * @description Quality eco\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction autoEco() { return 'auto:eco'; }\r\n/**\r\n * @summary qualifier\r\n * @description Quality good\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction autoGood() { return 'auto:good'; }\r\n/**\r\n * @summary qualifier\r\n * @description Quality low\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction autoLow() { return 'auto:low'; }\r\n/**\r\n * @summary qualifier\r\n * @description Quality jpegmini\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction jpegmini() { return 'jpegmini'; }\r\n/**\r\n * @summary qualifier\r\n * @description Quality jpegmini best\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction jpegminiBest() { return 'jpegmini:0'; }\r\n/**\r\n * @summary qualifier\r\n * @description Quality jpegmini high\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction jpegminiHigh() { return 'jpegmini:1'; }\r\n/**\r\n * @summary qualifier\r\n * @quality\r\n * @description Quality jpegmini medium\r\n * @memberOf Qualifiers.Quality\r\n * @return {string}\r\n */\r\nfunction jpegminiMedium() { return 'jpegmini:2'; }\r\nconst Quality = { auto, autoBest, autoEco, autoGood, autoLow, jpegmini, jpegminiBest, jpegminiHigh, jpegminiMedium };\r\nexport { Quality, auto, autoBest, autoEco, autoGood, autoLow, jpegmini, jpegminiBest, jpegminiHigh, jpegminiMedium };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { tiled } from \"../flag.js\";\r\nimport { noOverflow } from \"../flag.js\";\r\nimport { createGravityModel } from \"../../internal/models/createGravityModel.js\";\r\n/**\r\n * @description\r\n * Defines the position of a layer: overlay or underlay.</br>\r\n * Even though Position is technically an action qualifier, it implements exactly the same functionality as an action.</br>\r\n * This is true because Position is compounded of multiple qualifiers</br>\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers|Applying overlays to images} | {@link https://cloudinary.com/documentation/video_layers|Applying overlays to videos}\r\n *\r\n * @extends {SDK.Actions}\r\n */\r\nclass PositionQualifier extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n    }\r\n    gravity(gravityQualifier) {\r\n        this.addQualifier(gravityQualifier);\r\n        this._actionModel.gravity = createGravityModel(gravityQualifier);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Tiles the overlay across your image.\r\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers#automatic_tiling|Tiling overlay}\r\n     */\r\n    tiled() {\r\n        this.addFlag(tiled());\r\n        this._actionModel.tiled = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * TODO - This should accept a boolean value\r\n     * @description Prevents an image or text overlay from extending a delivered image canvas beyond the dimensions of the base image\r\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\r\n     */\r\n    allowOverflow(bool = true) {\r\n        if (bool === false) {\r\n            this.addFlag(noOverflow());\r\n        }\r\n        this._actionModel.allowOverflow = bool;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Set the X Offset\r\n     * @param {number | string} offsetX\r\n     * @return {this}\r\n     */\r\n    offsetX(offsetX) {\r\n        this.addQualifier(new Qualifier('x', offsetX));\r\n        this._actionModel.offsetX = offsetX;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Set the Y Offset\r\n     * @param {number | string} offsetY\r\n     * @return {this}\r\n     */\r\n    offsetY(offsetY) {\r\n        this.addQualifier(new Qualifier('y', offsetY));\r\n        this._actionModel.offsetY = offsetY;\r\n        return this;\r\n    }\r\n}\r\nexport { PositionQualifier };\r\n", "/**\r\n * @description Contains functions to select the type of improvement to perform when using Adjust.improve().\r\n * @namespace Outline\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Effect|Effect Action} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Outline\r\n */\r\nfunction fill() {\r\n    return 'fill';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Outline\r\n */\r\nfunction inner() {\r\n    return 'inner';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Outline\r\n */\r\nfunction innerFill() {\r\n    return 'inner_fill';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Outline\r\n */\r\nfunction outer() {\r\n    return 'outer';\r\n}\r\nconst OutlineMode = {\r\n    outer,\r\n    inner,\r\n    innerFill,\r\n    fill\r\n};\r\nexport { OutlineMode, outer, inner, innerFill, fill };\r\n", "/**\r\n * @description Defines the available modes to use with the improve effect.\r\n * @namespace ImproveMode\r\n * @memberOf Qualifiers\r\n * @see To be used with an {@link Actions.Adjust.ImproveAction|Adjust Improve}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {outdoor} from \"@cloudinary/url-gen/qualifiers/improveMode\";\r\n * import {improve} from \"@cloudinary/url-gen/actions/adjust\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.adjust(improve().mode(outdoor()));\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ImproveMode\r\n * @description Use this mode to get better results on outdoor images.\r\n * @return string\r\n */\r\nfunction outdoor() {\r\n    return 'outdoor';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ImproveMode\r\n * @description Use this mode to get better results on images with indoor lighting and shadows.\r\n * @return string\r\n */\r\nfunction indoor() {\r\n    return 'indoor';\r\n}\r\nconst ImproveMode = {\r\n    indoor,\r\n    outdoor\r\n};\r\nexport { outdoor, indoor, ImproveMode };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Qualifiers.GradientDirection\r\n * @extends {SDK.QualifierValue}\r\n */\r\nclass GradientDirectionQualifierValue extends QualifierValue {\r\n}\r\nexport { GradientDirectionQualifierValue };\r\n", "import { GradientDirectionQualifierValue } from \"./gradientDirection/GradientDirectionQualifierValue.js\";\r\n/**\r\n * @description Defines the direction for a background gradient fade effect.\r\n * @memberOf Qualifiers\r\n * @namespace GradientDirection\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Blend the colors horizontally.\r\n * @memberOf Qualifiers.GradientDirection\r\n * @return {Qualifiers.GradientDirection.GradientDirectionQualifierValue}\r\n */\r\nfunction horizontal() {\r\n    return new GradientDirectionQualifierValue('horizontal');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Blend the colors vertically.\r\n * @memberOf Qualifiers.GradientDirection\r\n * @return {Qualifiers.GradientDirection.GradientDirectionQualifierValue}\r\n */\r\nfunction vertical() {\r\n    return new GradientDirectionQualifierValue('vertical');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Blend the colors diagonally from top-left to bottom-right.\r\n * @memberOf Qualifiers.GradientDirection\r\n * @return {Qualifiers.GradientDirection.GradientDirectionQualifierValue}\r\n */\r\nfunction diagonalDesc() {\r\n    return new GradientDirectionQualifierValue('diagonal_desc');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Blend the colors diagonally from bottom-left to top-right.\r\n * @memberOf Qualifiers.GradientDirection\r\n * @return {Qualifiers.GradientDirection.GradientDirectionQualifierValue}\r\n */\r\nfunction diagonalAsc() {\r\n    return new GradientDirectionQualifierValue('diagonal_asc');\r\n}\r\nconst GradientDirection = {\r\n    horizontal,\r\n    vertical,\r\n    diagonalDesc,\r\n    diagonalAsc\r\n};\r\nexport { horizontal, vertical, diagonalDesc, diagonalAsc, GradientDirection };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Qualifiers.Format\r\n * @extends {SDK.QualifierValue}\r\n */\r\nclass FormatQualifier extends QualifierValue {\r\n    constructor(val) {\r\n        super(val);\r\n        this.val = val;\r\n    }\r\n    getValue() {\r\n        return this.val;\r\n    }\r\n}\r\nexport { FormatQualifier };\r\n", "import { FormatQualifier } from \"./format/FormatQualifier.js\";\r\n/**\r\n * @description Contains functions to select the asset format, can be used to convert images and videos to other formats.\r\n * @memberOf Qualifiers\r\n * @namespace Format\r\n * @see Visit {@link Actions.Delivery.format|Delivery Format} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Image format heic.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction heic() { return new FormatQualifier('heic'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format flif.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction flif() { return new FormatQualifier('flif'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format ai.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction ai() { return new FormatQualifier('ai'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format wdp.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction wdp() { return new FormatQualifier('wdp'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format svg.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction svg() { return new FormatQualifier('svg'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format webp.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction webp() { return new FormatQualifier('webp'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format psd.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction psd() { return new FormatQualifier('psd'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format jp2.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction jp2() { return new FormatQualifier('jp2'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format jpc.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction jpc() { return new FormatQualifier('jpc'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format eps.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction eps() { return new FormatQualifier('eps'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format tiff.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction tiff() { return new FormatQualifier('tiff'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format pdf.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction pdf() { return new FormatQualifier('pdf'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format ico.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction ico() { return new FormatQualifier('ico'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format bmp.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction bmp() { return new FormatQualifier('bmp'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format png.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction png() { return new FormatQualifier('png'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format gif.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction gif() { return new FormatQualifier('gif'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format auto.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction auto() { return new FormatQualifier('auto'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format jpg.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction jpg() { return new FormatQualifier('jpg'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format djvu.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction djvu() { return new FormatQualifier('djvu'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format ps.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction ps() { return new FormatQualifier('ps'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format ept.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction ept() { return new FormatQualifier('ept'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format eps3.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction eps3() { return new FormatQualifier('eps3'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format fxb.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction fxb() { return new FormatQualifier('fxb'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format gltf.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction gltf() { return new FormatQualifier('gltf'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format heif.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction heif() { return new FormatQualifier('heif'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format indd.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction indd() { return new FormatQualifier('indd'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format jpe.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction jpe() { return new FormatQualifier('jpe'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format jpeg.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction jpeg() { return new FormatQualifier('jpeg'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format jxr.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction jxr() { return new FormatQualifier('jxr'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format hdp.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction hdp() { return new FormatQualifier('hdp'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format spd.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction spd() { return new FormatQualifier('spd'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format arw.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction arw() { return new FormatQualifier('arw'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format cr2.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction cr2() { return new FormatQualifier('cr2'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format tga.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction tga() { return new FormatQualifier('tga'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format tif.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction tif() { return new FormatQualifier('tif'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format avif.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction avif() { return new FormatQualifier('avif'); }\r\n/**\r\n * @summary qualifier\r\n * @description format usdz.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction usdz() { return new FormatQualifier('usdz'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format 3g2.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction video3g2() { return new FormatQualifier('3g2'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format 3gp.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction video3gp() { return new FormatQualifier('3gp'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format avi.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoAvi() { return new FormatQualifier('avi'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format flv.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoFlv() { return new FormatQualifier('flv'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format m3u8.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoM3u8() { return new FormatQualifier('m3u8'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format ts.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoTs() { return new FormatQualifier('ts'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format mov.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoMov() { return new FormatQualifier('mov'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format mkv.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoMkv() { return new FormatQualifier('mkv'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format mp4.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoMp4() { return new FormatQualifier('mp4'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format mpeg.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoMpeg() { return new FormatQualifier('mpeg'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format mpd.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoMpd() { return new FormatQualifier('mpd'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format mxf.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoMxf() { return new FormatQualifier('mxf'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format ogv.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoOgv() { return new FormatQualifier('ogv'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format webm.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoWebm() { return new FormatQualifier('webm'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format wmv.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoWmv() { return new FormatQualifier('wmv'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format m2ts.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoM2ts() { return new FormatQualifier('m2ts'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format mts.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction videoMts() { return new FormatQualifier('mts'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format aac.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioAac() { return new FormatQualifier('aac'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format aiff.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioAiff() { return new FormatQualifier('aiff'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format amr.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioAmr() { return new FormatQualifier('amr'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format flac.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioFlac() { return new FormatQualifier('flac'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format m4a.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioM4a() { return new FormatQualifier('m4a'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format mp3.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioMp3() { return new FormatQualifier('mp3'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format ogg.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioOgg() { return new FormatQualifier('ogg'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format opus.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioOpus() { return new FormatQualifier('opus'); }\r\n/**\r\n * @summary qualifier\r\n * @description Audio format wav.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction audioWav() { return new FormatQualifier('wav'); }\r\n/**\r\n * @summary qualifier\r\n * @description Image format glb.\r\n * @memberOf Qualifiers.Format\r\n * @return {Qualifiers.Format.FormatQualifier}\r\n */\r\nfunction glb() { return new FormatQualifier('glb'); }\r\nconst Format = { usdz, jp2, ai, auto, bmp, eps, flif, gif, heic, ico, jpc, jpg, pdf, png, psd, svg, tiff, wdp, webp, arw, audioAac, audioAiff, audioAmr, audioFlac, audioM4a, audioMp3, audioOgg, audioOpus, audioWav, avif, cr2, djvu, eps3, ept, fxb, gltf, hdp, heif, indd, jpe, jpeg, jxr, ps, spd, tga, tif, video3g2, video3gp, videoAvi, videoFlv, videoM2ts, videoM3u8, videoMkv, videoMov, videoMp4, videoMpd, videoMpeg, videoMts, videoMxf, videoOgv, videoTs, videoWebm, videoWmv, glb };\r\nexport { usdz, jp2, ai, auto, bmp, eps, flif, gif, heic, ico, jpc, jpg, pdf, png, psd, svg, tiff, wdp, webp, arw, audioAac, audioAiff, audioAmr, audioFlac, audioM4a, audioMp3, audioOgg, audioOpus, audioWav, avif, cr2, djvu, eps3, ept, fxb, gltf, hdp, heif, indd, jpe, jpeg, jxr, ps, spd, tga, tif, video3g2, video3gp, videoAvi, videoFlv, videoM2ts, videoM3u8, videoMkv, videoMov, videoMp4, videoMpd, videoMpeg, videoMts, videoMxf, videoOgv, videoTs, videoWebm, videoWmv, glb, Format };\r\n", "/**\r\n * @description Contains functions to select the font weight.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\r\n * @memberOf Qualifiers\r\n * @namespace FontWeight\r\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontWeight\r\n */\r\nfunction thin() {\r\n    return 'thin';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontWeight\r\n */\r\nfunction light() {\r\n    return 'light';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontWeight\r\n */\r\nfunction normal() {\r\n    return 'normal';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontWeight\r\n */\r\nfunction bold() {\r\n    return 'bold';\r\n}\r\nconst FontWeight = { bold, light, normal, thin };\r\nexport { FontWeight, bold, light, normal, thin };\r\n", "/**\r\n * @description Contains functions to select the style of the text.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\r\n * @memberOf Qualifiers\r\n * @namespace FontStyle\r\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontStyle\r\n */\r\nfunction normal() {\r\n    return 'normal';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontStyle\r\n */\r\nfunction italic() {\r\n    return 'italic';\r\n}\r\nconst FontStyle = { normal, italic };\r\nexport { FontStyle, italic, normal };\r\n", "/**\r\n * @description Contains functions to select the font hinting setting.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\r\n * @memberOf Qualifiers\r\n * @namespace FontHinting\r\n * @see To be used with {@link Qualifiers.TextStyle|Text Style}\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontHinting\r\n */\r\nfunction none() {\r\n    return '';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontHinting\r\n */\r\nfunction slight() {\r\n    return 'slight';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontHinting\r\n */\r\nfunction medium() {\r\n    return 'medium';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.FontHinting\r\n */\r\nfunction full() {\r\n    return 'full';\r\n}\r\nconst FontHinting = { full, none, medium, slight };\r\nexport { FontHinting, full, none, medium, slight };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @namespace Expression\r\n * @memberOf Qualifiers.Expression\r\n * @extends {SDK.QualifierValue}\r\n */\r\nclass ExpressionQualifier extends QualifierValue {\r\n    constructor(value) {\r\n        super();\r\n        this.value = value;\r\n    }\r\n    toString() {\r\n        return this.value;\r\n    }\r\n}\r\nexport { ExpressionQualifier };\r\n", "import { CONDITIONAL_OPERATORS, RESERVED_NAMES } from \"../internal/internalConstants.js\";\r\nimport { ExpressionQualifier } from \"./expression/ExpressionQualifier.js\";\r\n/**\r\n * @description\r\n * Used for variable or conditional expressions\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/user_defined_variables#arithmetic_expressions|Arithmetic expressions }\r\n * @namespace Expression\r\n * @memberOf Qualifiers\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Expression\r\n * @return {Qualifiers.Expression.ExpressionQualifier}\r\n */\r\nfunction expression(exp) {\r\n    // Prepare the CONDITIONAL_OPERATORS object to be used in a regex\r\n    // Properly escape |, +, ^ and *\r\n    // This step also adds a regex space ( \\s ) around each operator, since these are only replaced when wrapped with spaces\r\n    // $foo * $bar is replaced to $foo_mul_$bar\r\n    // $foo*bar is treated AS-IS.\r\n    const reservedOperatorList = Object.keys(CONDITIONAL_OPERATORS).map((key) => {\r\n        return `\\\\s${key.replace(/(\\*|\\+|\\^|\\|)/g, '\\\\$1')}\\\\s`;\r\n    });\r\n    // reservedOperatorList is now an array of values, joining with | creates the regex list\r\n    const regexSafeOperatorList = reservedOperatorList.join('|');\r\n    const operatorsReplaceRE = new RegExp(`(${regexSafeOperatorList})`, \"g\");\r\n    // First, we replace all the operators\r\n    // Notice how we pad the matched operators with `_`, this is following the step above.\r\n    // This turns $foo * $bar into $foo_mul_$bar (notice how the spaces were replaced with an underscore\r\n    const stringWithOperators = exp.toString()\r\n        .replace(operatorsReplaceRE, (match) => {\r\n        // match contains spaces around the expression, we need to trim it as the original list\r\n        // does not contain spaces.\r\n        return `_${CONDITIONAL_OPERATORS[match.trim()]}_`;\r\n    });\r\n    // Handle reserved names (width, height, etc.)\r\n    const ReservedNames = Object.keys(RESERVED_NAMES);\r\n    const regexSafeReservedNameList = ReservedNames.join('|');\r\n    // Gather all statements that begin with a dollar sign, underscore or a space\r\n    // Gather all RESERVED NAMES\r\n    // $foo_bar is matched\r\n    // height is matched\r\n    const reservedNamesRE = new RegExp(`(\\\\$_*[^_ ]+)|${regexSafeReservedNameList}`, \"g\");\r\n    // Since this regex captures both user variables and our reserved keywords, we need to add some logic in the replacer\r\n    const stringWithVariables = stringWithOperators.replace(reservedNamesRE, (match) => {\r\n        // Do not do anything to user variables (anything starting with $)\r\n        if (match.startsWith('$')) {\r\n            return match;\r\n        }\r\n        else {\r\n            return RESERVED_NAMES[match] || match;\r\n        }\r\n    });\r\n    // Serialize remaining spaces with an underscore\r\n    const finalExpressionString = stringWithVariables.replace(/\\s/g, '_');\r\n    return new ExpressionQualifier(finalExpressionString);\r\n}\r\n// as a namespace\r\nconst Expression = {\r\n    expression\r\n};\r\nexport { Expression, expression };\r\n", "/**\r\n * @description Qualifiers for applying an ordered dither filter to the image.\r\n * @namespace Dither\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Effect.dither|Dither Effect} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction threshold1x1Nondither() {\r\n    return 0;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction checkerboard2x1Dither() {\r\n    return 1;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction ordered2x2Dispersed() {\r\n    return 2;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction ordered3x3Dispersed() {\r\n    return 3;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction ordered4x4Dispersed() {\r\n    return 4;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction ordered8x8Dispersed() {\r\n    return 5;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction halftone4x4Angled() {\r\n    return 6;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction halftone6x6Angled() {\r\n    return 7;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction halftone8x8Angled() {\r\n    return 8;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction halftone4x4Orthogonal() {\r\n    return 9;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction halftone6x6Orthogonal() {\r\n    return 10;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction halftone8x8Orthogonal() {\r\n    return 11;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction halftone16x16Orthogonal() {\r\n    return 12;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction circles5x5Black() {\r\n    return 13;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction circles5x5White() {\r\n    return 14;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction circles6x6Black() {\r\n    return 15;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction circles6x6White() {\r\n    return 16;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction circles7x7Black() {\r\n    return 17;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Dither\r\n */\r\nfunction circles7x7White() {\r\n    return 18;\r\n}\r\nconst Dither = {\r\n    checkerboard2x1Dither,\r\n    circles5x5Black,\r\n    circles5x5White,\r\n    circles6x6Black,\r\n    circles6x6White,\r\n    circles7x7Black,\r\n    circles7x7White,\r\n    halftone4x4Angled,\r\n    halftone4x4Orthogonal,\r\n    halftone6x6Angled,\r\n    halftone6x6Orthogonal,\r\n    halftone8x8Angled,\r\n    halftone8x8Orthogonal,\r\n    halftone16x16Orthogonal,\r\n    ordered2x2Dispersed,\r\n    ordered3x3Dispersed,\r\n    ordered4x4Dispersed,\r\n    ordered8x8Dispersed,\r\n    threshold1x1Nondither\r\n};\r\nexport { Dither, checkerboard2x1Dither, circles5x5Black, circles5x5White, circles6x6Black, circles6x6White, circles7x7Black, circles7x7White, halftone4x4Angled, halftone4x4Orthogonal, halftone6x6Angled, halftone6x6Orthogonal, halftone8x8Angled, halftone8x8Orthogonal, halftone16x16Orthogonal, ordered2x2Dispersed, ordered3x3Dispersed, ordered4x4Dispersed, ordered8x8Dispersed, threshold1x1Nondither };\r\n", "/**\r\n * @description Contains functions to select the color space mode.\r\n * @namespace ColorSpace\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Delivery.colorSpace|Delivery Color Space} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction srgb() {\r\n    return 'srgb';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction trueColor() {\r\n    return 'srgb:truecolor';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction tinySrgb() {\r\n    return 'tinysrgb';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction cmyk() {\r\n    return 'cmyk';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction noCmyk() {\r\n    return 'no_cmyk';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction keepCmyk() {\r\n    return 'keep_cmyk';\r\n}\r\nconst ColorSpace = {\r\n    cmyk,\r\n    keepCmyk,\r\n    noCmyk,\r\n    srgb,\r\n    tinySrgb,\r\n    trueColor\r\n};\r\nexport { ColorSpace, cmyk, keepCmyk, noCmyk, srgb, tinySrgb, trueColor };\r\n", "/**\r\n * @memberOf Qualifiers\r\n * @description This namespace contains all the colors used in the SDK\r\n * @namespace Color\r\n * @example\r\n * // Reference only, do NOT use within your code for tree-shaking reasons\r\n * // SDK functions that require color accept a string (like 'red') or a hex value, like 'ffffff'\r\n * import {Color} from '@cloudinary/url-gen/qualifiers/color'\r\n * console.log(Color.RED);\r\n */\r\nconst Color = {\r\n    SNOW: 'snow',\r\n    SNOW1: 'snow1',\r\n    SNOW2: 'snow2',\r\n    ROSYBROWN1: 'rosybrown1',\r\n    ROSYBROWN2: 'rosybrown2',\r\n    SNOW3: 'snow3',\r\n    LIGHTCORAL: 'lightcoral',\r\n    INDIANRED1: 'indianred1',\r\n    ROSYBROWN3: 'rosybrown3',\r\n    INDIANRED2: 'indianred2',\r\n    ROSYBROWN: 'rosybrown',\r\n    BROWN1: 'brown1',\r\n    FIREBRICK1: 'firebrick1',\r\n    BROWN2: 'brown2',\r\n    INDIANRED: 'indianred',\r\n    INDIANRED3: 'indianred3',\r\n    FIREBRICK2: 'firebrick2',\r\n    SNOW4: 'snow4',\r\n    BROWN3: 'brown3',\r\n    RED: 'red',\r\n    RED1: 'red1',\r\n    ROSYBROWN4: 'rosybrown4',\r\n    FIREBRICK3: 'firebrick3',\r\n    RED2: 'red2',\r\n    FIREBRICK: 'firebrick',\r\n    BROWN: 'brown',\r\n    RED3: 'red3',\r\n    INDIANRED4: 'indianred4',\r\n    BROWN4: 'brown4',\r\n    FIREBRICK4: 'firebrick4',\r\n    DARKRED: 'darkred',\r\n    RED4: 'red4',\r\n    LIGHTPINK1: 'lightpink1',\r\n    LIGHTPINK3: 'lightpink3',\r\n    LIGHTPINK4: 'lightpink4',\r\n    LIGHTPINK2: 'lightpink2',\r\n    LIGHTPINK: 'lightpink',\r\n    PINK: 'pink',\r\n    CRIMSON: 'crimson',\r\n    PINK1: 'pink1',\r\n    PINK2: 'pink2',\r\n    PINK3: 'pink3',\r\n    PINK4: 'pink4',\r\n    PALEVIOLETRED4: 'palevioletred4',\r\n    PALEVIOLETRED: 'palevioletred',\r\n    PALEVIOLETRED2: 'palevioletred2',\r\n    PALEVIOLETRED1: 'palevioletred1',\r\n    PALEVIOLETRED3: 'palevioletred3',\r\n    LAVENDERBLUSH: 'lavenderblush',\r\n    LAVENDERBLUSH1: 'lavenderblush1',\r\n    LAVENDERBLUSH3: 'lavenderblush3',\r\n    LAVENDERBLUSH2: 'lavenderblush2',\r\n    LAVENDERBLUSH4: 'lavenderblush4',\r\n    MAROON: 'maroon',\r\n    HOTPINK3: 'hotpink3',\r\n    VIOLETRED3: 'violetred3',\r\n    VIOLETRED1: 'violetred1',\r\n    VIOLETRED2: 'violetred2',\r\n    VIOLETRED4: 'violetred4',\r\n    HOTPINK2: 'hotpink2',\r\n    HOTPINK1: 'hotpink1',\r\n    HOTPINK4: 'hotpink4',\r\n    HOTPINK: 'hotpink',\r\n    DEEPPINK: 'deeppink',\r\n    DEEPPINK1: 'deeppink1',\r\n    DEEPPINK2: 'deeppink2',\r\n    DEEPPINK3: 'deeppink3',\r\n    DEEPPINK4: 'deeppink4',\r\n    MAROON1: 'maroon1',\r\n    MAROON2: 'maroon2',\r\n    MAROON3: 'maroon3',\r\n    MAROON4: 'maroon4',\r\n    MEDIUMVIOLETRED: 'mediumvioletred',\r\n    VIOLETRED: 'violetred',\r\n    ORCHID2: 'orchid2',\r\n    ORCHID: 'orchid',\r\n    ORCHID1: 'orchid1',\r\n    ORCHID3: 'orchid3',\r\n    ORCHID4: 'orchid4',\r\n    THISTLE1: 'thistle1',\r\n    THISTLE2: 'thistle2',\r\n    PLUM1: 'plum1',\r\n    PLUM2: 'plum2',\r\n    THISTLE: 'thistle',\r\n    THISTLE3: 'thistle3',\r\n    PLUM: 'plum',\r\n    VIOLET: 'violet',\r\n    PLUM3: 'plum3',\r\n    THISTLE4: 'thistle4',\r\n    FUCHSIA: 'fuchsia',\r\n    MAGENTA: 'magenta',\r\n    MAGENTA1: 'magenta1',\r\n    PLUM4: 'plum4',\r\n    MAGENTA2: 'magenta2',\r\n    MAGENTA3: 'magenta3',\r\n    DARKMAGENTA: 'darkmagenta',\r\n    MAGENTA4: 'magenta4',\r\n    PURPLE: 'purple',\r\n    MEDIUMORCHID: 'mediumorchid',\r\n    MEDIUMORCHID1: 'mediumorchid1',\r\n    MEDIUMORCHID2: 'mediumorchid2',\r\n    MEDIUMORCHID3: 'mediumorchid3',\r\n    MEDIUMORCHID4: 'mediumorchid4',\r\n    DARKVIOLET: 'darkviolet',\r\n    DARKORCHID: 'darkorchid',\r\n    DARKORCHID1: 'darkorchid1',\r\n    DARKORCHID3: 'darkorchid3',\r\n    DARKORCHID2: 'darkorchid2',\r\n    DARKORCHID4: 'darkorchid4',\r\n    INDIGO: 'indigo',\r\n    BLUEVIOLET: 'blueviolet',\r\n    PURPLE2: 'purple2',\r\n    PURPLE3: 'purple3',\r\n    PURPLE4: 'purple4',\r\n    PURPLE1: 'purple1',\r\n    MEDIUMPURPLE: 'mediumpurple',\r\n    MEDIUMPURPLE1: 'mediumpurple1',\r\n    MEDIUMPURPLE2: 'mediumpurple2',\r\n    MEDIUMPURPLE3: 'mediumpurple3',\r\n    MEDIUMPURPLE4: 'mediumpurple4',\r\n    DARKSLATEBLUE: 'darkslateblue',\r\n    LIGHTSLATEBLUE: 'lightslateblue',\r\n    MEDIUMSLATEBLUE: 'mediumslateblue',\r\n    SLATEBLUE: 'slateblue',\r\n    SLATEBLUE1: 'slateblue1',\r\n    SLATEBLUE2: 'slateblue2',\r\n    SLATEBLUE3: 'slateblue3',\r\n    SLATEBLUE4: 'slateblue4',\r\n    GHOSTWHITE: 'ghostwhite',\r\n    LAVENDER: 'lavender',\r\n    BLUE: 'blue',\r\n    BLUE1: 'blue1',\r\n    BLUE2: 'blue2',\r\n    BLUE3: 'blue3',\r\n    MEDIUMBLUE: 'mediumblue',\r\n    BLUE4: 'blue4',\r\n    DARKBLUE: 'darkblue',\r\n    MIDNIGHTBLUE: 'midnightblue',\r\n    NAVY: 'navy',\r\n    NAVYBLUE: 'navyblue',\r\n    ROYALBLUE: 'royalblue',\r\n    ROYALBLUE1: 'royalblue1',\r\n    ROYALBLUE2: 'royalblue2',\r\n    ROYALBLUE3: 'royalblue3',\r\n    ROYALBLUE4: 'royalblue4',\r\n    CORNFLOWERBLUE: 'cornflowerblue',\r\n    LIGHTSTEELBLUE: 'lightsteelblue',\r\n    LIGHTSTEELBLUE1: 'lightsteelblue1',\r\n    LIGHTSTEELBLUE2: 'lightsteelblue2',\r\n    LIGHTSTEELBLUE3: 'lightsteelblue3',\r\n    LIGHTSTEELBLUE4: 'lightsteelblue4',\r\n    SLATEGRAY4: 'slategray4',\r\n    SLATEGRAY1: 'slategray1',\r\n    SLATEGRAY2: 'slategray2',\r\n    SLATEGRAY3: 'slategray3',\r\n    LIGHTSLATEGRAY: 'lightslategray',\r\n    LIGHTSLATEGREY: 'lightslategrey',\r\n    SLATEGRAY: 'slategray',\r\n    SLATEGREY: 'slategrey',\r\n    DODGERBLUE: 'dodgerblue',\r\n    DODGERBLUE1: 'dodgerblue1',\r\n    DODGERBLUE2: 'dodgerblue2',\r\n    DODGERBLUE4: 'dodgerblue4',\r\n    DODGERBLUE3: 'dodgerblue3',\r\n    ALICEBLUE: 'aliceblue',\r\n    STEELBLUE4: 'steelblue4',\r\n    STEELBLUE: 'steelblue',\r\n    STEELBLUE1: 'steelblue1',\r\n    STEELBLUE2: 'steelblue2',\r\n    STEELBLUE3: 'steelblue3',\r\n    SKYBLUE4: 'skyblue4',\r\n    SKYBLUE1: 'skyblue1',\r\n    SKYBLUE2: 'skyblue2',\r\n    SKYBLUE3: 'skyblue3',\r\n    LIGHTSKYBLUE: 'lightskyblue',\r\n    LIGHTSKYBLUE4: 'lightskyblue4',\r\n    LIGHTSKYBLUE1: 'lightskyblue1',\r\n    LIGHTSKYBLUE2: 'lightskyblue2',\r\n    LIGHTSKYBLUE3: 'lightskyblue3',\r\n    SKYBLUE: 'skyblue',\r\n    LIGHTBLUE3: 'lightblue3',\r\n    DEEPSKYBLUE: 'deepskyblue',\r\n    DEEPSKYBLUE1: 'deepskyblue1',\r\n    DEEPSKYBLUE2: 'deepskyblue2',\r\n    DEEPSKYBLUE4: 'deepskyblue4',\r\n    DEEPSKYBLUE3: 'deepskyblue3',\r\n    LIGHTBLUE1: 'lightblue1',\r\n    LIGHTBLUE2: 'lightblue2',\r\n    LIGHTBLUE: 'lightblue',\r\n    LIGHTBLUE4: 'lightblue4',\r\n    POWDERBLUE: 'powderblue',\r\n    CADETBLUE1: 'cadetblue1',\r\n    CADETBLUE2: 'cadetblue2',\r\n    CADETBLUE3: 'cadetblue3',\r\n    CADETBLUE4: 'cadetblue4',\r\n    TURQUOISE1: 'turquoise1',\r\n    TURQUOISE2: 'turquoise2',\r\n    TURQUOISE3: 'turquoise3',\r\n    TURQUOISE4: 'turquoise4',\r\n    CADETBLUE: 'cadetblue',\r\n    DARKTURQUOISE: 'darkturquoise',\r\n    AZURE: 'azure',\r\n    AZURE1: 'azure1',\r\n    LIGHTCYAN1: 'lightcyan1',\r\n    LIGHTCYAN: 'lightcyan',\r\n    AZURE2: 'azure2',\r\n    LIGHTCYAN2: 'lightcyan2',\r\n    PALETURQUOISE1: 'paleturquoise1',\r\n    PALETURQUOISE: 'paleturquoise',\r\n    PALETURQUOISE2: 'paleturquoise2',\r\n    DARKSLATEGRAY1: 'darkslategray1',\r\n    AZURE3: 'azure3',\r\n    LIGHTCYAN3: 'lightcyan3',\r\n    DARKSLATEGRAY2: 'darkslategray2',\r\n    PALETURQUOISE3: 'paleturquoise3',\r\n    DARKSLATEGRAY3: 'darkslategray3',\r\n    AZURE4: 'azure4',\r\n    LIGHTCYAN4: 'lightcyan4',\r\n    AQUA: 'aqua',\r\n    CYAN: 'cyan',\r\n    CYAN1: 'cyan1',\r\n    PALETURQUOISE4: 'paleturquoise4',\r\n    CYAN2: 'cyan2',\r\n    DARKSLATEGRAY4: 'darkslategray4',\r\n    CYAN3: 'cyan3',\r\n    CYAN4: 'cyan4',\r\n    DARKCYAN: 'darkcyan',\r\n    TEAL: 'teal',\r\n    DARKSLATEGRAY: 'darkslategray',\r\n    DARKSLATEGREY: 'darkslategrey',\r\n    MEDIUMTURQUOISE: 'mediumturquoise',\r\n    LIGHTSEAGREEN: 'lightseagreen',\r\n    TURQUOISE: 'turquoise',\r\n    AQUAMARINE4: 'aquamarine4',\r\n    AQUAMARINE: 'aquamarine',\r\n    AQUAMARINE1: 'aquamarine1',\r\n    AQUAMARINE2: 'aquamarine2',\r\n    AQUAMARINE3: 'aquamarine3',\r\n    MEDIUMAQUAMARINE: 'mediumaquamarine',\r\n    MEDIUMSPRINGGREEN: 'mediumspringgreen',\r\n    MINTCREAM: 'mintcream',\r\n    SPRINGGREEN: 'springgreen',\r\n    SPRINGGREEN1: 'springgreen1',\r\n    SPRINGGREEN2: 'springgreen2',\r\n    SPRINGGREEN3: 'springgreen3',\r\n    SPRINGGREEN4: 'springgreen4',\r\n    MEDIUMSEAGREEN: 'mediumseagreen',\r\n    SEAGREEN: 'seagreen',\r\n    SEAGREEN3: 'seagreen3',\r\n    SEAGREEN1: 'seagreen1',\r\n    SEAGREEN4: 'seagreen4',\r\n    SEAGREEN2: 'seagreen2',\r\n    MEDIUMFORESTGREEN: 'mediumforestgreen',\r\n    HONEYDEW: 'honeydew',\r\n    HONEYDEW1: 'honeydew1',\r\n    HONEYDEW2: 'honeydew2',\r\n    DARKSEAGREEN1: 'darkseagreen1',\r\n    DARKSEAGREEN2: 'darkseagreen2',\r\n    PALEGREEN1: 'palegreen1',\r\n    PALEGREEN: 'palegreen',\r\n    HONEYDEW3: 'honeydew3',\r\n    LIGHTGREEN: 'lightgreen',\r\n    PALEGREEN2: 'palegreen2',\r\n    DARKSEAGREEN3: 'darkseagreen3',\r\n    DARKSEAGREEN: 'darkseagreen',\r\n    PALEGREEN3: 'palegreen3',\r\n    HONEYDEW4: 'honeydew4',\r\n    GREEN1: 'green1',\r\n    LIME: 'lime',\r\n    LIMEGREEN: 'limegreen',\r\n    DARKSEAGREEN4: 'darkseagreen4',\r\n    GREEN2: 'green2',\r\n    PALEGREEN4: 'palegreen4',\r\n    GREEN3: 'green3',\r\n    FORESTGREEN: 'forestgreen',\r\n    GREEN4: 'green4',\r\n    GREEN: 'green',\r\n    DARKGREEN: 'darkgreen',\r\n    LAWNGREEN: 'lawngreen',\r\n    CHARTREUSE: 'chartreuse',\r\n    CHARTREUSE1: 'chartreuse1',\r\n    CHARTREUSE2: 'chartreuse2',\r\n    CHARTREUSE3: 'chartreuse3',\r\n    CHARTREUSE4: 'chartreuse4',\r\n    GREENYELLOW: 'greenyellow',\r\n    DARKOLIVEGREEN3: 'darkolivegreen3',\r\n    DARKOLIVEGREEN1: 'darkolivegreen1',\r\n    DARKOLIVEGREEN2: 'darkolivegreen2',\r\n    DARKOLIVEGREEN4: 'darkolivegreen4',\r\n    DARKOLIVEGREEN: 'darkolivegreen',\r\n    OLIVEDRAB: 'olivedrab',\r\n    OLIVEDRAB1: 'olivedrab1',\r\n    OLIVEDRAB2: 'olivedrab2',\r\n    OLIVEDRAB3: 'olivedrab3',\r\n    YELLOWGREEN: 'yellowgreen',\r\n    OLIVEDRAB4: 'olivedrab4',\r\n    IVORY: 'ivory',\r\n    IVORY1: 'ivory1',\r\n    LIGHTYELLOW: 'lightyellow',\r\n    LIGHTYELLOW1: 'lightyellow1',\r\n    BEIGE: 'beige',\r\n    IVORY2: 'ivory2',\r\n    LIGHTGOLDENRODYELLOW: 'lightgoldenrodyellow',\r\n    LIGHTYELLOW2: 'lightyellow2',\r\n    IVORY3: 'ivory3',\r\n    LIGHTYELLOW3: 'lightyellow3',\r\n    IVORY4: 'ivory4',\r\n    LIGHTYELLOW4: 'lightyellow4',\r\n    YELLOW: 'yellow',\r\n    YELLOW1: 'yellow1',\r\n    YELLOW2: 'yellow2',\r\n    YELLOW3: 'yellow3',\r\n    YELLOW4: 'yellow4',\r\n    OLIVE: 'olive',\r\n    DARKKHAKI: 'darkkhaki',\r\n    KHAKI2: 'khaki2',\r\n    LEMONCHIFFON4: 'lemonchiffon4',\r\n    KHAKI1: 'khaki1',\r\n    KHAKI3: 'khaki3',\r\n    KHAKI4: 'khaki4',\r\n    PALEGOLDENROD: 'palegoldenrod',\r\n    LEMONCHIFFON: 'lemonchiffon',\r\n    LEMONCHIFFON1: 'lemonchiffon1',\r\n    KHAKI: 'khaki',\r\n    LEMONCHIFFON3: 'lemonchiffon3',\r\n    LEMONCHIFFON2: 'lemonchiffon2',\r\n    MEDIUMGOLDENROD: 'mediumgoldenrod',\r\n    CORNSILK4: 'cornsilk4',\r\n    GOLD: 'gold',\r\n    GOLD1: 'gold1',\r\n    GOLD2: 'gold2',\r\n    GOLD3: 'gold3',\r\n    GOLD4: 'gold4',\r\n    LIGHTGOLDENROD: 'lightgoldenrod',\r\n    LIGHTGOLDENROD4: 'lightgoldenrod4',\r\n    LIGHTGOLDENROD1: 'lightgoldenrod1',\r\n    LIGHTGOLDENROD3: 'lightgoldenrod3',\r\n    LIGHTGOLDENROD2: 'lightgoldenrod2',\r\n    CORNSILK3: 'cornsilk3',\r\n    CORNSILK2: 'cornsilk2',\r\n    CORNSILK: 'cornsilk',\r\n    CORNSILK1: 'cornsilk1',\r\n    GOLDENROD: 'goldenrod',\r\n    GOLDENROD1: 'goldenrod1',\r\n    GOLDENROD2: 'goldenrod2',\r\n    GOLDENROD3: 'goldenrod3',\r\n    GOLDENROD4: 'goldenrod4',\r\n    DARKGOLDENROD: 'darkgoldenrod',\r\n    DARKGOLDENROD1: 'darkgoldenrod1',\r\n    DARKGOLDENROD2: 'darkgoldenrod2',\r\n    DARKGOLDENROD3: 'darkgoldenrod3',\r\n    DARKGOLDENROD4: 'darkgoldenrod4',\r\n    FLORALWHITE: 'floralwhite',\r\n    WHEAT2: 'wheat2',\r\n    OLDLACE: 'oldlace',\r\n    WHEAT: 'wheat',\r\n    WHEAT1: 'wheat1',\r\n    WHEAT3: 'wheat3',\r\n    ORANGE: 'orange',\r\n    ORANGE1: 'orange1',\r\n    ORANGE2: 'orange2',\r\n    ORANGE3: 'orange3',\r\n    ORANGE4: 'orange4',\r\n    WHEAT4: 'wheat4',\r\n    MOCCASIN: 'moccasin',\r\n    PAPAYAWHIP: 'papayawhip',\r\n    NAVAJOWHITE3: 'navajowhite3',\r\n    BLANCHEDALMOND: 'blanchedalmond',\r\n    NAVAJOWHITE: 'navajowhite',\r\n    NAVAJOWHITE1: 'navajowhite1',\r\n    NAVAJOWHITE2: 'navajowhite2',\r\n    NAVAJOWHITE4: 'navajowhite4',\r\n    ANTIQUEWHITE4: 'antiquewhite4',\r\n    ANTIQUEWHITE: 'antiquewhite',\r\n    TAN: 'tan',\r\n    BISQUE4: 'bisque4',\r\n    BURLYWOOD: 'burlywood',\r\n    ANTIQUEWHITE2: 'antiquewhite2',\r\n    BURLYWOOD1: 'burlywood1',\r\n    BURLYWOOD3: 'burlywood3',\r\n    BURLYWOOD2: 'burlywood2',\r\n    ANTIQUEWHITE1: 'antiquewhite1',\r\n    BURLYWOOD4: 'burlywood4',\r\n    ANTIQUEWHITE3: 'antiquewhite3',\r\n    DARKORANGE: 'darkorange',\r\n    BISQUE2: 'bisque2',\r\n    BISQUE: 'bisque',\r\n    BISQUE1: 'bisque1',\r\n    BISQUE3: 'bisque3',\r\n    DARKORANGE1: 'darkorange1',\r\n    LINEN: 'linen',\r\n    DARKORANGE2: 'darkorange2',\r\n    DARKORANGE3: 'darkorange3',\r\n    DARKORANGE4: 'darkorange4',\r\n    PERU: 'peru',\r\n    TAN1: 'tan1',\r\n    TAN2: 'tan2',\r\n    TAN3: 'tan3',\r\n    TAN4: 'tan4',\r\n    PEACHPUFF: 'peachpuff',\r\n    PEACHPUFF1: 'peachpuff1',\r\n    PEACHPUFF4: 'peachpuff4',\r\n    PEACHPUFF2: 'peachpuff2',\r\n    PEACHPUFF3: 'peachpuff3',\r\n    SANDYBROWN: 'sandybrown',\r\n    SEASHELL4: 'seashell4',\r\n    SEASHELL2: 'seashell2',\r\n    SEASHELL3: 'seashell3',\r\n    CHOCOLATE: 'chocolate',\r\n    CHOCOLATE1: 'chocolate1',\r\n    CHOCOLATE2: 'chocolate2',\r\n    CHOCOLATE3: 'chocolate3',\r\n    CHOCOLATE4: 'chocolate4',\r\n    SADDLEBROWN: 'saddlebrown',\r\n    SEASHELL: 'seashell',\r\n    SEASHELL1: 'seashell1',\r\n    SIENNA4: 'sienna4',\r\n    SIENNA: 'sienna',\r\n    SIENNA1: 'sienna1',\r\n    SIENNA2: 'sienna2',\r\n    SIENNA3: 'sienna3',\r\n    LIGHTSALMON3: 'lightsalmon3',\r\n    LIGHTSALMON: 'lightsalmon',\r\n    LIGHTSALMON1: 'lightsalmon1',\r\n    LIGHTSALMON4: 'lightsalmon4',\r\n    LIGHTSALMON2: 'lightsalmon2',\r\n    CORAL: 'coral',\r\n    ORANGERED: 'orangered',\r\n    ORANGERED1: 'orangered1',\r\n    ORANGERED2: 'orangered2',\r\n    ORANGERED3: 'orangered3',\r\n    ORANGERED4: 'orangered4',\r\n    DARKSALMON: 'darksalmon',\r\n    SALMON1: 'salmon1',\r\n    SALMON2: 'salmon2',\r\n    SALMON3: 'salmon3',\r\n    SALMON4: 'salmon4',\r\n    CORAL1: 'coral1',\r\n    CORAL2: 'coral2',\r\n    CORAL3: 'coral3',\r\n    CORAL4: 'coral4',\r\n    TOMATO4: 'tomato4',\r\n    TOMATO: 'tomato',\r\n    TOMATO1: 'tomato1',\r\n    TOMATO2: 'tomato2',\r\n    TOMATO3: 'tomato3',\r\n    MISTYROSE4: 'mistyrose4',\r\n    MISTYROSE2: 'mistyrose2',\r\n    MISTYROSE: 'mistyrose',\r\n    MISTYROSE1: 'mistyrose1',\r\n    SALMON: 'salmon',\r\n    MISTYROSE3: 'mistyrose3',\r\n    WHITE: 'white',\r\n    GRAY100: 'gray100',\r\n    GREY100: 'grey100',\r\n    GRAY99: 'gray99',\r\n    GREY99: 'grey99',\r\n    GRAY98: 'gray98',\r\n    GREY98: 'grey98',\r\n    GRAY97: 'gray97',\r\n    GREY97: 'grey97',\r\n    GRAY96: 'gray96',\r\n    GREY96: 'grey96',\r\n    WHITESMOKE: 'whitesmoke',\r\n    GRAY95: 'gray95',\r\n    GREY95: 'grey95',\r\n    GRAY94: 'gray94',\r\n    GREY94: 'grey94',\r\n    GRAY93: 'gray93',\r\n    GREY93: 'grey93',\r\n    GRAY92: 'gray92',\r\n    GREY92: 'grey92',\r\n    GRAY91: 'gray91',\r\n    GREY91: 'grey91',\r\n    GRAY90: 'gray90',\r\n    GREY90: 'grey90',\r\n    GRAY89: 'gray89',\r\n    GREY89: 'grey89',\r\n    GRAY88: 'gray88',\r\n    GREY88: 'grey88',\r\n    GRAY87: 'gray87',\r\n    GREY87: 'grey87',\r\n    GAINSBORO: 'gainsboro',\r\n    GRAY86: 'gray86',\r\n    GREY86: 'grey86',\r\n    GRAY85: 'gray85',\r\n    GREY85: 'grey85',\r\n    GRAY84: 'gray84',\r\n    GREY84: 'grey84',\r\n    GRAY83: 'gray83',\r\n    GREY83: 'grey83',\r\n    LIGHTGRAY: 'lightgray',\r\n    LIGHTGREY: 'lightgrey',\r\n    GRAY82: 'gray82',\r\n    GREY82: 'grey82',\r\n    GRAY81: 'gray81',\r\n    GREY81: 'grey81',\r\n    GRAY80: 'gray80',\r\n    GREY80: 'grey80',\r\n    GRAY79: 'gray79',\r\n    GREY79: 'grey79',\r\n    GRAY78: 'gray78',\r\n    GREY78: 'grey78',\r\n    GRAY77: 'gray77',\r\n    GREY77: 'grey77',\r\n    GRAY76: 'gray76',\r\n    GREY76: 'grey76',\r\n    SILVER: 'silver',\r\n    GRAY75: 'gray75',\r\n    GREY75: 'grey75',\r\n    GRAY74: 'gray74',\r\n    GREY74: 'grey74',\r\n    GRAY73: 'gray73',\r\n    GREY73: 'grey73',\r\n    GRAY72: 'gray72',\r\n    GREY72: 'grey72',\r\n    GRAY71: 'gray71',\r\n    GREY71: 'grey71',\r\n    GRAY70: 'gray70',\r\n    GREY70: 'grey70',\r\n    GRAY69: 'gray69',\r\n    GREY69: 'grey69',\r\n    GRAY68: 'gray68',\r\n    GREY68: 'grey68',\r\n    GRAY67: 'gray67',\r\n    GREY67: 'grey67',\r\n    DARKGRAY: 'darkgray',\r\n    DARKGREY: 'darkgrey',\r\n    GRAY66: 'gray66',\r\n    GREY66: 'grey66',\r\n    GRAY65: 'gray65',\r\n    GREY65: 'grey65',\r\n    GRAY64: 'gray64',\r\n    GREY64: 'grey64',\r\n    GRAY63: 'gray63',\r\n    GREY63: 'grey63',\r\n    GRAY62: 'gray62',\r\n    GREY62: 'grey62',\r\n    GRAY61: 'gray61',\r\n    GREY61: 'grey61',\r\n    GRAY60: 'gray60',\r\n    GREY60: 'grey60',\r\n    GRAY59: 'gray59',\r\n    GREY59: 'grey59',\r\n    GRAY58: 'gray58',\r\n    GREY58: 'grey58',\r\n    GRAY57: 'gray57',\r\n    GREY57: 'grey57',\r\n    GRAY56: 'gray56',\r\n    GREY56: 'grey56',\r\n    GRAY55: 'gray55',\r\n    GREY55: 'grey55',\r\n    GRAY54: 'gray54',\r\n    GREY54: 'grey54',\r\n    GRAY53: 'gray53',\r\n    GREY53: 'grey53',\r\n    GRAY52: 'gray52',\r\n    GREY52: 'grey52',\r\n    GRAY51: 'gray51',\r\n    GREY51: 'grey51',\r\n    FRACTAL: 'fractal',\r\n    GRAY50: 'gray50',\r\n    GREY50: 'grey50',\r\n    GRAY: 'gray',\r\n    GREY: 'grey',\r\n    GRAY49: 'gray49',\r\n    GREY49: 'grey49',\r\n    GRAY48: 'gray48',\r\n    GREY48: 'grey48',\r\n    GRAY47: 'gray47',\r\n    GREY47: 'grey47',\r\n    GRAY46: 'gray46',\r\n    GREY46: 'grey46',\r\n    GRAY45: 'gray45',\r\n    GREY45: 'grey45',\r\n    GRAY44: 'gray44',\r\n    GREY44: 'grey44',\r\n    GRAY43: 'gray43',\r\n    GREY43: 'grey43',\r\n    GRAY42: 'gray42',\r\n    GREY42: 'grey42',\r\n    DIMGRAY: 'dimgray',\r\n    DIMGREY: 'dimgrey',\r\n    GRAY41: 'gray41',\r\n    GREY41: 'grey41',\r\n    GRAY40: 'gray40',\r\n    GREY40: 'grey40',\r\n    GRAY39: 'gray39',\r\n    GREY39: 'grey39',\r\n    GRAY38: 'gray38',\r\n    GREY38: 'grey38',\r\n    GRAY37: 'gray37',\r\n    GREY37: 'grey37',\r\n    GRAY36: 'gray36',\r\n    GREY36: 'grey36',\r\n    GRAY35: 'gray35',\r\n    GREY35: 'grey35',\r\n    GRAY34: 'gray34',\r\n    GREY34: 'grey34',\r\n    GRAY33: 'gray33',\r\n    GREY33: 'grey33',\r\n    GRAY32: 'gray32',\r\n    GREY32: 'grey32',\r\n    GRAY31: 'gray31',\r\n    GREY31: 'grey31',\r\n    GRAY30: 'gray30',\r\n    GREY30: 'grey30',\r\n    GRAY29: 'gray29',\r\n    GREY29: 'grey29',\r\n    GRAY28: 'gray28',\r\n    GREY28: 'grey28',\r\n    GRAY27: 'gray27',\r\n    GREY27: 'grey27',\r\n    GRAY26: 'gray26',\r\n    GREY26: 'grey26',\r\n    GRAY25: 'gray25',\r\n    GREY25: 'grey25',\r\n    GRAY24: 'gray24',\r\n    GREY24: 'grey24',\r\n    GRAY23: 'gray23',\r\n    GREY23: 'grey23',\r\n    GRAY22: 'gray22',\r\n    GREY22: 'grey22',\r\n    GRAY21: 'gray21',\r\n    GREY21: 'grey21',\r\n    GRAY20: 'gray20',\r\n    GREY20: 'grey20',\r\n    GRAY19: 'gray19',\r\n    GREY19: 'grey19',\r\n    GRAY18: 'gray18',\r\n    GREY18: 'grey18',\r\n    GRAY17: 'gray17',\r\n    GREY17: 'grey17',\r\n    GRAY16: 'gray16',\r\n    GREY16: 'grey16',\r\n    GRAY15: 'gray15',\r\n    GREY15: 'grey15',\r\n    GRAY14: 'gray14',\r\n    GREY14: 'grey14',\r\n    GRAY13: 'gray13',\r\n    GREY13: 'grey13',\r\n    GRAY12: 'gray12',\r\n    GREY12: 'grey12',\r\n    GRAY11: 'gray11',\r\n    GREY11: 'grey11',\r\n    GRAY10: 'gray10',\r\n    GREY10: 'grey10',\r\n    GRAY9: 'gray9',\r\n    GREY9: 'grey9',\r\n    GRAY8: 'gray8',\r\n    GREY8: 'grey8',\r\n    GRAY7: 'gray7',\r\n    GREY7: 'grey7',\r\n    GRAY6: 'gray6',\r\n    GREY6: 'grey6',\r\n    GRAY5: 'gray5',\r\n    GREY5: 'grey5',\r\n    GRAY4: 'gray4',\r\n    GREY4: 'grey4',\r\n    GRAY3: 'gray3',\r\n    GREY3: 'grey3',\r\n    GRAY2: 'gray2',\r\n    GREY2: 'grey2',\r\n    GRAY1: 'gray1',\r\n    GREY1: 'grey1',\r\n    BLACK: 'black',\r\n    GRAY0: 'gray0',\r\n    GREY0: 'grey0',\r\n    OPAQUE: 'opaque',\r\n    NONE: 'none',\r\n    TRANSPARENT: 'transparent'\r\n};\r\nexport { Color };\r\n", "import { prepareColor } from \"../internal/utils/prepareColor.js\";\r\nimport { BackgroundAutoBorderQualifier } from \"./background/shared/auto/BackgroundAutoBorderQualifier.js\";\r\nimport { BackgroundBorderGradientQualifier } from \"./background/shared/gradient/BackgroundBorderGradientQualifier.js\";\r\nimport { BackgroundAutoPredominantQualifier } from \"./background/shared/auto/BackgroundAutoPredominantQualifier.js\";\r\nimport { BackgroundPredominantGradientQualifier } from \"./background/shared/gradient/BackgroundPredominantGradientQualifier.js\";\r\nimport BlurredBackgroundAction from \"./background/shared/BlurredBackgroundAction.js\";\r\nimport { BackgroundQualifier } from \"./background/shared/base/BackgroundQualifier.js\";\r\nimport { BackgroundGenerativeFillQualifier } from \"./background/shared/BackgroundGenerativeFillQualifier.js\";\r\n/**\r\n * @description Defines the background color to use instead of transparent background areas or when resizing with padding.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#setting_background_color|Setting background for images} | {@link https://cloudinary.com/documentation/video_effects_and_enhancements#background_color|Setting background for videos}\r\n *\r\n * @namespace Background\r\n * @memberOf Qualifiers\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Selects the predominant color while taking only the image border pixels into account.\r\n * @memberOf Qualifiers.Background\r\n * @return {BackgroundAutoBorderQualifier}\r\n */\r\nfunction border() {\r\n    return new BackgroundAutoBorderQualifier();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Automatically determines the color to use for padding, if needed when resizing an asset.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#content_aware_padding|Content-aware padding}\r\n * @memberOf Qualifiers.Background\r\n * @return {Qualifiers.Background.BackgroundQualifier}\r\n */\r\nfunction auto() {\r\n    return new BackgroundQualifier('auto');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Applies a padding gradient fade effect using the predominant colors in the border of the image.\r\n * @memberOf Qualifiers.Background\r\n * @return {BackgroundBorderGradientQualifier}\r\n */\r\nfunction borderGradient() {\r\n    return new BackgroundBorderGradientQualifier();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Applies a padding gradient fade effect using the predominant colors in the image.\r\n * @memberOf Qualifiers.Background\r\n * @return {BackgroundPredominantGradientQualifier}\r\n */\r\nfunction predominantGradient() {\r\n    return new BackgroundPredominantGradientQualifier();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Selects the predominant color while taking all pixels in the image into account\r\n * @memberOf Qualifiers.Background\r\n * @return {BackgroundAutoPredominantQualifier}\r\n */\r\nfunction predominant() {\r\n    return new BackgroundAutoPredominantQualifier();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Selects the predominant color while taking all pixels in the image into account.\r\n * @memberOf Qualifiers.Background\r\n * @return {Qualifiers.Background.BackgroundQualifier}\r\n */\r\nfunction color(colorStr) {\r\n    return new BackgroundQualifier(prepareColor(colorStr));\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Selects the predominant color while taking all pixels in the image into account.\r\n * @memberOf Qualifiers.Background\r\n * @return {BlurredBackgroundAction}\r\n */\r\nfunction blurred() {\r\n    return new BlurredBackgroundAction();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description A qualifier that automatically fills the padded area using generative AI to extend the image seamlessly.\r\n * @memberOf Qualifiers.Background\r\n * @return {BackgroundGenerativeFillQualifier}\r\n */\r\nfunction generativeFill() {\r\n    return new BackgroundGenerativeFillQualifier();\r\n}\r\nconst Background = {\r\n    auto,\r\n    border,\r\n    borderGradient,\r\n    predominantGradient,\r\n    predominant,\r\n    color,\r\n    blurred,\r\n    generativeFill\r\n};\r\nexport { auto, border, borderGradient, predominantGradient, predominant, color, blurred, generativeFill, Background };\r\n", "/**\r\n * @description Controls the audio sampling frequency.\r\n * @namespace AudioFrequency\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Preserves the original audio frequency of the video when used with vc_auto.\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction ORIGINAL() {\r\n    return 'iaf';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ192000() {\r\n    return 192000;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ176400() {\r\n    return 176400;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ96000() {\r\n    return 96000;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ88200() {\r\n    return 88200;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ48000() {\r\n    return 48000;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ8000() {\r\n    return 8000;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ11025() {\r\n    return 11025;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ16000() {\r\n    return 16000;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ22050() {\r\n    return 22050;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ32000() {\r\n    return 32000;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ37800() {\r\n    return 37800;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ44056() {\r\n    return 44056;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ44100() {\r\n    return 44100;\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioFrequency\r\n */\r\nfunction FREQ47250() {\r\n    return 47250;\r\n}\r\nconst AudioFrequency = {\r\n    FREQ8000,\r\n    FREQ11025,\r\n    FREQ16000,\r\n    FREQ22050,\r\n    FREQ32000,\r\n    FREQ37800,\r\n    FREQ44056,\r\n    FREQ44100,\r\n    FREQ47250,\r\n    FREQ48000,\r\n    FREQ88200,\r\n    FREQ96000,\r\n    FREQ176400,\r\n    FREQ192000,\r\n    ORIGINAL\r\n};\r\nexport { AudioFrequency, FREQ8000, FREQ11025, FREQ16000, FREQ22050, FREQ32000, FREQ37800, FREQ44056, FREQ44100, FREQ47250, FREQ48000, FREQ88200, FREQ96000, FREQ176400, FREQ192000, ORIGINAL };\r\n", "/**\r\n * @description Contains functions to select an audio codec.\r\n * @memberOf Qualifiers\r\n * @namespace AudioCodec\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Removes the audio channel from the video, effectively muting it.\r\n * @memberOf Qualifiers.AudioCodec\r\n */\r\nfunction none() {\r\n    return 'none';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioCodec\r\n */\r\nfunction aac() {\r\n    return 'aac';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioCodec\r\n */\r\nfunction vorbis() {\r\n    return 'vorbis';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioCodec\r\n */\r\nfunction mp3() {\r\n    return 'mp3';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AudioCodec\r\n */\r\nfunction opus() {\r\n    return 'opus';\r\n}\r\nconst AudioCodec = {\r\n    aac,\r\n    mp3,\r\n    opus,\r\n    none,\r\n    vorbis\r\n};\r\nexport { AudioCodec, aac, mp3, opus, none, vorbis };\r\n", "import { AspectRatioQualifierValue } from \"./aspectRatio/AspectRatioQualifierValue.js\";\r\nimport { ignoreInitialAspectRatio as ignoreInitialAspectRatioFlag } from \"./flag.js\";\r\n/**\r\n * @description 1 by 1 aspect ration.\r\n * @memberOf Qualifiers.AspectRatio\r\n * @return {string}\r\n */\r\nfunction ar1X1() {\r\n    return new AspectRatioQualifierValue('1:1');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description 5 by 4 aspect ration.\r\n * @memberOf Qualifiers.AspectRatio\r\n * @return {string}\r\n */\r\nfunction ar5X4() {\r\n    return new AspectRatioQualifierValue('5:4');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description 4 by 3 aspect ration.\r\n * @memberOf Qualifiers.AspectRatio\r\n * @return {string}\r\n */\r\nfunction ar4X3() {\r\n    return new AspectRatioQualifierValue('4:3');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description 3 by 2 aspect ration.\r\n * @memberOf Qualifiers.AspectRatio\r\n * @return {string}\r\n */\r\nfunction ar3X2() {\r\n    return new AspectRatioQualifierValue('3:2');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description 16 by 9 aspect ration.\r\n * @memberOf Qualifiers.AspectRatio\r\n * @return {string}\r\n */\r\nfunction ar16X9() {\r\n    return new AspectRatioQualifierValue('16:9');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description 3 by 1 aspect ration.\r\n * @memberOf Qualifiers.AspectRatio\r\n * @return {string}\r\n */\r\nfunction ar3X1() {\r\n    return new AspectRatioQualifierValue('3:1');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description ignores aspect ratio.\r\n * @memberOf Qualifiers.AspectRatio\r\n * @return {IgnoreAspectRatioQualifier}\r\n */\r\nfunction ignoreInitialAspectRatio() {\r\n    return ignoreInitialAspectRatioFlag();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description A list of all most commonly used aspect ratios. including an ‘ignore aspect ratio’ option which direct the BE to not stick to the original aspect ratio.\r\n * This is used in the context of resize actions\r\n * @namespace AspectRatio\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Resize|Resize} for an example\r\n */\r\nconst AspectRatio = {\r\n    ar1X1,\r\n    ar5X4,\r\n    ar3X1,\r\n    ar3X2,\r\n    ar4X3,\r\n    ar16X9,\r\n    ignoreInitialAspectRatio\r\n};\r\nexport { ar1X1, ar5X4, ar3X1, ar3X2, ar4X3, ar16X9, ignoreInitialAspectRatio, AspectRatio };\r\n", "/**\r\n * @description Contains methods to specify the type of artistic filter </br>\r\n * Learn more: {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#artistic_filter_effects|Artistic Filter}\r\n * @namespace ArtisticFilter\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction alDente() {\r\n    return 'al_dente';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction athena() {\r\n    return 'athena';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction audrey() {\r\n    return 'audrey';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction aurora() {\r\n    return 'aurora';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction daguerre() {\r\n    return 'daguerre';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction eucalyptus() {\r\n    return 'eucalyptus';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction fes() {\r\n    return 'fes';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction frost() {\r\n    return 'frost';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction hairspray() {\r\n    return 'hairspray';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction hokusai() {\r\n    return 'hokusai';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction incognito() {\r\n    return 'incognito';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction linen() {\r\n    return 'linen';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction peacock() {\r\n    return 'peacock';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction primavera() {\r\n    return 'primavera';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction quartz() {\r\n    return 'quartz';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction redRock() {\r\n    return 'red_rock';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction refresh() {\r\n    return 'refresh';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction sizzle() {\r\n    return 'sizzle';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction sonnet() {\r\n    return 'sonnet';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction ukulele() {\r\n    return 'ukulele';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ArtisticFilter\r\n */\r\nfunction zorro() {\r\n    return 'zorro';\r\n}\r\nconst ArtisticFilter = {\r\n    alDente,\r\n    athena,\r\n    audrey,\r\n    aurora,\r\n    daguerre,\r\n    eucalyptus,\r\n    hairspray,\r\n    hokusai,\r\n    peacock,\r\n    primavera,\r\n    quartz,\r\n    incognito,\r\n    redRock,\r\n    sizzle,\r\n    fes,\r\n    linen,\r\n    refresh,\r\n    sonnet,\r\n    ukulele,\r\n    frost,\r\n    zorro\r\n};\r\nexport { ArtisticFilter, alDente, athena, audrey, aurora, daguerre, eucalyptus, hairspray, hokusai, peacock, primavera, quartz, incognito, redRock, sizzle, fes, linen, refresh, sonnet, ukulele, frost, zorro };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Qualifiers.AnimatedFormat\r\n * @extends {SDK.QualifierValue}\r\n */\r\nclass AnimatedFormatQualifierValue extends QualifierValue {\r\n}\r\nexport { AnimatedFormatQualifierValue };\r\n", "import { AnimatedFormatQualifierValue } from \"./animatedFormat/AnimatedFormatQualifierValue.js\";\r\n/**\r\n * @description Contains methods to specify the animated format\r\n * @namespace AnimatedFormat\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\n/**\r\n * @description Automatically sets the animated format\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AnimatedFormat\r\n * @return {Qualifiers.AnimatedFormatQualifierValue}\r\n */\r\nfunction auto() {\r\n    return new AnimatedFormatQualifierValue('auto');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AnimatedFormat\r\n * @return {Qualifiers.AnimatedFormatQualifierValue}\r\n */\r\nfunction gif() {\r\n    return new AnimatedFormatQualifierValue('gif');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AnimatedFormat\r\n * @return {Qualifiers.AnimatedFormatQualifierValue}\r\n */\r\nfunction webp() {\r\n    return new AnimatedFormatQualifierValue('webp');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.AnimatedFormat\r\n * @return {Qualifiers.AnimatedFormatQualifierValue}\r\n */\r\nfunction png() {\r\n    return new AnimatedFormatQualifierValue('png');\r\n}\r\nconst AnimatedFormat = { auto, gif, webp, png };\r\nexport { auto, gif, webp, png, AnimatedFormat };\r\n", "/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ChromeSubSampling\r\n */\r\nfunction chroma444() { return 444; }\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ChromeSubSampling\r\n */\r\nfunction chroma420() { return 420; }\r\n/**\r\n * @description Contains functions to select the chroma subsampling setting.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\r\n * @memberOf Qualifiers\r\n * @namespace ChromeSubSampling\r\n * @see To be used in {@link Actions.Delivery|Delivery} action (Quality)\r\n * @see To be used in {@link Actions.Delivery.DeliveryQualityAction|Quality Action} class\r\n */\r\nconst ChromaSubSampling = {\r\n    chroma444,\r\n    chroma420\r\n};\r\nexport { ChromaSubSampling, chroma420, chroma444 };\r\n", "/**\r\n * @description Contains functions to select the device pixel ratio.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/resizing_and_cropping#set_device_pixel_ratio_dpr|Set Device Pixel Ratio}\r\n * @memberOf Qualifiers\r\n * @namespace DPR\r\n * @see Visit {@link Actions.Delivery.dpr|Delivery DPR} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.DPR\r\n */\r\nfunction auto() {\r\n    return 'auto';\r\n}\r\nconst Dpr = {\r\n    auto\r\n};\r\nexport { auto, Dpr };\r\n", "import { QualifierModel } from \"../../internal/models/QualifierModel.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {QualifierModel}\r\n * @description An abstract class extended by all Source objects\r\n */\r\nclass BaseSource extends QualifierModel {\r\n    /**\r\n     * @description Utility function to encode an asset publicID in an overlay\r\n     * @protected\r\n     * @example\r\n     * encodeAssetPublicID('foo/bar'); // -> foo:bar\r\n     */\r\n    encodeAssetPublicID(publicID) {\r\n        return publicID.replace(/\\//g, ':');\r\n    }\r\n    /**\r\n     * @description\r\n     * Apply a transformation on the image source of the layer\r\n     * @param {SDK.ImageTransformation} t An image transformation to apply to the layer\r\n     * @returns {this}\r\n     */\r\n    transformation(t) {\r\n        this._qualifierModel.transformation = t.toJson();\r\n        this._transformation = t;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Returns the Transformation of the source\r\n     * @return {SDK.Transformation}\r\n     */\r\n    getTransformation() {\r\n        return this._transformation;\r\n    }\r\n}\r\nexport { BaseSource };\r\n", "import { BaseSource } from \"../BaseSource.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.BaseSource}\r\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\r\n * <div class=\"panel panel-primary\">\r\n *   <div class=\"panel-heading\">Notice</div>\r\n *   <div class=\"panel-body\">\r\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\r\n *     You can find regular images and videos transformations below:\r\n *   </div>\r\n *   <ul>\r\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\r\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\r\n *   </ul>\r\n * </div>\r\n */\r\nclass VideoSource extends BaseSource {\r\n    constructor(publicID) {\r\n        super();\r\n        this._publicID = publicID;\r\n        this._qualifierModel = {\r\n            publicId: publicID,\r\n            sourceType: 'video'\r\n        };\r\n    }\r\n    /**\r\n     * @description\r\n     * Returns the opening string of the layer,\r\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\r\n     * @returns {string}\r\n     */\r\n    getOpenSourceString(layerType) {\r\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\r\n        return `${layerType}_video:${encodedPublicID}`;\r\n    }\r\n    static fromJson(qualifierModel, transformationFromJson) {\r\n        const { publicId, transformation } = qualifierModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        // @ts-ignore\r\n        const result = new this(publicId);\r\n        if (transformation) {\r\n            result.transformation(transformationFromJson(transformation));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { VideoSource };\r\n", "import { BaseSource } from \"../BaseSource.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.BaseSource}\r\n * @description Defines how to manipulate an image layer\r\n * <div class=\"panel panel-warning\">\r\n *   <div class=\"panel-heading\">Notice</div>\r\n *   <div class=\"panel-body\">\r\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\r\n *     You can find regular images and videos transformations below:\r\n *   </div>\r\n *   <ul>\r\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\r\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\r\n *   </ul>\r\n * </div>\r\n */\r\nclass ImageSource extends BaseSource {\r\n    constructor(publicID) {\r\n        super();\r\n        this._publicID = publicID;\r\n        this._qualifierModel = {\r\n            publicId: publicID,\r\n            sourceType: 'image'\r\n        };\r\n    }\r\n    /**\r\n     * @description\r\n     * Returns the opening string of the layer,\r\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\r\n     * @returns {string}\r\n     */\r\n    getOpenSourceString(layerType) {\r\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\r\n        if (this._format) {\r\n            return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\r\n        }\r\n        else {\r\n            return `${layerType}_${encodedPublicID}`;\r\n        }\r\n    }\r\n    /**\r\n     * @description\r\n     * Apply a format for the image source of the layer\r\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\r\n     * @returns {this}\r\n     */\r\n    format(format) {\r\n        this._format = format;\r\n        return this;\r\n    }\r\n    toJson() {\r\n        const result = super.toJson();\r\n        if (result.publicId && this._format) {\r\n            result.publicId = `${result.publicId}.${this._format.toString()}`;\r\n        }\r\n        return result;\r\n    }\r\n    static fromJson(qualifierModel, transformationFromJson) {\r\n        const { publicId, transformation } = qualifierModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        // @ts-ignore\r\n        const result = new this(publicId);\r\n        if (transformation) {\r\n            result.transformation(transformationFromJson(transformation));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { ImageSource };\r\n", "/**\r\n *\r\n * @description - Replace (,) and (/) in a string to its URL encoded equivalence\r\n * @param {string} str\r\n * @private\r\n */\r\nfunction serializeCloudinaryCharacters(str = '') {\r\n    return str\r\n        .replace(/,/g, '%2C')\r\n        .replace(/\\//g, '%2F');\r\n}\r\nexport { serializeCloudinaryCharacters };\r\n", "/**\r\n * Validate that obj is an ISolidStrokeModel\r\n * @param obj\r\n */\r\nexport function isISolidStrokeModel(obj) {\r\n    return typeof obj === 'object' && obj.width != null && obj.color != null;\r\n}\r\n", "import { normal as normalFontWeight } from \"./fontWeight.js\";\r\nimport { normal as normalFontStyle } from \"./fontStyle.js\";\r\nimport { normal as normalTextDecoration } from \"./textDecoration.js\";\r\nimport { serializeCloudinaryCharacters } from \"../internal/utils/serializeCloudinaryCharacters.js\";\r\nimport { QualifierModel } from \"../internal/models/QualifierModel.js\";\r\nimport { solid } from \"./textStroke.js\";\r\nimport { isISolidStrokeModel } from \"../internal/models/IStrokeModel.js\";\r\n/**\r\n * @summary qualifier\r\n * @description Specifies how to style your layered text, controls the font, font size, line spacing and more.\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/layers#text_layer_options|Adding text overlays to images}\r\n * </br><b>Learn more</b>: {@link https://cloudinary.com/documentation/video_layers#text_layer_options|Adding text overlays to videos}\r\n * @see {@link Actions.Overlay| The overlay action}\r\n * @see {@link Actions.Underlay| The underlay action}\r\n * @memberOf Qualifiers\r\n */\r\nclass TextStyle extends QualifierModel {\r\n    /**\r\n     * @param {string} fontFamily The font family\r\n     * @param {number | string} fontSize The font size\r\n     */\r\n    constructor(fontFamily, fontSize) {\r\n        super();\r\n        if (!fontFamily || !fontSize) {\r\n            throw `You must provide a fontFamily and fontSize to a TextStyle`;\r\n        }\r\n        this._qualifierModel.fontFamily = fontFamily;\r\n        this._qualifierModel.fontSize = fontSize;\r\n    }\r\n    /**\r\n     * @param {number} spacing The spacing between multiple lines in pixels.\r\n     */\r\n    lineSpacing(spacing) {\r\n        this._qualifierModel.lineSpacing = spacing;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param spacing The spacing between the letters, in pixels.\r\n     */\r\n    letterSpacing(spacing) {\r\n        this._qualifierModel.letterSpacing = spacing;\r\n        return this;\r\n    }\r\n    /**\r\n     * The antialias setting to apply to the text. When this parameter is not specified, the default antialiasing for the subsystem and target device are applied.\r\n     * @param {FontAntialiasType|string} antiAlias\r\n     */\r\n    fontAntialias(antiAlias) {\r\n        this._qualifierModel.fontAntialias = antiAlias;\r\n        return this;\r\n    }\r\n    /**\r\n     * The name of any universally available font or a custom font, specified as the public ID of a raw, authenticated font in your account.\r\n     * For details on custom fonts, see {@link https://cloudinary.com/documentation/layers#custom_fonts|Using custom fonts for text overlays}.\r\n     * @param {string} fontFamilyName\r\n     */\r\n    fontFamily(fontFamilyName) {\r\n        this._qualifierModel.fontFamily = fontFamilyName;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {number} fontSize The font size\r\n     */\r\n    fontSize(fontSize) {\r\n        this._qualifierModel.fontSize = fontSize;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {FontWeightType|string} fontWeight The font weight\r\n     */\r\n    fontWeight(fontWeight) {\r\n        this._qualifierModel.fontWeight = fontWeight;\r\n        return this;\r\n    }\r\n    /**\r\n     *\r\n     * @param {string} fontStyle The font style.\r\n     */\r\n    fontStyle(fontStyle) {\r\n        this._qualifierModel.fontStyle = fontStyle;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {string} fontHinting The outline hinting style to apply to the text. When this parameter is not specified, the default hint style for the font and target device are applied.\r\n     */\r\n    fontHinting(fontHinting) {\r\n        this._qualifierModel.fontHinting = fontHinting;\r\n        return this;\r\n    }\r\n    /**\r\n     *\r\n     * @param {TextDecorationType|string} textDecoration The font decoration type.\r\n     */\r\n    textDecoration(textDecoration) {\r\n        this._qualifierModel.textDecoration = textDecoration;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {TextAlignmentType|string} textAlignment The text alignment\r\n     */\r\n    textAlignment(textAlignment) {\r\n        this._qualifierModel.textAlignment = textAlignment;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Whether to include an outline stroke. Set the color and weight of the stroke\r\n     */\r\n    stroke(textStroke) {\r\n        if (textStroke) {\r\n            const strokeStyle = textStroke.split('_');\r\n            this._qualifierModel.stroke = {\r\n                width: +(strokeStyle[1].replace('px', '')),\r\n                color: strokeStyle[strokeStyle.length - 1]\r\n            };\r\n        }\r\n        else {\r\n            this._qualifierModel.stroke = true;\r\n        }\r\n        return this;\r\n    }\r\n    toString() {\r\n        const { stroke } = this._qualifierModel;\r\n        let strokeStr = '';\r\n        if (stroke) {\r\n            strokeStr = isISolidStrokeModel(stroke) ? `stroke_${solid(stroke.width, stroke.color)}` : 'stroke';\r\n        }\r\n        return [\r\n            `${serializeCloudinaryCharacters(this._qualifierModel.fontFamily)}_${this._qualifierModel.fontSize}`,\r\n            this._qualifierModel.fontWeight !== normalFontWeight() && this._qualifierModel.fontWeight,\r\n            this._qualifierModel.fontStyle !== normalFontStyle() && this._qualifierModel.fontStyle,\r\n            this._qualifierModel.textDecoration !== normalTextDecoration() && this._qualifierModel.textDecoration,\r\n            this._qualifierModel.textAlignment,\r\n            strokeStr,\r\n            this._qualifierModel.letterSpacing && `letter_spacing_${this._qualifierModel.letterSpacing}`,\r\n            this._qualifierModel.lineSpacing && `line_spacing_${this._qualifierModel.lineSpacing}`,\r\n            this._qualifierModel.fontAntialias && `antialias_${this._qualifierModel.fontAntialias}`,\r\n            this._qualifierModel.fontHinting && `hinting_${this._qualifierModel.fontHinting}`\r\n        ].filter((a) => a).join('_');\r\n    }\r\n}\r\nexport { TextStyle };\r\n", "import { BaseSource } from \"../BaseSource.js\";\r\nimport { TextStyle } from \"../../textStyle.js\";\r\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters.js\";\r\nimport { Action } from \"../../../internal/Action.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.BaseSource}\r\n * @description Defines the common interface for all text-based sources\r\n */\r\nclass BaseTextSource extends BaseSource {\r\n    constructor(text, textStyle) {\r\n        super();\r\n        this.type = 'text';\r\n        this.text = text;\r\n        this._textStyle = textStyle;\r\n        this._qualifierModel.sourceType = 'text';\r\n        this._qualifierModel.text = text;\r\n        if (textStyle instanceof TextStyle) {\r\n            this._qualifierModel.textStyle = textStyle.toJson();\r\n        }\r\n    }\r\n    encodeText(text) {\r\n        return serializeCloudinaryCharacters(text);\r\n    }\r\n    textColor(color) {\r\n        this._textColor = color;\r\n        this._qualifierModel.textColor = color;\r\n        return this;\r\n    }\r\n    backgroundColor(bgColor) {\r\n        this._backgroundColor = bgColor;\r\n        this._qualifierModel.backgroundColor = bgColor;\r\n        return this;\r\n    }\r\n    textFit(textFit) {\r\n        this._textFit = textFit;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description\r\n     * Returns the opening string of the layer,\r\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\r\n     * @returns {string}\r\n     */\r\n    getOpenSourceString(layerType) {\r\n        const layerParam = [\r\n            this.type,\r\n            this._textStyle && this._textStyle.toString(),\r\n            this.encodeText(this.text)\r\n        ].filter((a) => a).join(':');\r\n        const tmpAction = new Action();\r\n        tmpAction.addQualifier(new Qualifier(layerType, layerParam));\r\n        this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\r\n        this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\r\n        this._textFit && tmpAction.addQualifier(this._textFit);\r\n        return tmpAction.toString();\r\n    }\r\n}\r\nexport { BaseTextSource };\r\n", "import { BaseTextSource } from \"./BaseTextSource.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.SubtitlesSource}\r\n * @description Defines how to manipulate a Subtitles layer\r\n */\r\nclass SubtitlesSource extends BaseTextSource {\r\n    constructor(fileName) {\r\n        super(fileName);\r\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\r\n        this._qualifierModel = {\r\n            sourceType: 'subtitles',\r\n            publicId: fileName\r\n        };\r\n    }\r\n    /**\r\n     * @description Set the textStyle for the subtitles layer\r\n     * @param {TextStyle} textStyle\r\n     */\r\n    textStyle(textStyle) {\r\n        this._textStyle = textStyle;\r\n        this._qualifierModel.textStyle = textStyle.toJson();\r\n        return this;\r\n    }\r\n    /**\r\n     *\r\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\r\n     * Subtitle file names require a different encoding than texts\r\n     * @param text\r\n     * @example\r\n     * encodeText('foo/bar'); // -> foo:bar\r\n     */\r\n    encodeText(text) {\r\n        return text.replace(/\\//g, ':');\r\n    }\r\n}\r\nexport { SubtitlesSource };\r\n", "/**\r\n *\r\n * @private\r\n * @description An isomorphic Base64 function, provides browser and server support.\r\n * @param {string} input - A string to encode with base64\r\n */\r\nfunction base64Encode(input) {\r\n    // Browser\r\n    let encodedResult = '';\r\n    if (typeof window !== 'undefined') {\r\n        // encodeURI the input to support unicode characters\r\n        // Since the URI might be encoded already, we try to decode it once before\r\n        encodedResult = btoa(encodeURI(decodeURI(input)));\r\n    }\r\n    else {\r\n        // NodeJS support\r\n        encodedResult = global.Buffer.from(input).toString('base64');\r\n    }\r\n    return encodedResult\r\n        .replace(/\\+/g, '-') // Convert '+' to '-'\r\n        .replace(/\\//g, '_'); // Convert '/' to '_';\r\n}\r\nexport { base64Encode };\r\n", "import { BaseSource } from \"../BaseSource.js\";\r\nimport { FormatQualifier } from \"../../format/FormatQualifier.js\";\r\nimport { base64Encode } from \"../../../internal/utils/base64Encode.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.BaseSource}\r\n * @description Defines how to manipulate a Fetch layer\r\n * <div class=\"panel panel-warning\">\r\n *   <div class=\"panel-heading\">Notice</div>\r\n *   <div class=\"panel-body\">\r\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\r\n *     You can find regular images and videos transformations below:\r\n *   </div>\r\n  *   <ul>\r\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\r\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\r\n *   </ul>\r\n * </div>\r\n *\r\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\r\n */\r\nclass FetchSource extends BaseSource {\r\n    constructor(remoteURL) {\r\n        super();\r\n        this._qualifierModel = {\r\n            sourceType: 'fetch',\r\n            url: remoteURL\r\n        };\r\n        this._remoteURL = remoteURL;\r\n    }\r\n    /**\r\n     * @description\r\n     * Returns the opening string of the layer,\r\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\r\n     * @returns {string}\r\n     */\r\n    getOpenSourceString(layerType) {\r\n        if (this._format) {\r\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\r\n        }\r\n        else {\r\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\r\n        }\r\n    }\r\n    /**\r\n     * @description\r\n     * Apply a format for the image source of the layer\r\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\r\n     * @returns {this}\r\n     */\r\n    format(format) {\r\n        this._qualifierModel.format = format.toString();\r\n        this._format = format;\r\n        return this;\r\n    }\r\n    static fromJson(qualifierModel, transformationFromJson) {\r\n        const { url, transformation, format } = qualifierModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(url);\r\n        if (transformation) {\r\n            result.transformation(transformationFromJson(transformation));\r\n        }\r\n        if (format) {\r\n            result.format(new FormatQualifier(format));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { FetchSource };\r\n", "import { TextStyle } from \"../../qualifiers/textStyle.js\";\r\nimport { solid } from \"../../qualifiers/textStroke.js\";\r\n/**\r\n * Create TextStyle from ITextStyleModel\r\n * @param textStyleModel\r\n */\r\nexport function createTextStyleFromModel(textStyleModel) {\r\n    const { fontFamily, fontSize, fontWeight, fontStyle, fontAntialias, fontHinting, textDecoration, textAlignment, stroke, letterSpacing, lineSpacing, } = textStyleModel;\r\n    const result = new TextStyle(fontFamily, fontSize);\r\n    if (fontWeight) {\r\n        result.fontWeight(fontWeight);\r\n    }\r\n    if (fontStyle) {\r\n        result.fontStyle(fontStyle);\r\n    }\r\n    if (fontAntialias) {\r\n        result.fontAntialias(fontAntialias);\r\n    }\r\n    if (fontHinting) {\r\n        result.fontHinting(fontHinting);\r\n    }\r\n    if (textDecoration) {\r\n        result.textDecoration(textDecoration);\r\n    }\r\n    if (textAlignment) {\r\n        result.textAlignment(textAlignment);\r\n    }\r\n    if (stroke) {\r\n        result.stroke();\r\n        if (typeof stroke !== \"boolean\") {\r\n            result.stroke(solid(stroke.width, stroke.color));\r\n        }\r\n    }\r\n    if (letterSpacing) {\r\n        result.letterSpacing(letterSpacing);\r\n    }\r\n    if (lineSpacing) {\r\n        result.lineSpacing(lineSpacing);\r\n    }\r\n    return result;\r\n}\r\n", "import { BaseTextSource } from \"./BaseTextSource.js\";\r\nimport { createTextStyleFromModel } from \"../../../internal/models/createTextStyleFromModel.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.BaseTextSource}\r\n * @description Defines how to manipulate a text layer\r\n */\r\nclass TextSource extends BaseTextSource {\r\n    constructor(fileName, textStyle) {\r\n        /* istanbul ignore next */\r\n        super(fileName, textStyle);\r\n    }\r\n    static fromJson(qualifierModel, transformationFromJson) {\r\n        const { text, textStyle, textColor, backgroundColor, transformation } = qualifierModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(text, textStyle ? createTextStyleFromModel(textStyle) : undefined);\r\n        if (transformation) {\r\n            result.transformation(transformationFromJson(transformation));\r\n        }\r\n        if (textColor) {\r\n            result.textColor(textColor);\r\n        }\r\n        if (backgroundColor) {\r\n            result.backgroundColor(backgroundColor);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { TextSource };\r\n", "import { BaseSource } from \"../BaseSource.js\";\r\n/**\r\n * @memberOf Qualifiers.Source\r\n * @extends {Qualifiers.Source.AudioSource}\r\n * @description Defines how to manipulate a Subtitles layer\r\n */\r\nclass AudioSource extends BaseSource {\r\n    constructor(publicId) {\r\n        super();\r\n        this._qualifierModel = {\r\n            sourceType: 'audio',\r\n            publicId\r\n        };\r\n    }\r\n    /**\r\n     * @description\r\n     * Returns the opening string of the layer,\r\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\r\n     * @returns {string}\r\n     */\r\n    getOpenSourceString(layerType) {\r\n        const encodedPublicID = this.encodeAssetPublicID(this._qualifierModel.publicId);\r\n        return `${layerType}_audio:${encodedPublicID}`;\r\n    }\r\n    static fromJson(qualifierModel, transformationFromJson) {\r\n        const { publicId, transformation } = qualifierModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [qualifierModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        // @ts-ignore\r\n        const result = new this(publicId);\r\n        if (transformation) {\r\n            result.transformation(transformationFromJson(transformation));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { AudioSource };\r\n", "import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\r\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\r\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\r\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\r\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\r\nimport { AudioSource } from \"./source/sourceTypes/AudioSource.js\";\r\n/**\r\n * @description This namespace contains different sources that can be used in overlays and underlays\r\n * @memberOf Qualifiers\r\n * @namespace Source\r\n * @see {@link Actions.Overlay| The overlay action}\r\n * @see {@link Actions.Underlay| The underlay action}\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of an ImageSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} publicID The publicID of the image to be used as a layer\r\n * @return {Qualifiers.Source.ImageSource}\r\n */\r\nfunction image(publicID) {\r\n    return new ImageSource(publicID);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a TextSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} text The text to display.\r\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\r\n * @return {Qualifiers.Source.TextSource}\r\n */\r\nfunction text(text, textStyle) {\r\n    return new TextSource(text, textStyle);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a VideoSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} publicID The publicID of the video to be used as a layer\r\n * @return {Qualifiers.Source.VideoSource}\r\n */\r\nfunction video(publicID) {\r\n    return new VideoSource(publicID);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a AudioSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} publicID The publicID of the audio to be used as a layer\r\n * @return {Qualifiers.Source.AudioSource}\r\n */\r\nfunction audio(publicID) {\r\n    return new AudioSource(publicID);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of an VideoSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} fileName The publicID of the video to be used as a layer\r\n * @return {Qualifiers.Source.VideoSource}\r\n */\r\nfunction subtitles(fileName) {\r\n    return new SubtitlesSource(fileName);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Returns an instance of a FetchSource\r\n * @memberOf Qualifiers.Source\r\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\r\n * @return {Qualifiers.Source.FetchSource}\r\n */\r\nfunction fetch(remoteURL) {\r\n    return new FetchSource(remoteURL);\r\n}\r\nconst Source = { image, text, video, subtitles, fetch, audio };\r\nexport { Source, image, text, video, subtitles, fetch, audio };\r\n", "/**\r\n * @description Defines how the background gradient fade effect is applied.\r\n * @memberOf Qualifiers\r\n * @namespace GradientFade\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Instructs the gradient fade to be applied symmetrically (to opposite edges of the image).\r\n * @memberOf Qualifiers.GradientFade\r\n * @return {string}\r\n */\r\nfunction symmetric() {\r\n    return 'symmetric';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Instructs the gradient fade to be applied symmetrically (to opposite edges of the image) including background padding.\r\n * @memberOf Qualifiers.GradientFade\r\n * @return {string}\r\n */\r\nfunction symmetricPad() {\r\n    return 'symmetric_pad';\r\n}\r\nconst GradientFade = {\r\n    symmetric,\r\n    symmetricPad\r\n};\r\nexport { GradientFade, symmetricPad, symmetric };\r\n", "import { Background } from \"../../qualifiers.js\";\r\nimport { auto, border, borderGradient, color, generativeFill, predominant, predominantGradient } from \"../../qualifiers/background.js\";\r\nimport { DEFAULT_BRIGHTNESS, DEFAULT_INTENSITY } from \"../../qualifiers/background/shared/BlurredBackgroundAction.js\";\r\n/**\r\n * Create BackgroundQualifier from IBlurredBackgroundModel\r\n * @param backgroundModel\r\n */\r\nfunction createBlurredBackground(backgroundModel) {\r\n    const { brightness, intensity } = backgroundModel;\r\n    const result = Background.blurred();\r\n    result.brightness(brightness !== null && brightness !== void 0 ? brightness : DEFAULT_BRIGHTNESS);\r\n    result.intensity(intensity !== null && intensity !== void 0 ? intensity : DEFAULT_INTENSITY);\r\n    return result;\r\n}\r\n/**\r\n * Create a gradientBackground from given model\r\n * @param background\r\n * @param backgroundModel\r\n */\r\nfunction createGradientBackground(background, backgroundModel) {\r\n    const { gradientColors, gradientDirection, contrast, palette } = backgroundModel;\r\n    if (contrast) {\r\n        background.contrast();\r\n    }\r\n    if (palette) {\r\n        background.palette(...palette);\r\n    }\r\n    if (gradientColors) {\r\n        background.gradientColors(+gradientColors);\r\n    }\r\n    if (gradientDirection) {\r\n        background.gradientDirection(gradientDirection);\r\n    }\r\n    return background;\r\n}\r\n/**\r\n * Crete a background with contrast and palette from given model\r\n * @param background\r\n * @param backgroundModel\r\n */\r\nfunction createContrastPaletteBackground(background, backgroundModel) {\r\n    const { contrast, palette } = backgroundModel;\r\n    if (contrast) {\r\n        background.contrast();\r\n    }\r\n    if (palette) {\r\n        background.palette(...palette);\r\n    }\r\n    return background;\r\n}\r\n/**\r\n * Create a Generative Fill background from given model\r\n * @param background\r\n * @param backgroundModel\r\n */\r\nfunction createGenerativeFillBackground(background, backgroundModel) {\r\n    const { prompt } = backgroundModel;\r\n    if (prompt) {\r\n        background.prompt(prompt);\r\n    }\r\n    return background;\r\n}\r\n/**\r\n * Create BackgroundQualifier from IBackgroundModel\r\n * @param backgroundModel\r\n */\r\nfunction createBackgroundFromModel(backgroundModel) {\r\n    const { backgroundType } = backgroundModel;\r\n    switch (backgroundType) {\r\n        case 'auto':\r\n            return auto();\r\n        case 'blurred':\r\n            return createBlurredBackground(backgroundModel);\r\n        case 'border':\r\n            return createContrastPaletteBackground(border(), backgroundModel);\r\n        case 'borderGradient':\r\n            return createGradientBackground(borderGradient(), backgroundModel);\r\n        case 'predominant':\r\n            return createContrastPaletteBackground(predominant(), backgroundModel);\r\n        case 'predominantGradient':\r\n            return createGradientBackground(predominantGradient(), backgroundModel);\r\n        case 'generativeFill':\r\n            return createGenerativeFillBackground(generativeFill(), backgroundModel);\r\n        default:\r\n            return color(backgroundModel.color);\r\n    }\r\n}\r\nexport { createBackgroundFromModel };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { ResizeAdvancedAction } from \"./ResizeAdvancedAction.js\";\r\nimport { createBackgroundModel } from \"../../internal/models/createBackgroundModel.js\";\r\nimport { createBackgroundFromModel } from \"../../internal/models/createBackgroundFromModel.js\";\r\n/**\r\n * @description Defines an advanced resize with padding.\r\n * @extends Actions.Resize.ResizeAdvancedAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizePadAction extends ResizeAdvancedAction {\r\n    /**\r\n     * @description Sets the background.\r\n     * @param {Qualifiers.Background} backgroundQualifier Defines the background color to use instead of\r\n     * transparent background areas or when resizing with padding.\r\n     */\r\n    background(backgroundQualifier) {\r\n        this._actionModel.background = createBackgroundModel(backgroundQualifier);\r\n        return this.addQualifier(backgroundQualifier);\r\n    }\r\n    /**\r\n     * @description Horizontal position for custom-coordinates based padding.\r\n     * @param {number} x The x position.\r\n     */\r\n    offsetX(x) {\r\n        this._actionModel.x = x;\r\n        return this.addQualifier(new Qualifier('x', x));\r\n    }\r\n    /**\r\n     * @description Vertical position for custom-coordinates based padding\r\n     * @param {number} y The y position.\r\n     */\r\n    offsetY(y) {\r\n        this._actionModel.y = y;\r\n        return this.addQualifier(new Qualifier('y', y));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const result = super.fromJson.apply(this, [actionModel]);\r\n        actionModel.background && result.background(createBackgroundFromModel(actionModel.background));\r\n        actionModel.x && result.offsetX(actionModel.x);\r\n        actionModel.y && result.offsetY(actionModel.y);\r\n        actionModel.zoom && result.zoom(actionModel.zoom);\r\n        return result;\r\n    }\r\n}\r\nexport { ResizePadAction };\r\n", "import { ResizeSimpleAction } from \"./ResizeSimpleAction.js\";\r\nimport { GravityQualifier } from \"../../qualifiers/gravity/GravityQualifier.js\";\r\n/**\r\n * @description Defines a scaling resize action.\r\n * @extends Actions.Resize.ResizeSimpleAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeScaleAction extends ResizeSimpleAction {\r\n    /**\r\n     * @description Changes the aspect ratio of an image while retaining all important content and avoiding unnatural\r\n     * distortions.\r\n     * @return {this}\r\n     */\r\n    liquidRescaling() {\r\n        return this.addQualifier(new GravityQualifier('liquid'));\r\n    }\r\n}\r\nexport { ResizeScaleAction };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { ResizeAdvancedAction } from \"./ResizeAdvancedAction.js\";\r\n/**\r\n * @description Defines a thumbnail resize action.\r\n * @extends Actions.Resize.ResizeAdvancedAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ThumbResizeAction extends ResizeAdvancedAction {\r\n    /**\r\n     * @description Controls how much of the original image surrounding the face to keep when using either the 'crop' or 'thumb' cropping modes with face detection.\r\n     * @param {number | string} z The zoom factor. (Default: 1.0)\r\n     */\r\n    zoom(z) {\r\n        this._actionModel.zoom = z;\r\n        return this.addQualifier(new Qualifier('z', z));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const result = super.fromJson.apply(this, [actionModel]);\r\n        actionModel.zoom && result.zoom(actionModel.zoom);\r\n        return result;\r\n    }\r\n}\r\nexport { ThumbResizeAction };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { ResizeAdvancedAction } from \"./ResizeAdvancedAction.js\";\r\n/**\r\n * @description Defines how to crop an asset\r\n * @extends Actions.Resize.ResizeAdvancedAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeCropAction extends ResizeAdvancedAction {\r\n    /**\r\n     * @description Horizontal position for custom-coordinates based cropping.\r\n     * @param {number} x The x position.\r\n     */\r\n    x(x) {\r\n        this._actionModel.x = x;\r\n        return this.addQualifier(new Qualifier('x', x));\r\n    }\r\n    /**\r\n     * @description Vertical position for custom-coordinates based cropping\r\n     * @param {number} y The y position.\r\n     */\r\n    y(y) {\r\n        this._actionModel.y = y;\r\n        return this.addQualifier(new Qualifier('y', y));\r\n    }\r\n    /**\r\n     * @description Controls how much of the original image surrounding the face to keep when using either the 'crop' or 'thumb' cropping modes with face detection.\r\n     * @param {number | string} z The zoom factor. (Default: 1.0)\r\n     */\r\n    zoom(z) {\r\n        this._actionModel.zoom = z;\r\n        return this.addQualifier(new Qualifier('z', z));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const result = super.fromJson.apply(this, [actionModel]);\r\n        actionModel.x && result.x(actionModel.x);\r\n        actionModel.y && result.y(actionModel.y);\r\n        actionModel.zoom && result.zoom(actionModel.zoom);\r\n        return result;\r\n    }\r\n}\r\nexport { ResizeCropAction };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { ResizeAdvancedAction } from \"./ResizeAdvancedAction.js\";\r\n/**\r\n * @description Defines how to crop-fill an asset\r\n * @extends Actions.Resize.ResizeAdvancedAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeFillAction extends ResizeAdvancedAction {\r\n    /**\r\n     * @description Absolute X position when used with Gravity.xyCenter {@link Qualifiers.Gravity.GravityQualifier}}\r\n     * @param {number} x The x position.\r\n     */\r\n    x(x) {\r\n        this._actionModel.x = x;\r\n        return this.addQualifier(new Qualifier('x', x));\r\n    }\r\n    /**\r\n     * @description Absolute Y position when used with Gravity.xyCenter {@link Qualifiers.Gravity.GravityQualifier}}\r\n     * @param {number} y The y position.\r\n     */\r\n    y(y) {\r\n        this._actionModel.y = y;\r\n        return this.addQualifier(new Qualifier('y', y));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const result = super.fromJson.apply(this, [actionModel]);\r\n        actionModel.x && result.x(actionModel.x);\r\n        actionModel.y && result.y(actionModel.y);\r\n        return result;\r\n    }\r\n}\r\nexport { ResizeFillAction };\r\n", "import { ResizeSimpleAction } from \"./ResizeSimpleAction.js\";\r\n/**\r\n * @description Defines a limit fitting resize action.\r\n * @extends Actions.Resize.ResizeSimpleAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeLimitFitAction extends ResizeSimpleAction {\r\n}\r\nexport { ResizeLimitFitAction };\r\n", "import { ResizeFillAction } from \"./ResizeFillAction.js\";\r\n/**\r\n * @description Defines how to crop-limit-fill an asset\r\n * @extends Actions.Resize.ResizeFillAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeLimitFillAction extends ResizeFillAction {\r\n}\r\nexport { ResizeLimitFillAction };\r\n", "import { ResizePadAction } from \"./ResizePadAction.js\";\r\n/**\r\n * @description Defines an advanced resize with limit padding.\r\n * @extends Actions.Resize.ResizePadAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeLimitPadAction extends ResizePadAction {\r\n}\r\nexport { ResizeLimitPadAction };\r\n", "import { ResizePadAction } from \"./ResizePadAction.js\";\r\n/**\r\n * @description Defines an advanced resize with minimum padding.\r\n * @extends Actions.Resize.ResizePadAction\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeMinimumPadAction extends ResizePadAction {\r\n}\r\nexport { ResizeMinimumPadAction };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { createBackgroundModel } from \"../../internal/models/createBackgroundModel.js\";\r\nimport { createBackgroundFromModel } from \"../../internal/models/createBackgroundFromModel.js\";\r\nimport { ResizeSimpleAction } from \"./ResizeSimpleAction.js\";\r\n/**\r\n * @description Tries to prevent a \"bad crop\" by first attempting to use the auto cropping mode, but adding some padding if the algorithm determines that more of the original image needs to be included in the final image.\r\n * @extends Actions.Resize.autoPad\r\n * @memberOf Actions.Resize\r\n * @see Visit {@link Actions.Resize| Resize} for examples\r\n */\r\nclass ResizeAutoPadAction extends ResizeSimpleAction {\r\n    constructor(cropType, cropWidth, cropHeight) {\r\n        super(cropType, cropWidth, cropHeight);\r\n        this.addQualifier(new Qualifier('g', 'auto'));\r\n    }\r\n    /**\r\n     * @description Sets the background.\r\n     * @param {Qualifiers.Background} backgroundQualifier Defines the background color to use instead of\r\n     * transparent background areas or when resizing with padding.\r\n     */\r\n    background(backgroundQualifier) {\r\n        this._actionModel.background = createBackgroundModel(backgroundQualifier);\r\n        return this.addQualifier(backgroundQualifier);\r\n    }\r\n    gravity(gravity) {\r\n        // Only `auto` gravity is allowed (and required) for `c_auto_pad` and it's already added automatically in the constructor.\r\n        // Although, this method is needed to exist because it is being shown in autogenerated SDK code snippet.\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const result = super.fromJson.apply(this, [actionModel]);\r\n        actionModel.background && result.background(createBackgroundFromModel(actionModel.background));\r\n        return result;\r\n    }\r\n}\r\nexport { ResizeAutoPadAction };\r\n", "/**\r\n * @description Determines how to crop, scale, and/or zoom the delivered asset according to the requested dimensions.\r\n * @memberOf Actions\r\n * @namespace Resize\r\n * @see Learn more about Gravity and Focus {@link Qualifiers.Gravity| here }\r\n * @example\r\n * <caption> <h4>Scaling an image</h4> </caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {scale, fit, pad, crop} from '@cloudinary/url-gen/actions/resize';\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.resize( scale(100, 100) );\r\n * // All resize actions have a similar interface.\r\n * // image.resize( fit(100, 100)) );\r\n * // image.resize( pad(100, 100)) );\r\n * // image.resize( crop(100, 100)) );\r\n * // However, Some actions have additional arguments exposed as builder methods.\r\n * // See the documentation for each method for more information\r\n *\r\n *\r\n * // Alternative syntax, using builder methods\r\n * image.resize(\r\n *  scale()\r\n *    .width(100)\r\n *    .height(100)\r\n * );\r\n * image.toString()\r\n *\r\n * @example\r\n * <caption> <h4>Cropping with automatic focus(Gravity)</h4> </caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * import {scale} from '@cloudinary/url-gen/actions/resize';\r\n * import {autoGravity} from '@cloudinary/url-gen/qualifiers/gravity';\r\n *\r\n * image.resize( crop(100, 100).gravity(autoGravity()) );\r\n *\r\n * // Alternative syntax, using builder methods\r\n * image.resize(\r\n *  scale()\r\n *    .width(100)\r\n *    .height(100)\r\n *    .gravity(autoGravity())\r\n * );\r\n * image.toString()\r\n */\r\nimport { ResizePadAction } from \"./resize/ResizePadAction.js\";\r\nimport { ResizeSimpleAction } from \"./resize/ResizeSimpleAction.js\";\r\nimport { ResizeScaleAction } from \"./resize/ResizeScaleAction.js\";\r\nimport { ThumbResizeAction } from \"./resize/ThumbnailAction.js\";\r\nimport { ResizeCropAction } from \"./resize/ResizeCropAction.js\";\r\nimport { ResizeFillAction } from \"./resize/ResizeFillAction.js\";\r\nimport { ResizeLimitFitAction } from \"./resize/ResizeLimitFitAction.js\";\r\nimport { ResizeLimitFillAction } from \"./resize/ResizeLimitFillAction.js\";\r\nimport { ResizeLimitPadAction } from \"./resize/ResizeLimitPadAction.js\";\r\nimport { ResizeMinimumPadAction } from \"./resize/ResizeMinimumPadAction.js\";\r\nimport { ResizeAdvancedAction } from \"./resize/ResizeAdvancedAction.js\";\r\nimport { ResizeAutoPadAction } from \"./resize/ResizeAutoPadAction.js\";\r\n/**\r\n * @summary action\r\n * @description\r\n * Changes the size of the image exactly to the given width and height without necessarily retaining the original aspect ratio:<br/>\r\n * all original image parts are visible but might be stretched or shrunk.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ScaleAction}\r\n */\r\nfunction scale(width, height) {\r\n    return new ResizeScaleAction('scale', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Scales your image based on automatically calculated areas of interest within each specific photo.\r\n *\r\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_scale_images|add-on documentation}.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction imaggaScale(width, height) {\r\n    return new ResizeSimpleAction('imagga_scale', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Crops your image based on automatically calculated areas of interest within each specific photo.\r\n *\r\n * For details, see the Imagga Crop and Scale {@link  https://cloudinary.com/documentation/imagga_crop_and_scale_addon#smartly_crop_images|add-on documentation}.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction imaggaCrop(width, height) {\r\n    return new ResizeSimpleAction('imagga_crop', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description Extracts a region of the given width and height out of the original image.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeCropAction}\r\n */\r\nfunction crop(width, height) {\r\n    return new ResizeCropAction('crop', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Creates an image with the exact given width and height without distorting the image.<br/>\r\n * This option first scales up or down as much as needed to at least fill both of the given dimensions.<br/><br/>\r\n * If the requested aspect ratio is different than the original, cropping will occur on the dimension that exceeds the requested size after scaling.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeFillAction}\r\n */\r\nfunction fill(width, height) {\r\n    return new ResizeFillAction('fill', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * The image is resized so that it takes up as much space as possible within a bounding box defined by the given width and height parameters.</br>\r\n * The original aspect ratio is retained and all of the original image is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction fit(width, height) {\r\n    return new ResizeSimpleAction('fit', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio.\r\n *\r\n * If the proportions of the original asset do not match the given width and height, padding is added to the asset\r\n * to reach the required size.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction pad(width, height) {\r\n    return new ResizePadAction('pad', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Creates an asset with the exact given width and height without distorting the asset, but only if the original\r\n * asset is larger than the specified resolution limits.\r\n *\r\n * The asset is scaled down to fill the given width and height without distorting the asset, and then the dimension\r\n * that exceeds the request is cropped. If the original dimensions are both smaller than the requested size, it is\r\n * not resized at all.\r\n *\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeLimitFillAction}\r\n */\r\nfunction limitFill(width, height) {\r\n    return new ResizeLimitFillAction('lfill', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\r\n * width and height parameters, but only if the original asset is larger than the given limit (width and height).\r\n *\r\n * The asset is scaled down, the original aspect ratio is retained and all of the original asset is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction limitFit(width, height) {\r\n    return new ResizeLimitFitAction('limit', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\r\n * original asset is smaller than the given minimum (width and height).\r\n *\r\n * The asset is scaled up.  If the proportions of the original asset do not match the given width and height,\r\n * padding is added to the asset to reach the required size.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction minimumPad(width, height) {\r\n    return new ResizeMinimumPadAction('mpad', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset so that it takes up as much space as possible within a bounding box defined by the given\r\n * width and height parameters, but only if the original asset is smaller than the given minimum (width and height).\r\n *\r\n * The asset is scaled up, the original aspect ratio is retained and all of the original asset is visible.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeSimpleAction}\r\n */\r\nfunction minimumFit(width, height) {\r\n    return new ResizeSimpleAction('mfit', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Resize\r\n * @description\r\n * Tries to prevent a \"bad crop\" by first attempting to use the fill mode, but adding padding if it is determined\r\n * that more of the original image needs to be included in the final image.\r\n *\r\n * Especially useful if the aspect ratio of the delivered image is considerably different from the original's\r\n * aspect ratio.\r\n *\r\n * Only supported in conjunction with Automatic cropping.\r\n *\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction fillPad(width, height) {\r\n    return new ResizePadAction('fill_pad', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * The thumb cropping mode is specifically used for creating image thumbnails from either face or custom coordinates,</br>\r\n * and must always be accompanied by the gravity parameter set to one of the face detection or custom values.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ThumbResizeAction}\r\n */\r\nfunction thumbnail(width, height) {\r\n    return new ThumbResizeAction('thumb', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Automatically determines the best crop based on the gravity and specified dimensions.\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ThumbResizeAction}\r\n */\r\nfunction auto(width, height) {\r\n    return new ResizeAdvancedAction('auto', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Resizes the asset to fill the given width and height while retaining the original aspect ratio, but only if the\r\n * original asset is larger than the given limit (width and height).\r\n *\r\n * The asset is scaled down.  If the proportions of the original asset do not match the given width and height,\r\n * padding is added to the asset to reach the required size.\r\n *\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizePadAction}\r\n */\r\nfunction limitPad(width, height) {\r\n    return new ResizeLimitPadAction('lpad', width, height);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Tries to prevent a \"bad crop\" by first attempting to use the auto cropping mode, but adding some padding\r\n * if the algorithm determines that more of the original image needs to be included in the final image.\r\n *\r\n * @memberOf Actions.Resize\r\n * @param {number|string} width The required width of a transformed asset.\r\n * @param {number|string} height The required height of a transformed asset.\r\n * @return {Actions.Resize.ResizeAutoPadAction}\r\n */\r\nfunction autoPad(width, height) {\r\n    return new ResizeAutoPadAction('auto_pad', width, height);\r\n}\r\nconst Resize = {\r\n    imaggaScale,\r\n    imaggaCrop,\r\n    crop,\r\n    fill,\r\n    scale,\r\n    minimumPad,\r\n    fit,\r\n    pad,\r\n    limitFit,\r\n    thumbnail,\r\n    limitFill,\r\n    minimumFit,\r\n    limitPad,\r\n    fillPad,\r\n    auto,\r\n    autoPad\r\n};\r\nexport { Resize, imaggaScale, imaggaCrop, crop, fill, scale, minimumPad, fit, pad, limitFit, thumbnail, limitFill, minimumFit, limitPad, fillPad, auto, autoPad };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description A class to round one or more corners of an image or video.\r\n * @extends SDK.Action\r\n * @memberOf Actions.RoundCorners\r\n * @see Visit {@link Actions.RoundCorners|RoundCorners} for an example\r\n */\r\nclass RoundCornersAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'roundCorners';\r\n    }\r\n    /**\r\n     * @param {number} a\r\n     * @param {number} b\r\n     * @param {number} c\r\n     * @param {number} d\r\n     * @return {RoundCornersAction}\r\n     */\r\n    radius(a, b, c, d) {\r\n        const qualifierValue = new QualifierValue();\r\n        // In case a === 0, check typeof\r\n        a !== undefined && qualifierValue.addValue(a);\r\n        b !== undefined && qualifierValue.addValue(b);\r\n        c !== undefined && qualifierValue.addValue(c);\r\n        d !== undefined && qualifierValue.addValue(d);\r\n        const definedRadiuses = [a, b, c, d].filter((r) => r !== undefined);\r\n        this._radius = definedRadiuses;\r\n        this._actionModel.radius = definedRadiuses;\r\n        this.addQualifier(new Qualifier('r').addValue(qualifierValue));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Applies maximum rounding to the corners of the asset. An asset with square dimensions becomes a circle.\r\n     */\r\n    max() {\r\n        this._radius = 'max';\r\n        this._actionModel.radius = 'max';\r\n        return this.addQualifier(new Qualifier('r', 'max'));\r\n    }\r\n    getRadius() {\r\n        return this._radius;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { radius } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        if (Array.isArray(radius)) {\r\n            result.radius(radius[0], radius[1], radius[2], radius[3]);\r\n        }\r\n        if (radius === 'max') {\r\n            result.max();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport default RoundCornersAction;\r\n", "import { Action } from \"../internal/Action.js\";\r\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\r\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\r\nimport RoundCornersAction from \"./roundCorners/RoundCornersAction.js\";\r\n/**\r\n * @description Adds a solid border around an image or video.\r\n *\r\n *  <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\r\n * @memberOf Actions\r\n * @namespace Border\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.border(\r\n *  solid(15, 'green'),\r\n *  // Or alternatively\r\n *  solid().width(15).color('green')\r\n * );\r\n *\r\n */\r\n/**\r\n * @memberOf Actions.Border\r\n * @see Actions.Border\r\n * @example\r\n * // Used through a builder function Border.solid(), and not by creating a new instance\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.border(\r\n *  Border.solid(15, 'green'),\r\n *  // Or alternatively\r\n *  Border.solid().width(15).color('green')\r\n * );\r\n */\r\nclass BorderAction extends Action {\r\n    /**\r\n     * @description Adds a border of the specified type around an image or video.\r\n     * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\r\n     * @param {string} color The color of the border.\r\n     * @param {number} borderWidth The width in pixels.\r\n     */\r\n    constructor(borderType, color, borderWidth) {\r\n        super();\r\n        this._actionModel = {};\r\n        this.borderType = borderType;\r\n        this.borderColor = prepareColor(color);\r\n        this.borderWidth = borderWidth;\r\n        this._actionModel = {\r\n            color: prepareColor(color),\r\n            width: borderWidth,\r\n            actionType: 'border',\r\n        };\r\n    }\r\n    /**\r\n     * @description Sets the width of the border\r\n     * @param {number | string} borderWidth The width in pixels.\r\n     */\r\n    width(borderWidth) {\r\n        this.borderWidth = borderWidth;\r\n        this._actionModel.width = borderWidth;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the color of the border.\r\n     * @param {string} borderColor The color of the border.\r\n     */\r\n    color(borderColor) {\r\n        this.borderColor = prepareColor(borderColor);\r\n        this._actionModel.color = prepareColor(borderColor);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Rounds the specified corners of an image.\r\n     * @param {RoundCornersAction} roundCorners\r\n     * @return {this}\r\n     */\r\n    roundCorners(roundCorners) {\r\n        this._roundCorners = roundCorners;\r\n        this._actionModel.radius = roundCorners.getRadius();\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the style of the border.\r\n     * @param {number | string} width The width in pixels.\r\n     * @param {string} color The color of the border, e.g 'green', 'yellow'.\r\n     * @return {this}\r\n     */\r\n    solid(width, color) {\r\n        this.borderType = 'solid';\r\n        this.borderColor = prepareColor(color);\r\n        this.borderWidth = width;\r\n        this._actionModel.color = prepareColor(color);\r\n        this._actionModel.width = width;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\r\n        this.addQualifier(new Qualifier('bo', qualifierValue));\r\n        if (this._roundCorners) {\r\n            this.addQualifier(this._roundCorners.qualifiers.get('r'));\r\n        }\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { width, color, radius } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this('solid', color, width);\r\n        if (radius) {\r\n            const roundCornersAction = (() => {\r\n                if (radius === 'max') {\r\n                    return new RoundCornersAction().max();\r\n                }\r\n                if (Array.isArray(radius)) {\r\n                    return new RoundCornersAction().radius(...radius);\r\n                }\r\n                return undefined;\r\n            })();\r\n            if (roundCornersAction) {\r\n                result.roundCorners(roundCornersAction);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Border\r\n * @description Sets the style of the border.\r\n * @param {number | string} width The width in pixels.\r\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\r\n * @return {Actions.Border.BorderAction}\r\n */\r\nfunction solid(width, color) {\r\n    return new BorderAction('solid', color, width);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Border\r\n * @description Sets the radius of the border.\r\n * @param {Actions.RoundCorners.RoundCornersAction} roundCorners RoundCorners action.\r\n * @return {Actions.Border.BorderAction}\r\n */\r\nfunction roundCorners(roundCorners) {\r\n    const borderActionInstance = new BorderAction('solid', 'transparent', 0);\r\n    borderActionInstance.roundCorners(roundCorners);\r\n    return borderActionInstance;\r\n}\r\nconst Border = {\r\n    solid,\r\n    roundCorners,\r\n};\r\nexport { BorderAction, Border, solid, roundCorners };\r\n", "/**\r\n * @description Round one or more corners of an image or video.\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rounding_corners_and_creating_circular_images|Rounded images}\r\n * {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rounding|Rounded videos}\r\n * @memberOf Actions\r\n * @namespace RoundCorners\r\n * @example\r\n * <caption>Round corners by a radius</caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {byRadius, max} from \"@cloudinary/url-gen/actions/roundCorners\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * // By a radius\r\n * image.roundCorners(byRadius(10));\r\n * // Or just the maximum possible\r\n * image.roundCorners(max());\r\n * image.toString();\r\n */\r\nimport RoundCornersAction from \"./roundCorners/RoundCornersAction.js\";\r\n/**\r\n * @summary action\r\n * @description Generates an asset with a circular crop using the 'max' radius value.\r\n * @memberOf Actions.RoundCorners\r\n * @return {Actions.RoundCorners.RoundCornersAction}\r\n */\r\nfunction max() {\r\n    return new RoundCornersAction().max();\r\n}\r\n/**\r\n * @summary action\r\n * @description Rounds the specified corners of an image or a video by specifying 1-4 pixel values as follows:\r\n *\r\n * * 1 value: All four corners are rounded equally according to the specified value.\r\n * * 2 values: 1st value => top-left & bottom-right. 2nd value => top-right & bottom-left.\r\n * * 3 values: 1st value => top-left. 2nd value => top-right & bottom-left. 3rd value => bottom-right.\r\n * * 4 values: Each corner specified separately, in clockwise order, starting with top-left.\r\n *\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number} c\r\n * @param {number} d\r\n * @memberOf Actions.RoundCorners\r\n * @return {Actions.RoundCorners.RoundCornersAction}\r\n */\r\nfunction byRadius(a, b, c, d) {\r\n    return new RoundCornersAction().radius(a, b, c, d);\r\n}\r\nconst RoundCorners = { byRadius, max };\r\nexport { RoundCorners, byRadius, max };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\nimport { faces, ocr } from \"../../qualifiers/region.js\";\r\nimport { CustomRegion } from \"../../qualifiers/region/CustomRegion.js\";\r\n/**\r\n * @description The Action class of the blur Builder.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass BlurAction extends Action {\r\n    constructor(strength) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._strength = strength;\r\n        this._actionModel.actionType = 'blur';\r\n        this._actionModel.strength = strength;\r\n    }\r\n    /**\r\n     * @description Specifies the region to blur.\r\n     * @param {NamedRegion} blurRegion\r\n     */\r\n    region(blurRegion) {\r\n        this._region = blurRegion;\r\n        this._actionModel.region = blurRegion.toJson();\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the strength of the blur effect.\r\n     * @param {number | string} strength\r\n     */\r\n    strength(strength) {\r\n        this._strength = strength;\r\n        this._actionModel.strength = strength;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        /*\r\n         * Blur with region is a unique object in this codebase.\r\n         * On top of Blur being an Action with Qualifiers,\r\n         * it also accepts a Qualifier called Region.\r\n         *\r\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\r\n         * The existence of Region changes the output of Blur in non traditional ways\r\n         * which forced this relatively ad-hoc implementation.\r\n         *\r\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\r\n         * This happens naturally in the Action class,\r\n         * however since we're dealing with two levels of qualifiers (Blur and Region),\r\n         * these need to be merged.\r\n         *\r\n         * This function will merge the Region qualifiers with Blur\r\n         * and add all needed implicit qualifiers (like g_ocr_text).\r\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\r\n         */\r\n        const strength = this._strength ? `:${this._strength}` : '';\r\n        if ('_region' in this) {\r\n            const qualifiers = this._region.qualifiers;\r\n            // Copy qualifiers from the region \"action\" to the blur action\r\n            qualifiers.forEach((q) => this.addQualifier(q));\r\n            if (this._region.regionType === 'custom') {\r\n                this.addQualifier(new Qualifier('e', `blur_region${strength}`));\r\n            }\r\n            if (this._region.regionType === 'ocr_text') {\r\n                this.addQualifier(new Qualifier('e', `blur_region${strength}`));\r\n                this.addQualifier(new Qualifier('g', `ocr_text`));\r\n            }\r\n            if (this._region.regionType === 'faces') {\r\n                this.addQualifier(new Qualifier('e', `blur_faces${strength}`));\r\n            }\r\n        }\r\n        else {\r\n            this.addQualifier(new Qualifier('e', `blur${strength}`));\r\n        }\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { strength, region } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(strength);\r\n        strength && result.strength(strength);\r\n        if (region && region.regionType === 'faces') {\r\n            result.region(faces());\r\n        }\r\n        if (region && region.regionType === 'ocr_text') {\r\n            result.region(ocr());\r\n        }\r\n        if (region && region.regionType === 'custom') {\r\n            result.region(CustomRegion.fromJson(region));\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { BlurAction };\r\n", "import { Action } from \"../../../internal/Action.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Changes the speed of the video playback using the rate() method\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass AccelerationEffectAction extends Action {\r\n    constructor(rate) {\r\n        super();\r\n        this._actionModel = { actionType: 'accelerate' };\r\n        rate && this.rate(rate);\r\n    }\r\n    rate(rate) {\r\n        this._actionModel.rate = rate;\r\n        this._rate = rate;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue(['accelerate', this._rate]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { rate } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        // @ts-ignore\r\n        const result = new this();\r\n        rate && result.rate(rate);\r\n        return result;\r\n    }\r\n}\r\nexport { AccelerationEffectAction };\r\n", "import { Action } from \"../../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP, EFFECT_MODE_TO_ACTION_TYPE_MAP } from \"../../../internal/internalConstants.js\";\r\n/**\r\n * @description A class that defines a simple effect of the type e_{effectName}\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass SimpleEffectAction extends Action {\r\n    constructor(effectType, level) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = EFFECT_MODE_TO_ACTION_TYPE_MAP[effectType] || effectType;\r\n        const qualifierEffect = this.createEffectQualifier(effectType, level);\r\n        this.addQualifier(qualifierEffect);\r\n    }\r\n    createEffectQualifier(effectType, level) {\r\n        let qualifierValue;\r\n        if (level) {\r\n            qualifierValue = new QualifierValue([effectType, `${level}`]).setDelimiter(':');\r\n        }\r\n        else {\r\n            qualifierValue = new QualifierValue(effectType);\r\n        }\r\n        return new Qualifier('e', qualifierValue);\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, level, strength } = actionModel;\r\n        const effectType = ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType] || actionType;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        // @ts-ignore\r\n        const result = new this(effectType, level ? level : strength);\r\n        return result;\r\n    }\r\n}\r\nexport { SimpleEffectAction };\r\n", "import { SimpleEffectAction } from \"./SimpleEffectAction.js\";\r\nimport { EFFECT_MODE_TO_ACTION_TYPE_MAP } from \"../../../internal/internalConstants.js\";\r\n/**\r\n * @description A base class for effects with a level, the extending class needs to implement a method that calls setLevel()\r\n * @extends {Actions.Effect.SimpleEffectAction}\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass LeveledEffectAction extends SimpleEffectAction {\r\n    constructor(effectType, level) {\r\n        super(effectType, level);\r\n        this.LEVEL_NAME = 'level';\r\n        this._actionModel = {};\r\n        this.effectType = effectType;\r\n        this._actionModel.actionType = EFFECT_MODE_TO_ACTION_TYPE_MAP[effectType] || effectType;\r\n        if (level) {\r\n            this.setLevel(level);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @description Sets the effect level for the action\r\n     * @param {string | number} level - The strength of the effect\r\n     * @protected\r\n     */\r\n    setLevel(level) {\r\n        this._actionModel[this.LEVEL_NAME] = level;\r\n        const qualifierEffect = this.createEffectQualifier(this.effectType, level);\r\n        this.addQualifier(qualifierEffect);\r\n        return this;\r\n    }\r\n}\r\nexport { LeveledEffectAction };\r\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\r\n/**\r\n * @description Delivers a video or animated GIF that contains additional loops of the video/GIF.\r\n * @extends LeveledEffectAction\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass LoopEffectAction extends LeveledEffectAction {\r\n    additionalIterations(value) {\r\n        this._actionModel.iterations = value;\r\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\r\n        this.addQualifier(qualifierEffect);\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, iterations } = (actionModel);\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(actionType, iterations);\r\n        return result;\r\n    }\r\n}\r\nexport { LoopEffectAction };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\n/**\r\n * @description Applies a cartoon effect to an image.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass CartoonifyEffect extends Action {\r\n    constructor(effectName, strength) {\r\n        // We don't pass level in the constructor, we'll build it in the prepareParam\r\n        super();\r\n        this._actionModel = {};\r\n        this.cartoonifyStrength = strength;\r\n        this.effectName = effectName;\r\n        this._actionModel.actionType = effectName;\r\n    }\r\n    /**\r\n     * @description Sets the thickness of the lines.\r\n     * @param {number} lineStrength The thickness of the lines. (Range: 0 to 100, Server default: 50)\r\n     * @return {this}\r\n     */\r\n    lineStrength(lineStrength) {\r\n        this.cartoonifyStrength = lineStrength;\r\n        this._actionModel.lineStrength = lineStrength;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Achieves a black and white cartoon effect.\r\n     * @return {this}\r\n     */\r\n    blackwhite() {\r\n        this._actionModel.blackAndWhite = true;\r\n        this.colorReduction = 'bw';\r\n        return this;\r\n    }\r\n    /**\r\n     * @description\r\n     * Sets the decrease in the number of colors and corresponding saturation boost of the remaining colors. <br/>\r\n     * Higher reduction values result in a less realistic look.\r\n     * @param {number } level The decrease in the number of colors and corresponding saturation boost of the remaining colors. (Range: 0 to 100, Server default: automatically adjusts according to the line_strength value). Set to 'bw' for a black and white cartoon effect.\r\n     * @return {this}\r\n     */\r\n    colorReductionLevel(level) {\r\n        this._actionModel.colorReductionLevel = level;\r\n        this.colorReduction = level;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        this.addQualifier(new Qualifier('e', new QualifierValue([this.effectName, this.cartoonifyStrength, this.colorReduction])));\r\n        return;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, lineStrength, blackAndWhite, colorReductionLevel } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(actionType, lineStrength);\r\n        blackAndWhite && result.blackwhite();\r\n        colorReductionLevel && result.colorReductionLevel(colorReductionLevel);\r\n        lineStrength && result.lineStrength(lineStrength);\r\n        return result;\r\n    }\r\n}\r\nexport { CartoonifyEffect };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\r\n/**\r\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass EffectOutline extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'outline';\r\n    }\r\n    /**\r\n     * @description\r\n     * How to apply the outline effect which can be one of the following values:\r\n     * inner, inner_fill, outer, fill.\r\n     * @param {OutlineModeType|string} mode  The type of outline effect. Use the constants defined in Outline.\r\n     * @return {this}\r\n     */\r\n    mode(mode) {\r\n        this._actionModel.mode = mode;\r\n        this._mode = mode;\r\n        return this;\r\n    }\r\n    /**\r\n     * The thickness of the outline in pixels. (Range: 1 to 100, Server default: 5)\r\n     * @param {number} width\r\n     * @return {this}\r\n     */\r\n    width(width) {\r\n        this._actionModel.width = width;\r\n        this._width = width;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description\r\n     * The level of blur of the outline.\r\n     * Range: 0 to 2000, Server default: 0\r\n     * @param {number | string} lvl\r\n     * @return {this}\r\n     */\r\n    blurLevel(lvl) {\r\n        this._actionModel.blurLevel = lvl;\r\n        this._blurLevel = lvl;\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {string | Qualifiers.Color} color One of the SDK Color values, string, or rgba: '#fff'\r\n     * @return {this}\r\n     */\r\n    color(color) {\r\n        this._actionModel.color = color;\r\n        return this.addQualifier(new Qualifier('co', prepareColor(color)));\r\n    }\r\n    prepareQualifiers() {\r\n        this.addQualifier(new Qualifier('e', new QualifierValue(['outline', this._mode, this._width, this._blurLevel]).setDelimiter(':')));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, mode, color, blurLevel, width } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        mode && result.mode(mode);\r\n        color && result.color(color);\r\n        blurLevel && result.blurLevel(blurLevel);\r\n        width && result.width(width);\r\n        return result;\r\n    }\r\n}\r\nexport { EffectOutline };\r\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\r\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\r\nimport { ACTION_TYPE_TO_EFFECT_MODE_MAP } from \"../../../internal/internalConstants.js\";\r\n/**\r\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\r\n * @extends LeveledEffectAction\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass MakeTransparentEffectAction extends LeveledEffectAction {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._actionModel = { actionType: 'makeTransparent' };\r\n    }\r\n    /**\r\n     * @description Sets the tolerance used to accommodate variance in the background color.\r\n     * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\r\n     */\r\n    tolerance(value) {\r\n        this._actionModel.tolerance = value;\r\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\r\n        this.addQualifier(qualifierEffect);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the color to make transparent.\r\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\r\n     * @return {this}\r\n     */\r\n    colorToReplace(color) {\r\n        this._actionModel.color = color;\r\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, tolerance, color } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(ACTION_TYPE_TO_EFFECT_MODE_MAP[actionType], tolerance);\r\n        tolerance && result.tolerance(tolerance);\r\n        color && result.colorToReplace(color);\r\n        return result;\r\n    }\r\n}\r\nexport { MakeTransparentEffectAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Vectorizes the image.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass VectorizeEffectAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'vectorize';\r\n    }\r\n    /**\r\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\r\n     * @param {number | string} num\r\n     * @return {this}\r\n     */\r\n    numOfColors(num) {\r\n        this._actionModel.numOfColors = num;\r\n        this._numOfColors = num;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\r\n     * @param {number | string} num\r\n     * @return {this}\r\n     */\r\n    detailsLevel(num) {\r\n        this._actionModel.detailLevel = num;\r\n        this._detailsLevel = num;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\r\n     * @param {number | string} num\r\n     * @return {this}\r\n     */\r\n    despeckleLevel(num) {\r\n        this._actionModel.despeckleLevel = num;\r\n        this._despeckleLevel = num;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\r\n     * @param {number | string} num\r\n     * @return {this}\r\n     */\r\n    cornersLevel(num) {\r\n        this._actionModel.cornersLevel = num;\r\n        this._cornersLevel = num;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\r\n     * @param {number} num\r\n     * @return {this}\r\n     */\r\n    paths(num) {\r\n        this._actionModel.paths = num;\r\n        this._paths = num;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let str = 'vectorize';\r\n        if (this._numOfColors) {\r\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\r\n        }\r\n        if (this._detailsLevel) {\r\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\r\n        }\r\n        if (this._despeckleLevel) {\r\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\r\n        }\r\n        if (this._paths) {\r\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\r\n        }\r\n        if (this._cornersLevel) {\r\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\r\n        }\r\n        this.addQualifier(new Qualifier('e', str));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, paths, cornersLevel, despeckleLevel, detailLevel, numOfColors } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        paths && result.paths(paths);\r\n        cornersLevel && result.cornersLevel(cornersLevel);\r\n        despeckleLevel && result.despeckleLevel(despeckleLevel);\r\n        detailLevel && result.detailsLevel(detailLevel);\r\n        numOfColors && result.numOfColors(numOfColors);\r\n        return result;\r\n    }\r\n}\r\nexport { VectorizeEffectAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Simulates the way an image would appear to someone with the specified color blind condition\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass SimulateColorBlindEffectAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'simulateColorblind';\r\n        this.addQualifier(new Qualifier('e', `simulate_colorblind`));\r\n    }\r\n    setQualifier(val) {\r\n        const strToAppend = `:${val}`;\r\n        if (val) {\r\n            this.addQualifier(new Qualifier('e', `simulate_colorblind${strToAppend}`));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the color blind condition to simulate.\r\n     * @param {Qualifiers.simulateColorBlindValues | SimulateColorBlindType | string} cond\r\n     * @return {this}\r\n     */\r\n    condition(cond) {\r\n        this._actionModel.condition = cond;\r\n        return this.setQualifier(cond);\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, condition } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        condition && result.condition(condition);\r\n        return result;\r\n    }\r\n}\r\nexport { SimulateColorBlindEffectAction };\r\n", "import { LeveledEffectAction } from \"./LeveledEffectAction.js\";\r\n/**\r\n * @description A class that provides a built in level() method that sets the level of the effect\r\n * @extends {Actions.Effect.LeveledEffectAction}\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass EffectActionWithLevel extends LeveledEffectAction {\r\n    level(value) {\r\n        this._actionModel.level = value;\r\n        return this.setLevel(value);\r\n    }\r\n}\r\nexport { EffectActionWithLevel };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.\r\n *              You can replace colors using the xray() method.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass AssistColorBlindEffectAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'assistColorblind';\r\n        this.addQualifier(new Qualifier('e', new QualifierValue('assist_colorblind')));\r\n    }\r\n    /**\r\n     * @description Replaces problematic colors with colors that are easier to differentiate.\r\n     * @return {this}\r\n     */\r\n    xray() {\r\n        this._actionModel.type = 'xray';\r\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', 'xray']).setDelimiter(':')));\r\n    }\r\n    /**\r\n     * @description Applies stripes of the specified intensity to help people with common color blind conditions to differentiate between colors that are similar for them.\r\n     * @param {number | string} strength The intensity of the stripes. (Range: 1 to 100, Server default: 10)\r\n     * @return {this}\r\n     */\r\n    stripesStrength(strength) {\r\n        this._actionModel.type = 'stripes';\r\n        this._actionModel.stripesStrength = strength;\r\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['assist_colorblind', strength]).setDelimiter(':')));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, type, stripesStrength } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        if (type === 'xray') {\r\n            result.xray();\r\n        }\r\n        if (type === 'stripes') {\r\n            stripesStrength && result.stripesStrength(stripesStrength);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { AssistColorBlindEffectAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Applies a gradient fade effect from one edge of the image.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass GradientFadeEffectAction extends Action {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._actionModel = { actionType: 'gradientFade' };\r\n    }\r\n    /**\r\n     * @description Sets the strength of the fade effect.\r\n     * @param {number} strength The strength of the fade effect. (Range: 0 to 100, Server default: 20)\r\n     */\r\n    strength(strength) {\r\n        this._actionModel.strength = strength;\r\n        this._strength = strength;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the mode of gradient fade.\r\n     * @param {string | Qualifiers.GradientFade} type The mode of gradient fade.\r\n     */\r\n    type(type) {\r\n        this._actionModel.type = type;\r\n        this._type = type;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the x dimension of the start point.\r\n     * @param {number | string} x The x dimension of the start point.\r\n     */\r\n    horizontalStartPoint(x) {\r\n        this._actionModel.horizontalStartPoint = x;\r\n        return this.addQualifier(new Qualifier('x', x));\r\n    }\r\n    /**\r\n     * @description Sets the y dimension of the start point.\r\n     * @param {number | string} y The y dimension of the start point.\r\n     */\r\n    verticalStartPoint(y) {\r\n        this._actionModel.verticalStartPoint = y;\r\n        return this.addQualifier(new Qualifier('y', y));\r\n    }\r\n    prepareQualifiers() {\r\n        let str = 'gradient_fade';\r\n        if (this._type) {\r\n            str += `:${this._type}`;\r\n        }\r\n        if (this._strength) {\r\n            str += `:${this._strength}`;\r\n        }\r\n        this.addQualifier(new Qualifier('e', str));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, verticalStartPoint, horizontalStartPoint, type, strength } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        verticalStartPoint && result.verticalStartPoint(verticalStartPoint);\r\n        horizontalStartPoint && result.horizontalStartPoint(horizontalStartPoint);\r\n        type && result.type(type);\r\n        strength && result.strength(strength);\r\n        return result;\r\n    }\r\n}\r\nexport { GradientFadeEffectAction };\r\n", "import { Action } from \"../../../internal/Action.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Fade out at the end of the video, use the length() method to set the time in ms for the fade to occur. (Server default: 2000)\r\n * @extends LeveledEffectAction\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass FadeOutEffectAction extends Action {\r\n    constructor(duration) {\r\n        super();\r\n        this._actionModel = { actionType: 'fadeOut' };\r\n        this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `-${duration}`]).setDelimiter(':')));\r\n        duration && (this._actionModel.length = duration);\r\n    }\r\n    /**\r\n     *\r\n     * @description Sets the duration level for the action\r\n     * @param {string | number} duration - The duration of the effect\r\n     */\r\n    duration(duration) {\r\n        this._actionModel.length = duration;\r\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `-${duration}`]).setDelimiter(':')));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { length } = actionModel;\r\n        if (length === undefined) {\r\n            return new this(1000);\r\n        }\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(length);\r\n        return result;\r\n    }\r\n}\r\nexport { FadeOutEffectAction };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\r\nimport { EffectActionWithLevel } from \"./EffectActions/EffectActionWithLevel.js\";\r\n/**\r\n * @description Applies a colorizing filter to the asset, use the methods in the class to adjust the filter\r\n * @extends EffectActionWithLevel\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass ColorizeEffectAction extends EffectActionWithLevel {\r\n    /**\r\n     * @description The color to use for colorization. Specify HTML name or RGB hex code. (Server default: gray)\r\n     * @param {string} color HTML name(red, green, etc.) or RGB hex code. (Server default: gray)\r\n     * @return {this}\r\n     */\r\n    color(color) {\r\n        this._actionModel.color = color;\r\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, level, color } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(actionType, level);\r\n        color && result.color(color);\r\n        return result;\r\n    }\r\n}\r\nexport { ColorizeEffectAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { prepareColor } from \"../../internal/utils/prepareColor.js\";\r\n/**\r\n * @description Applies a shadow filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass ShadowEffectAction extends Action {\r\n    constructor(effectType, strength) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = effectType;\r\n        this.effectType = effectType;\r\n        this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\r\n    }\r\n    /**\r\n     * @description The strength of the shadow. (Range: 0 to 100, Server default: 40)\r\n     * @param {number} strength\r\n     * @return {this}\r\n     */\r\n    strength(strength) {\r\n        this._actionModel.strength = strength;\r\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\r\n    }\r\n    /**\r\n     * @description The X offset the shadow\r\n     * @param {number | SDK.ExpressionQualifier} x\r\n     * @return {this}\r\n     */\r\n    offsetX(x) {\r\n        this._actionModel.offsetX = x;\r\n        return this.addQualifier(new Qualifier('x', new QualifierValue(x)));\r\n    }\r\n    /**\r\n     * @description The Y offset the shadow\r\n     * @param {number | SDK.ExpressionQualifier} y\r\n     * @return {this}\r\n     */\r\n    offsetY(y) {\r\n        this._actionModel.offsetY = y;\r\n        return this.addQualifier(new Qualifier('y', new QualifierValue(y)));\r\n    }\r\n    /**\r\n     * @description The color of the shadow (Server default: gray)\r\n     * @param color\r\n     * @return {this}\r\n     */\r\n    color(color) {\r\n        this._actionModel.color = color;\r\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, strength, offsetX, offsetY, color } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(actionType, strength);\r\n        offsetX && result.offsetX(offsetX);\r\n        offsetY && result.offsetY(offsetY);\r\n        color && result.color(color);\r\n        return result;\r\n    }\r\n}\r\nexport { ShadowEffectAction };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\r\n *                The class implements the Builder pattern, where strength() and preserveColor()\r\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass StyleTransfer extends Action {\r\n    /**\r\n     * The Image Source used to create the style transfer,\r\n     * Use the Image Source builder to quickly create a source:\r\n     * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/url-gen/qualifiers/sources';}\r\n     * </br>Create: `Source.image('dog')`\r\n     * @param {ImageSource} imageSource\r\n     */\r\n    constructor(imageSource) {\r\n        super();\r\n        this.imageSource = imageSource;\r\n    }\r\n    /**\r\n     * Determines the strength in which the styleTransfer is applied.\r\n     * @param {number} [effectStrength] - The strength level, 1-100, default: 100\r\n     * @return {this}\r\n     */\r\n    strength(effectStrength = null) {\r\n        this.effectStrength = effectStrength;\r\n        return this;\r\n    }\r\n    /**\r\n     * More aggressively preserves the colors of the the target photo,\r\n     * Can be used with `strength()` to enhance this behaviour\r\n     * @param {boolean} bool\r\n     * @return {this}\r\n     */\r\n    preserveColor(bool = true) {\r\n        this.preserve = bool;\r\n        return this;\r\n    }\r\n    /**\r\n     * The `build` phase of the Action, used internally to concat all the options received into a single string.\r\n     * The result of this method is the toString() of the imageLayer provided in the constructor.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        const NAME = 'style_transfer';\r\n        const PRES = this.preserve ? 'preserve_color' : null;\r\n        const STRENGTH = this.effectStrength;\r\n        // Create the style effect\r\n        const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH]));\r\n        // Handle the source for publicID,\r\n        const sourceOpenString = this.imageSource.getOpenSourceString('l');\r\n        // Handle source transformation\r\n        const imgTx = this.imageSource.getTransformation();\r\n        const sourceTransformation = imgTx ? imgTx.toString() : '';\r\n        return [\r\n            sourceOpenString,\r\n            sourceTransformation,\r\n            `${styleEffect},fl_layer_apply`\r\n        ].filter((a) => a).join('/');\r\n    }\r\n}\r\nexport { StyleTransfer };\r\n", "import { LeveledEffectAction } from \"./EffectActions/LeveledEffectAction.js\";\r\n/**\r\n * @description Applies an ordered dither filter to the image.\r\n * @extends LeveledEffectAction\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass DitherEffectAction extends LeveledEffectAction {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._actionModel = { actionType: 'dither' };\r\n    }\r\n    /**\r\n     *\r\n     * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\r\n     * @return {this}\r\n     */\r\n    type(ditherType) {\r\n        this._actionModel.type = ditherType;\r\n        const qualifierEffect = this.createEffectQualifier(this.effectType, ditherType);\r\n        this.addQualifier(qualifierEffect);\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, type } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(actionType);\r\n        type && result.type(type);\r\n        return result;\r\n    }\r\n}\r\nexport { DitherEffectAction };\r\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\r\n/**\r\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\r\n * @extends LeveledEffectAction\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass DeshakeEffectAction extends LeveledEffectAction {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._actionModel = { actionType: 'deshake' };\r\n    }\r\n    /**\r\n     * The maximum number of pixels in the horizontal and vertical direction that will be addressed. (Possible values: 16, 32, 48, 64. Server default: 16)\r\n     * @param value Possible values: 16, 32, 48, 64.  Server default: 16.\r\n     */\r\n    shakeStrength(value) {\r\n        this._actionModel.pixels = value;\r\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\r\n        this.addQualifier(qualifierEffect);\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { actionType, pixels } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(actionType, pixels);\r\n        return result;\r\n    }\r\n}\r\nexport { DeshakeEffectAction };\r\n", "import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { Action } from \"../../../internal/Action.js\";\r\nimport { custom, faces } from \"../../../qualifiers/region.js\";\r\n/**\r\n * @description The Action class of the pixelate Builder\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass Pixelate extends Action {\r\n    constructor(squareSize) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._squareSize = squareSize;\r\n        this._actionModel.actionType = 'pixelate';\r\n        this._actionModel.squareSize = squareSize;\r\n    }\r\n    /**\r\n     * @description Specifies the region to piexlate.\r\n     * @param {NamedRegion} pixelateRegion\r\n     */\r\n    region(pixelateRegion) {\r\n        this._region = pixelateRegion;\r\n        this._actionModel.region = { regionType: this._region.regionType };\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the squareSize of the pixelate effect.\r\n     * @param {number | string} squareSize\r\n     */\r\n    squareSize(squareSize) {\r\n        this._squareSize = squareSize;\r\n        this._actionModel.squareSize = squareSize;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        /*\r\n         * pixelate with region is a unique object in this codebase.\r\n         * On top of pixelate being an Action with Qualifiers,\r\n         * it also accepts a Qualifier called Region.\r\n         *\r\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\r\n         * The existence of Region changes the output of pixelate in non traditional ways\r\n         * which forced this relatively ad-hoc implementation.\r\n         *\r\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\r\n         * This happens naturally in the Action class,\r\n         * however since we're dealing with two levels of qualifiers (pixelate and Region),\r\n         * these need to be merged.\r\n         *\r\n         * This function will merge the Region qualifiers with pixelate\r\n         * and add all needed implicit qualifiers (like g_ocr_text).\r\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\r\n         */\r\n        const str = this._squareSize ? `:${this._squareSize}` : '';\r\n        if ('_region' in this) {\r\n            const qualifiers = this._region.qualifiers;\r\n            // Copy qualifiers from the region \"action\" to the pixelate action\r\n            qualifiers.forEach((q) => this.addQualifier(q));\r\n            if (this._region.regionType === 'custom') {\r\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\r\n            }\r\n            if (this._region.regionType === 'ocr_text') {\r\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\r\n                this.addQualifier(new Qualifier('g', `ocr_text`));\r\n            }\r\n            if (this._region.regionType === 'faces') {\r\n                this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\r\n            }\r\n        }\r\n        else {\r\n            this.addQualifier(new Qualifier('e', `pixelate${str}`));\r\n        }\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { region, squareSize } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(squareSize);\r\n        squareSize && result.squareSize(squareSize);\r\n        if (region && region.regionType === 'faces') {\r\n            result.region(faces());\r\n        }\r\n        if (region && region.regionType === 'custom') {\r\n            result.region(custom());\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { Pixelate };\r\n", "import { LeveledEffectAction } from \"./LeveledEffectAction.js\";\r\n/**\r\n * @description A class for all effects that include a strength method\r\n * @extends {Actions.Effect.LeveledEffectAction}\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass EffectActionWithStrength extends LeveledEffectAction {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.LEVEL_NAME = 'strength';\r\n    }\r\n    strength(value) {\r\n        return this.setLevel(value);\r\n    }\r\n}\r\nexport { EffectActionWithStrength };\r\n", "import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\r\n/**\r\n * @description Converts the image to black and white.\r\n * @extends LeveledEffectAction\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass BlackwhiteEffectAction extends LeveledEffectAction {\r\n    threshold(value) {\r\n        return this.setLevel(value);\r\n    }\r\n}\r\nexport { BlackwhiteEffectAction };\r\n", "import { Action } from \"../../../internal/Action.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Fade out at the end of the video, use the length() method to set the time in ms for the fade to occur. (Server default: 2000)\r\n * @extends Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass FadeInEffectAction extends Action {\r\n    constructor(duration) {\r\n        super();\r\n        this._actionModel = { actionType: 'fadeIn' };\r\n        this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `${duration}`]).setDelimiter(':')));\r\n        duration && (this._actionModel.length = duration);\r\n    }\r\n    /**\r\n     *\r\n     * @description Sets the duration level for the action\r\n     * @param {string | number} duration - The duration of the effect\r\n     */\r\n    duration(duration) {\r\n        this._actionModel.length = duration;\r\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['fade', `${duration}`]).setDelimiter(':')));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { length } = actionModel;\r\n        if (length === undefined) {\r\n            return new this(1000);\r\n        }\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(length);\r\n        return result;\r\n    }\r\n}\r\nexport { FadeInEffectAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description A class that defines how to remove the background of an asset\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass RemoveBackgroundAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this.overwriteQualifier();\r\n    }\r\n    /**\r\n     * @description Everytime this method is called, it will overwrite the e_bgremoval qualifier with new values\r\n     * @private\r\n     */\r\n    overwriteQualifier() {\r\n        const value = ['bgremoval', this._screen ? 'screen' : '', (this._colorToRemove || '').replace('#', '')];\r\n        return this.addQualifier(new Qualifier('e', new QualifierValue(value)));\r\n    }\r\n    /**\r\n     * @description The strength of the shadow. (Range: 0 to 100, Server default: 40)\r\n     * @param {number} useScreen Boolean, defaults to true\r\n     * @return {this}\r\n     */\r\n    screen(useScreen = true) {\r\n        this._screen = useScreen;\r\n        return this.overwriteQualifier();\r\n    }\r\n    /**\r\n     * @description The color to remove from the background\r\n     * @param {SystemColors} color\r\n     * @return {this}\r\n     */\r\n    colorToRemove(color) {\r\n        this._colorToRemove = color;\r\n        return this.overwriteQualifier();\r\n    }\r\n}\r\nexport { RemoveBackgroundAction };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\n/**\r\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\r\n * @extends SDK.Action\r\n * @memberOf {Actions.Effect}\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass ThemeEffect extends Action {\r\n    constructor(color) {\r\n        super();\r\n        this.effectName = 'theme';\r\n        this.color = color;\r\n    }\r\n    /**\r\n     * @description The sensitivity to photographic elements of an image.\r\n     *              A value of 0 treats the whole image as non-photographic.\r\n     *              A value of 200 treats the whole image as photographic, so no theme change is applied.\r\n     * @param {number} photosensitivity\r\n     * @return {this}\r\n     */\r\n    photosensitivity(photosensitivity) {\r\n        this._photosensitivity = photosensitivity;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const sensitivity = this._photosensitivity ? `:photosensitivity_${this._photosensitivity}` : '';\r\n        // Replace # in hex colors (#fff -> fff)\r\n        const val = `${this.effectName}:color_${this.color.replace('#', '')}${sensitivity}`;\r\n        this.addQualifier(new Qualifier('e', new QualifierValue(val)));\r\n        return;\r\n    }\r\n}\r\nexport { ThemeEffect };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description A class that defines how to remove the background of an asset\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass BackgroundRemoval extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel.actionType = \"backgroundRemoval\";\r\n    }\r\n    fineEdges(value = true) {\r\n        this._fineEdges = value;\r\n        this._actionModel.fineEdges = this._fineEdges;\r\n        return this;\r\n    }\r\n    hints(...values) {\r\n        if (values.length === 1 && Array.isArray(values[0])) {\r\n            // Handle the case of a single array argument\r\n            this._hints = values[0];\r\n        }\r\n        else if (values.length) {\r\n            this._hints = values;\r\n        }\r\n        if (this._hints) {\r\n            this._actionModel.hints = this._hints;\r\n        }\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        var _a;\r\n        let str = \"background_removal\";\r\n        const params = [];\r\n        if (this._fineEdges !== undefined) {\r\n            params.push(new QualifierValue(`fineedges_${this._fineEdges ? \"y\" : \"n\"}`).toString());\r\n        }\r\n        if ((_a = this._hints) === null || _a === void 0 ? void 0 : _a.length) {\r\n            params.push(new QualifierValue(`hints_(${this._hints.join(\";\")})`).toString());\r\n        }\r\n        if (params.length > 0) {\r\n            str += `:${params.join(\";\")}`;\r\n        }\r\n        this.addQualifier(new Qualifier(\"e\", str));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { fineEdges, hints } = actionModel;\r\n        const result = new this();\r\n        if (fineEdges !== undefined) {\r\n            result.fineEdges(fineEdges);\r\n        }\r\n        if (hints === null || hints === void 0 ? void 0 : hints.length) {\r\n            result.hints(hints);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { BackgroundRemoval };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Adds a shadow to the object in an image.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass DropShadow extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'dropshadow';\r\n    }\r\n    /**\r\n     * @description\r\n     * The direction the light is coming from to cause the shadow effect. (Range: 0 to 360, Server default: 215)\r\n     * @param {number} azimuth\r\n     * @return {this}\r\n     */\r\n    azimuth(azimuth) {\r\n        this._actionModel.azimuth = azimuth;\r\n        this._azimuth = azimuth;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description\r\n     * The height of the light source above the 'ground' to cause the shadow effect. (Range: 0 to 90, Server default: 45)\r\n     * @param {number} elevation\r\n     * @return {this}\r\n     */\r\n    elevation(elevation) {\r\n        this._actionModel.elevation = elevation;\r\n        this._elevation = elevation;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description\r\n     * The spread of the light source. A small number means 'point' light. A larger number means 'area' light. (Range: 0 to 100, Server default: 50)\r\n     * @param {number} spread\r\n     * @return {this}\r\n     */\r\n    spread(spread) {\r\n        this._actionModel.spread = spread;\r\n        this._spread = spread;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const paramNames = ['azimuth', 'elevation', 'spread'];\r\n        const paramValues = [this._azimuth, this._elevation, this._spread];\r\n        const paramString = paramValues.map((value, index) => value !== undefined ? `${paramNames[index]}_${value}` : '').filter(Boolean).join(';');\r\n        this.addQualifier(new Qualifier('e', new QualifierValue(['dropshadow', paramString]).setDelimiter(':')));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { azimuth, elevation, spread } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        azimuth && result.azimuth(azimuth);\r\n        elevation && result.elevation(elevation);\r\n        spread && result.spread(spread);\r\n        return result;\r\n    }\r\n}\r\nexport { DropShadow };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { RectangleRegion } from \"../../qualifiers/region/RectangleRegion.js\";\r\n/**\r\n * @description A class that defines how to remove objects from an asset using Generative AI\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass GenerativeRemove extends Action {\r\n    constructor() {\r\n        super();\r\n        this._prompts = [];\r\n        this._regions = [];\r\n        this._detectMultiple = false;\r\n        this._removeShadow = false;\r\n        this._actionModel.actionType = \"generativeRemove\";\r\n    }\r\n    prompt(...value) {\r\n        this._prompts = value;\r\n        if (this._prompts.length > 0) {\r\n            this._actionModel.prompts = this._prompts;\r\n        }\r\n        return this;\r\n    }\r\n    region(...value) {\r\n        this._regions = value;\r\n        if (this._regions.length > 0) {\r\n            this._actionModel.regions = this._regions.map((region) => region.toJson());\r\n        }\r\n        return this;\r\n    }\r\n    detectMultiple(value = true) {\r\n        this._detectMultiple = value;\r\n        if (this._detectMultiple) {\r\n            this._actionModel.detectMultiple = this._detectMultiple;\r\n        }\r\n        return this;\r\n    }\r\n    removeShadow(value = true) {\r\n        this._removeShadow = value;\r\n        if (this._removeShadow) {\r\n            this._actionModel.removeShadow = this._removeShadow;\r\n        }\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\r\n        switch (true) {\r\n            case this._prompts.length > 0: {\r\n                qualifierValue.addValue(this.preparePromptValue());\r\n                break;\r\n            }\r\n            case this._regions.length > 0: {\r\n                qualifierValue.addValue(this.prepareRegionValue());\r\n                break;\r\n            }\r\n        }\r\n        if (this._detectMultiple) {\r\n            qualifierValue.addValue(\"multiple_true\");\r\n        }\r\n        if (this._removeShadow) {\r\n            qualifierValue.addValue(\"remove-shadow_true\");\r\n        }\r\n        this.addQualifier(new Qualifier(\"e\", `gen_remove:${qualifierValue.toString()}`));\r\n    }\r\n    preparePromptValue() {\r\n        const prompts = this._prompts;\r\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\r\n        if (prompts.length === 1) {\r\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\r\n        }\r\n        else {\r\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\r\n        }\r\n        return qualifierValue;\r\n    }\r\n    prepareRegionValue() {\r\n        const regions = this._regions;\r\n        const qualifierValue = new QualifierValue();\r\n        if (regions.length === 1) {\r\n            const singleRegion = regions[0].toString();\r\n            qualifierValue.addValue(`region_${singleRegion}`);\r\n        }\r\n        else {\r\n            const regionList = regions.map((region) => region.toString());\r\n            qualifierValue.addValue(`region_(${regionList.join(\";\")})`);\r\n        }\r\n        return qualifierValue;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { prompts, regions, detectMultiple, removeShadow } = actionModel;\r\n        const result = new this();\r\n        if (regions) {\r\n            result.region(...regions.map(({ x, y, width, height }) => new RectangleRegion(x, y, width, height)));\r\n        }\r\n        if (prompts) {\r\n            result.prompt(...prompts);\r\n        }\r\n        if (detectMultiple) {\r\n            result.detectMultiple(detectMultiple);\r\n        }\r\n        if (removeShadow) {\r\n            result.removeShadow(removeShadow);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { GenerativeRemove };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Uses generative AI to replace parts of your image with something else.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass GenerativeReplace extends Action {\r\n    constructor() {\r\n        super();\r\n        this._preserveGeometry = false;\r\n        this._detectMultiple = false;\r\n        this._actionModel.actionType = \"generativeReplace\";\r\n    }\r\n    from(value) {\r\n        this._from = value;\r\n        this._actionModel.from = value;\r\n        return this;\r\n    }\r\n    to(value) {\r\n        this._to = value;\r\n        this._actionModel.to = value;\r\n        return this;\r\n    }\r\n    preserveGeometry(value = true) {\r\n        this._preserveGeometry = value;\r\n        if (value) {\r\n            this._actionModel.preserveGeometry = true;\r\n        }\r\n        return this;\r\n    }\r\n    detectMultiple(value = true) {\r\n        this._detectMultiple = value;\r\n        if (this._detectMultiple) {\r\n            this._actionModel.detectMultiple = this._detectMultiple;\r\n        }\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let str = `gen_replace:from_${this._from};to_${this._to}`;\r\n        if (this._preserveGeometry) {\r\n            str += `;preserve-geometry_true`;\r\n        }\r\n        if (this._detectMultiple) {\r\n            str += `;multiple_true`;\r\n        }\r\n        this.addQualifier(new Qualifier(\"e\", str));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { from, to, preserveGeometry, detectMultiple } = actionModel;\r\n        const result = new this();\r\n        result.from(from);\r\n        result.to(to);\r\n        if (preserveGeometry) {\r\n            result.preserveGeometry();\r\n        }\r\n        if (detectMultiple) {\r\n            result.detectMultiple();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { GenerativeReplace };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description A class that defines how to recolor objects in an asset using Generative AI\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass GenerativeRecolor extends Action {\r\n    constructor(prompts, color) {\r\n        super();\r\n        this._prompts = [];\r\n        this._detectMultiple = false;\r\n        // Alias method to be backwards compatible\r\n        this.multiple = this.detectMultiple.bind(this);\r\n        this._prompts = Array.isArray(prompts) ? prompts : [prompts];\r\n        this._toColor = color;\r\n        this._actionModel.actionType = \"generativeRecolor\";\r\n        this._actionModel.prompts = this._prompts;\r\n        this._actionModel.toColor = this._toColor;\r\n    }\r\n    detectMultiple(value = true) {\r\n        this._detectMultiple = value;\r\n        if (this._detectMultiple) {\r\n            this._actionModel.detectMultiple = this._detectMultiple;\r\n        }\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\r\n        if (this._prompts.length) {\r\n            qualifierValue.addValue(this.preparePromptValue());\r\n        }\r\n        if (this._toColor) {\r\n            const formattedColor = this._toColor.match(/^#/)\r\n                ? this._toColor.substr(1)\r\n                : this._toColor;\r\n            qualifierValue.addValue(`to-color_${formattedColor}`);\r\n        }\r\n        if (this._detectMultiple) {\r\n            qualifierValue.addValue(\"multiple_true\");\r\n        }\r\n        this.addQualifier(new Qualifier(\"e\", `gen_recolor:${qualifierValue.toString()}`));\r\n    }\r\n    preparePromptValue() {\r\n        const prompts = this._prompts;\r\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\r\n        if (prompts.length === 1) {\r\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\r\n        }\r\n        else {\r\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\r\n        }\r\n        return qualifierValue;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { prompts, detectMultiple, toColor } = actionModel;\r\n        const result = new this(prompts, toColor);\r\n        if (detectMultiple) {\r\n            result.detectMultiple(detectMultiple);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { GenerativeRecolor };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { encodePromptComponent } from \"../../internal/utils/encodePromptComponents.js\";\r\n/**\r\n * @description Uses generative AI to replace background of your image with something else.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass GenerativeBackgroundReplace extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel.actionType = \"generativeBackgroundReplace\";\r\n    }\r\n    prompt(value) {\r\n        try {\r\n            this._actionModel.prompt = decodeURIComponent(value);\r\n        }\r\n        catch (_a) {\r\n            this._actionModel.prompt = value;\r\n        }\r\n        this._prompt = value;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        if (!this._prompt) {\r\n            this.addQualifier(new Qualifier(\"e\", \"gen_background_replace\"));\r\n        }\r\n        else {\r\n            this.addQualifier(new Qualifier(\"e\", `gen_background_replace:prompt_${encodePromptComponent(this._prompt)}`));\r\n        }\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { prompt } = actionModel;\r\n        const result = new this();\r\n        return result.prompt(prompt);\r\n    }\r\n}\r\nexport { GenerativeBackgroundReplace };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Extracts an area or multiple areas of an image, described in natural language.\r\n * @extends SDK.Action\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass Extract extends Action {\r\n    constructor(prompts) {\r\n        super();\r\n        this._prompts = [];\r\n        this._detectMultiple = false;\r\n        this._invert = false;\r\n        this._preserveAlpha = false;\r\n        this._actionModel.actionType = \"extract\";\r\n        this._prompts = Array.isArray(prompts) ? prompts : [prompts];\r\n        this._actionModel.prompts = this._prompts;\r\n    }\r\n    detectMultiple(value = false) {\r\n        this._detectMultiple = value;\r\n        if (this._detectMultiple) {\r\n            this._actionModel.detectMultiple = this._detectMultiple;\r\n        }\r\n        return this;\r\n    }\r\n    mode(mode) {\r\n        this._mode = mode;\r\n        this._actionModel.mode = this._mode;\r\n        return this;\r\n    }\r\n    invert(value = true) {\r\n        this._invert = value;\r\n        if (this._invert) {\r\n            this._actionModel.invert = this._invert;\r\n        }\r\n        return this;\r\n    }\r\n    preserveAlpha(value = true) {\r\n        this._preserveAlpha = value;\r\n        if (this._preserveAlpha) {\r\n            this._actionModel.preserveAlpha = this._preserveAlpha;\r\n        }\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\r\n        if (this._prompts.length) {\r\n            qualifierValue.addValue(this.preparePromptValue());\r\n        }\r\n        if (this._detectMultiple) {\r\n            qualifierValue.addValue(\"multiple_true\");\r\n        }\r\n        if (this._mode) {\r\n            qualifierValue.addValue(`mode_${this._mode}`);\r\n        }\r\n        if (this._invert) {\r\n            qualifierValue.addValue(\"invert_true\");\r\n        }\r\n        if (this._preserveAlpha) {\r\n            qualifierValue.addValue(\"preserve-alpha_true\");\r\n        }\r\n        this.addQualifier(new Qualifier(\"e\", `extract:${qualifierValue.toString()}`));\r\n    }\r\n    preparePromptValue() {\r\n        const prompts = this._prompts;\r\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\r\n        if (prompts.length === 1) {\r\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\r\n        }\r\n        else {\r\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\r\n        }\r\n        return qualifierValue;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { prompts, detectMultiple, mode, invert, preserveAlpha } = actionModel;\r\n        const result = new this(prompts);\r\n        if (detectMultiple) {\r\n            result.detectMultiple(detectMultiple);\r\n        }\r\n        if (mode) {\r\n            result.mode(mode);\r\n        }\r\n        if (invert) {\r\n            result.invert(invert);\r\n        }\r\n        if (preserveAlpha) {\r\n            result.preserveAlpha(preserveAlpha);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { Extract };\r\n", "import { BlurAction } from \"./effect/Blur.js\";\r\nimport { AccelerationEffectAction } from \"./effect/leveled/Accelerate.js\";\r\nimport { LoopEffectAction } from \"./effect/leveled/Loop.js\";\r\nimport { CartoonifyEffect } from \"./effect/Cartoonify.js\";\r\nimport { EffectOutline } from \"./effect/Outline.js\";\r\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction.js\";\r\nimport { MakeTransparentEffectAction } from \"./effect/leveled/MakeTransparent.js\";\r\nimport { VectorizeEffectAction } from \"./effect/Vectorize.js\";\r\nimport { SimulateColorBlindEffectAction } from \"./effect/SimulateColorBlind.js\";\r\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel.js\";\r\nimport { AssistColorBlindEffectAction } from \"./effect/AssistColorBlind.js\";\r\nimport { GradientFadeEffectAction } from \"./effect/GradientFade.js\";\r\nimport { FadeOutEffectAction } from \"./effect/leveled/FadeOut.js\";\r\nimport { ColorizeEffectAction } from \"./effect/Colorize.js\";\r\nimport { ShadowEffectAction } from \"./effect/Shadow.js\";\r\nimport { StyleTransfer } from \"./effect/StyleTransfer.js\";\r\nimport { DitherEffectAction } from \"./effect/Dither.js\";\r\nimport { DeshakeEffectAction } from \"./effect/leveled/Deshake.js\";\r\nimport { Pixelate } from \"./effect/pixelate/Pixelate.js\";\r\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength.js\";\r\nimport { BlackwhiteEffectAction } from \"./effect/leveled/Blackwhite.js\";\r\nimport { FadeInEffectAction } from \"./effect/leveled/FadeIn.js\";\r\nimport { RemoveBackgroundAction } from \"./effect/RemoveBackgroundAction.js\";\r\nimport { ThemeEffect } from \"./effect/Theme.js\";\r\nimport { BackgroundRemoval } from \"./effect/BackgroundRemoval.js\";\r\nimport { DropShadow } from \"./effect/DropShadow.js\";\r\nimport { GenerativeRemove } from \"./effect/GenerativeRemove.js\";\r\nimport { GenerativeReplace } from \"./effect/GenerativeReplace.js\";\r\nimport { GenerativeRecolor } from \"./effect/GenerativeRecolor.js\";\r\nimport { GenerativeBackgroundReplace } from \"./effect/GenerativeBackgroundReplace.js\";\r\nimport { Extract } from \"./effect/Extract.js\";\r\n/**\r\n * @summary action\r\n * @description Applies a blurring filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} blurLevel The strength of the blur. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.BlurAction}\r\n */\r\nfunction blur(blurLevel) {\r\n    return new BlurAction(blurLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Converts the image to gray-scale (multiple shades of gray).\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction grayscale() {\r\n    return new SimpleEffectAction(\"grayscale\");\r\n}\r\n/**\r\n * @summary action\r\n * @description Changes the color scheme of the image to sepia.\r\n * @memberOf Actions.Effect\r\n * @param {number} level The level of sepia to apply. (Range: 1 to 100, Server default: 80)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction sepia(level) {\r\n    return new EffectActionWithLevel(\"sepia\", level);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a shadow filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param shadowLevel\r\n * @return {Actions.Effect.ShadowEffectAction}\r\n */\r\nfunction shadow(shadowLevel) {\r\n    return new ShadowEffectAction(\"shadow\", shadowLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a colorizing filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} colorizeLevel The strength of the color. (Range: 0 to 100, Server default: 100)\r\n * @return {Actions.Effect.ColorizeEffectAction}\r\n */\r\nfunction colorize(colorizeLevel) {\r\n    return new ColorizeEffectAction(\"colorize\", colorizeLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies an oilPaint filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} oilPaintLevel The strength of the effect. (Range: 0 to 100, Server default: 30)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\r\nfunction oilPaint(oilPaintLevel) {\r\n    return new EffectActionWithStrength(\"oil_paint\", oilPaintLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies an artistic filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {ArtisticFilterType | string} artisticFilterType\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction artisticFilter(artisticFilterType) {\r\n    return new SimpleEffectAction(\"art\", artisticFilterType);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a cartoonify effect to the asset.\r\n * @memberOf Actions.Effect\r\n * @param cartoonifyLevel The thickness of the lines. (Range: 0 to 100, Server default: 50)\r\n * @return {Actions.Effect.CartoonifyEffect}\r\n */\r\nfunction cartoonify(cartoonifyLevel) {\r\n    return new CartoonifyEffect(\"cartoonify\", cartoonifyLevel);\r\n}\r\n/**\r\n * @summary action\r\n * @description Adds an outline to a transparent image. For examples, see the Image Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.EffectOutline}\r\n */\r\nfunction outline() {\r\n    return new EffectOutline();\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a complex deep learning neural network algorithm that extracts artistic styles from a source image and applies them to the content of a target photograph.<br/>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/neural_artwork_style_transfer_addon|Neural Artwork Style Transfer}\r\n * @memberOf Actions.Effect\r\n * @param {ImageSource} imageSource `import {image} from '@cloudinary/url-gen/qualifiers/sources`\r\n * @return {Actions.Effect.StyleTransfer}\r\n */\r\nfunction styleTransfer(imageSource) {\r\n    return new StyleTransfer(imageSource);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Causes a video clip to play forwards and then backwards.\r\n * Use in conjunction with trimming parameters ('duration', 'start_offset', or 'end_offset') and the 'loop' effect to deliver a classic (short, repeating) boomerang clip.<br/>\r\n * For details and examples, see 'Create a boomerang video clip' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction boomerang() {\r\n    return new SimpleEffectAction(\"boomerang\");\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Removes red eyes with the Advanced Facial Attribute Detection add-on.\r\n * For details, see the Advanced Facial Attribute Detection add-on documentation.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction advancedRedEye() {\r\n    return new SimpleEffectAction(\"adv_redeye\");\r\n}\r\n/**\r\n * @summary action\r\n * @description Converts the image to black and white.\r\n * @memberOf Actions.Effect\r\n * @param {number | string} level The balance between black (100) and white (0). (Range: 0 to 100, Server default: 50)\r\n * @return {Actions.Effect.BlackwhiteEffectAction}\r\n */\r\nfunction blackwhite(level) {\r\n    return new BlackwhiteEffectAction(\"blackwhite\", level);\r\n}\r\n/**\r\n * @summary action\r\n * @description Negates the image colors (negative).\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction negate() {\r\n    return new SimpleEffectAction(\"negate\");\r\n}\r\n/**\r\n * @summary action\r\n * @description Removes red eyes in the image.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction redEye() {\r\n    return new SimpleEffectAction(\"redeye\");\r\n}\r\n/**\r\n * @summary action\r\n * @description Plays the video or audio file in reverse.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction reverse() {\r\n    return new SimpleEffectAction(\"reverse\");\r\n}\r\n/**\r\n * @summary action\r\n * @description Changes the speed of the video playback.\r\n * @memberOf Actions.Effect\r\n * @param {number} speedIncreasePercent The percentage change of speed. Positive numbers speed up the playback, negative numbers slow down the playback (Range: -50 to 100, Server default: 0)\r\n * @return {Actions.Effect.AccelerationEffectAction}\r\n */\r\nfunction accelerate(speedIncreasePercent) {\r\n    return new AccelerationEffectAction(speedIncreasePercent);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Fade in at the beginning of the video.\r\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\r\n * @return {Actions.Effect.FadeInEffectAction}\r\n */\r\nfunction fadeIn(fadeLength) {\r\n    return new FadeInEffectAction(fadeLength);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Fade out at the end of the video.\r\n * For details and examples, see 'Fade in and out' in the Video Transformations guide.\r\n * @memberOf Actions.Effect\r\n * @param {number} fadeLength The time in ms for the fade to occur. (Server default: 2000)\r\n * @return {Actions.Effect.FadeoutEffectAction}\r\n */\r\nfunction fadeOut(fadeLength) {\r\n    return new FadeOutEffectAction(fadeLength);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Delivers a video or animated GIF that contains additional loops of the video/GIF.\r\n * The total number of iterations is the number of additional loops plus one. <br/>\r\n * For animated GIFs only, you can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\r\n * @memberOf Actions.Effect\r\n * @param {number} additionalLoops The additional number of times to play the video or animated GIF.\r\n * @return {Actions.Effect.LoopEffectAction}\r\n */\r\nfunction loop(additionalLoops) {\r\n    return new LoopEffectAction(\"loop\", additionalLoops);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Makes the background of the image transparent (or solid white for formats that do not support transparency).\r\n * The background is determined as all pixels that resemble the pixels on the edges of the image.\r\n *\r\n * @memberOf Actions.Effect\r\n * @param {number} tolerance The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\r\n * @return {Actions.Effect.MakeTransparentEffectAction}\r\n */\r\nfunction makeTransparent(tolerance) {\r\n    return new MakeTransparentEffectAction(\"make_transparent\", tolerance);\r\n}\r\n/**\r\n * @summary action\r\n * @description Adds visual noise to the video, visible as a random flicker of \"dots\" or \"snow\".\r\n * @memberOf Actions.Effect\r\n * @param {number} percentage The percent of noise to apply. (Range: 0 to 100 Server default: 0)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction noise(percentage) {\r\n    return new EffectActionWithLevel(\"noise\", percentage);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a vignette effect.\r\n * @memberOf Actions.Effect\r\n * @param {number} strength The strength of the vignette. (Range: 0 to 100, Server default: 20)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\r\nfunction vignette(strength) {\r\n    return new EffectActionWithStrength(\"vignette\", strength);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Applies an ordered dither filter to the image.\r\n * Use the constants defined in {@link Qualifiers.Dither|@cloudinary/url-gen/qualifiers/dither} for ditherType.\r\n * @memberOf Actions.Effect\r\n * @param {Qualifiers.Dither} ditherType - The dither type applied to the image\r\n * @return {Actions.Effect.DitherEffectAction}\r\n */\r\nfunction dither(ditherType) {\r\n    return new DitherEffectAction(\"ordered_dither\", ditherType);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Vectorizes the image.\r\n * Notes:\r\n * To deliver the image as a vector image, make sure to change the format (or URL extension) to a vector format, such as SVG.</br>\r\n * However, you can also deliver in a raster format if you just want to get the 'vectorized' graphic effect.</br>\r\n * Large images are scaled down to 1000 pixels in the largest dimension before vectorization.\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.VectorizeEffectAction}\r\n */\r\nfunction vectorize() {\r\n    return new VectorizeEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Applies a gradient fade effect from one edge of the image.\r\n * Use .x() or .y() to indicate from which edge to fade and how much of the image should be faded.\r\n * Values of x and y can be specified as a percentage (Range: 0.0 to 1.0), or in pixels (integer values). <br/>\r\n * Positive values fade from the top (y) or left (x). Negative values fade from the bottom (y) or right (x). <br/>\r\n * By default, the gradient is applied to the top 50% of the image (y = 0.5).<br/>\r\n * Only one direction can be specified but the fade can be applied symmetrically using the mode parameter. </br>\r\n * To apply different amounts of fade to multiple edges, use chained fade effects.\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.GradientFadeEffectAction}\r\n */\r\nfunction gradientFade() {\r\n    return new GradientFadeEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Applies stripes to the image to help people with common color-blind conditions to differentiate between colors that are similar for them.</br>\r\n * You can replace colors using the xRay() method of the \\Cloudinary\\Transformation\\AssistColorBlind class.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.AssistColorBlindEffectAction}\r\n */\r\nfunction assistColorBlind() {\r\n    return new AssistColorBlindEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Simulates the way an image would appear to someone with the specified color blind condition. </br>\r\n * For a list of supported color blind conditions see {@link Qualifiers.SimulateColorBlindValues| types of color blindness} for possible values\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimulateColorBlindEffectAction}\r\n */\r\nfunction simulateColorBlind() {\r\n    return new SimulateColorBlindEffectAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description Removes small motion shifts from the video. with a maximum extent of movement in the horizontal and vertical direction of 32 pixels\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.DeshakeEffectAction}\r\n */\r\nfunction deshake(pixels) {\r\n    return new DeshakeEffectAction(\"deshake\", pixels);\r\n}\r\n/**\r\n * @summary action\r\n * @description Supports the concatenation of videos with a custom transition by including a transition video as an\r\n * additional layer and specifying the transition effect\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction transition() {\r\n    return new SimpleEffectAction(\"transition\");\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a pixelatering filter to the asset.\r\n * @memberOf Actions.Effect\r\n * @param {number} squareSize The squareSize in the pixelation. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.Pixelate}\r\n */\r\nfunction pixelate(squareSize) {\r\n    return new Pixelate(squareSize);\r\n}\r\n/**\r\n * @summary action\r\n * @description Makes the background of an image transparent (or solid white for JPGs).</br>\r\n *              Use when the background is a uniform color.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_bgremoval|Background Removal}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.RemoveBackgroundAction}\r\n */\r\nfunction removeBackground() {\r\n    return new RemoveBackgroundAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description Uses the Cloudinary AI Background Removal add-on to make the background of an image transparent.</br>\r\n *              When combined with other transformations, this effect must be specified in the first component.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_background_removal|Background Removal}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.BackgroundRemoval}\r\n */\r\nfunction backgroundRemoval() {\r\n    return new BackgroundRemoval();\r\n}\r\n/**\r\n * @summary action\r\n * @description Adds a shadow to the object in an image.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_dropshadow|Drop Shadow}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.DropShadow}\r\n */\r\nfunction dropShadow() {\r\n    return new DropShadow();\r\n}\r\n/**\r\n * @summary action\r\n * @description Remove objects from an asset using Generative AI\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_remove|Generative Remove}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.GenerativeRemove}\r\n */\r\nfunction generativeRemove() {\r\n    return new GenerativeRemove();\r\n}\r\n/**\r\n * @summary action\r\n * @description Uses generative AI to replace parts of your image with something else.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_replace|Generative Replace}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.GenerativeReplace}\r\n */\r\nfunction generativeReplace() {\r\n    return new GenerativeReplace();\r\n}\r\n/**\r\n * @summary action\r\n * @description Uses generative AI to replace background of your image with something else.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_background_replace|Generative Background Replace}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.GenerativeBackgroundReplace}\r\n */\r\nfunction generativeBackgroundReplace() {\r\n    return new GenerativeBackgroundReplace();\r\n}\r\n/**\r\n * @summary action\r\n * @description Extracts an area or multiple areas of an image, described in natural language.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_extract|Extract}\r\n *\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.Extract}\r\n */\r\nfunction extract(prompts) {\r\n    return new Extract(prompts);\r\n}\r\n/**\r\n * @summary action\r\n * @description Uses generative AI to recolor objects from your image.\r\n *              {@link https://cloudinary.com/documentation/transformation_reference#e_gen_recolor|Generative Recolor}\r\n * @param {string | string[]} prompts\r\n * @param {SystemColors} color\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.GenerativeRecolor}\r\n */\r\nfunction generativeRecolor(prompts, color) {\r\n    return new GenerativeRecolor(prompts, color);\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Uses generative AI to restore details in poor quality images\r\n * or images that may have become degraded through repeated processing and compression.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction generativeRestore() {\r\n    return new SimpleEffectAction(\"gen_restore\");\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Uses AI-based prediction to add fine detail while upscaling small images.\r\n * This 'super-resolution' feature scales each dimension by four, multiplying the total number of pixels by 16.\r\n * @memberOf Actions.Effect\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction upscale() {\r\n    return new SimpleEffectAction(\"upscale\");\r\n}\r\n/**\r\n *\r\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\r\n * @param {SystemColors} color\r\n * @return {Actions.Effect.ThemeEffect}\r\n */\r\nfunction theme(color) {\r\n    return new ThemeEffect(color);\r\n}\r\n/**\r\n *\r\n * @description Uses AI to analyze an image and make adjustments to enhance the appeal of the image.\r\n * @return {Actions.Effect.Enhance}\r\n */\r\nfunction enhance() {\r\n    return new SimpleEffectAction(\"enhance\");\r\n}\r\n/**\r\n * @description Defines effects that you can apply to transform your assets.\r\n * @memberOf Actions\r\n * @namespace Effect\r\n * @example\r\n * <caption>An <b>extreme</b> example of using many effects on the same asset</caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * // Import everything, or just the action you need for tree-shaking purposes\r\n * import {Effect, sepia} from \"@cloudinary/url-gen/actions/effect\";\r\n * import {ArtisticFilter, alDente} from \"@cloudinary/url-gen/qualifiers/artisticFilter\";\r\n * import {ShakeStrength, pixels16} from \"@cloudinary/url-gen/qualifiers/shakeStrength\";\r\n * import {cat, dog} from \"@cloudinary/url-gen/qualifiers/ForegroundObject\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.effect(Effect.advancedRedEye())\r\n * .effect(Effect.accelerate())\r\n * .effect(Effect.accelerate(100))\r\n * .effect(Effect.accelerate().rate(5))\r\n * .effect(Effect.boomerang())\r\n * .effect(Effect.blackwhite())\r\n * .effect(Effect.blackwhite(10))\r\n * .effect(Effect.blackwhite().threshold(20))\r\n * .effect(Effect.fadeIn(100))\r\n * .effect(Effect.fadeIn().duration(5))\r\n * .effect(Effect.fadeOut(100))\r\n * .effect(Effect.fadeOut().duration(5))\r\n * .effect(Effect.grayscale())\r\n * .effect(Effect.loop())\r\n * .effect(Effect.loop(100))\r\n * .effect(Effect.loop().additionalIterations(5))\r\n * .effect(Effect.makeTransparent())\r\n * .effect(Effect.makeTransparent(100))\r\n * .effect(Effect.makeTransparent().tolerance(5))\r\n * .effect(Effect.makeTransparent().tolerance(5).colorToReplace('red'))\r\n * .effect(Effect.noise())\r\n * .effect(Effect.noise(100))\r\n * .effect(Effect.noise().level(5))\r\n * .effect(Effect.negate())\r\n * .effect(Effect.reverse())\r\n * .effect(Effect.redEye())\r\n * .effect(Effect.sepia())\r\n * .effect(Effect.sepia(100))\r\n * .effect(Effect.sepia().level(5))\r\n * .effect(Effect.vignette())\r\n * .effect(Effect.vignette(100))\r\n * .effect(Effect.vignette().strength(5))\r\n * .effect(Effect.deshake())\r\n * .effect(Effect.deshake(10))\r\n * .effect(Effect.artisticFilter(alDente())\r\n * .effect(Effect.deshake().shakeStrength(pixels16()))\r\n * .effect(Effect.backgroundRemoval().fineEdges(true).hints(cat(), dog())\r\n * .effect(Effect.generativeRemove().prompt(\"red car\").detectMultiple())\r\n * .effect(Effect.generativeRemove().region({x: 20, y: 200, width: 100, height: 100}))\r\n * .effect(Effect.generativeReplace().from(\"ceiling\").to(\"sunny sky\").preserveGeometry(true))\r\n */\r\nconst Effect = {\r\n    pixelate: pixelate,\r\n    deshake: deshake,\r\n    boomerang: boomerang,\r\n    advancedRedEye: advancedRedEye,\r\n    blackwhite,\r\n    negate: negate,\r\n    redEye: redEye,\r\n    reverse: reverse,\r\n    accelerate: accelerate,\r\n    fadeIn: fadeIn,\r\n    fadeOut: fadeOut,\r\n    loop: loop,\r\n    makeTransparent: makeTransparent,\r\n    noise: noise,\r\n    vignette: vignette,\r\n    blur: blur,\r\n    grayscale: grayscale,\r\n    sepia: sepia,\r\n    shadow: shadow,\r\n    colorize: colorize,\r\n    oilPaint: oilPaint,\r\n    artisticFilter: artisticFilter,\r\n    cartoonify: cartoonify,\r\n    outline: outline,\r\n    styleTransfer: styleTransfer,\r\n    gradientFade: gradientFade,\r\n    vectorize: vectorize,\r\n    assistColorBlind: assistColorBlind,\r\n    simulateColorBlind: simulateColorBlind,\r\n    transition: transition,\r\n    dither: dither,\r\n    removeBackground,\r\n    backgroundRemoval,\r\n    dropShadow,\r\n    generativeRemove,\r\n    generativeReplace,\r\n    generativeBackgroundReplace,\r\n    generativeRecolor,\r\n    generativeRestore,\r\n    upscale,\r\n    theme,\r\n    enhance,\r\n    extract\r\n};\r\nexport { Effect, pixelate, deshake, boomerang, advancedRedEye, blackwhite, negate, redEye, reverse, accelerate, fadeIn, fadeOut, loop, makeTransparent, noise, vignette, blur, grayscale, sepia, shadow, colorize, oilPaint, artisticFilter, cartoonify, outline, styleTransfer, gradientFade, vectorize, assistColorBlind, simulateColorBlind, transition, dither, removeBackground, backgroundRemoval, dropShadow, generativeRemove, generativeReplace, generativeBackgroundReplace, generativeRecolor, generativeRestore, upscale, theme, enhance, extract };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nconst QUALIFIER_KEY = 'a';\r\n/**\r\n * @description Rotates or flips an image or video.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#rotating_images|Rotating images}\r\n * {@link https://cloudinary.com/documentation/video_effects_and_enhancements#rotating_videos|Rotating videos}\r\n * @extends SDK.Action\r\n * @memberOf Actions.Rotate\r\n * @see Visit {@link Actions.Rotate|Rotate} for an example\r\n */\r\nclass RotateAction extends Action {\r\n    constructor(angle) {\r\n        super();\r\n        this._actionModel = {};\r\n        this.addQualifier(new Qualifier(QUALIFIER_KEY, angle));\r\n        if (angle) {\r\n            this._actionModel.actionType = 'rotateByAngle';\r\n            this._actionModel.angle = angle;\r\n        }\r\n    }\r\n    /**\r\n     * @description Rotates an asset using a defined mode.\r\n     * @param {Qualifiers.RotationMode | RotationModeType | string} rotationMode\r\n     * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\r\n     * possible values\r\n     * @return {this}\r\n     */\r\n    mode(rotationMode) {\r\n        this._actionModel.actionType = 'rotateByMode';\r\n        this._actionModel.mode = rotationMode;\r\n        return this.addValueToQualifier(QUALIFIER_KEY, rotationMode);\r\n    }\r\n    /**\r\n     * @description Rotates an asset by the specified degrees.\r\n     * @param {number} degrees rotation in degrees e.g 90, 45, 33\r\n     * @return {this}\r\n     */\r\n    angle(degrees) {\r\n        this._actionModel.actionType = 'rotateByAngle';\r\n        this._actionModel.angle = degrees;\r\n        return this.addValueToQualifier(QUALIFIER_KEY, degrees);\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { angle, mode } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = mode ? new this().mode(mode) : new this(angle);\r\n        return result;\r\n    }\r\n}\r\nexport default RotateAction;\r\n", "/**\r\n * Rotates or flips an image or video by the specified number of degrees, or automatically (images only) according to its orientation or available metadata.\r\n * @memberOf Actions\r\n * @namespace Rotate\r\n *\r\n * @example\r\n * <caption>Rotate by mode</caption>\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {mode, byAngle} from \"@cloudinary/url-gen/actions/rotate\";\r\n * import {autoLeft} from \"@cloudinary/url-gen/qualifiers/rotationMode\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * // Rotate by mode\r\n * image.rotate(mode(autoLeft());\r\n *\r\n * // Rotate by angle\r\n * image.rotate(byAngle(90));\r\n *\r\n * image.toString();\r\n */\r\nimport RotateAction from \"./rotate/RotateAction.js\";\r\n/**\r\n * @summary action\r\n * @description Rotate an image by using a rotationMode\r\n * @param {RotationModeType|string} rotationMode\r\n * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\r\n * possible values\r\n * @memberOf Actions.Rotate\r\n * @return {Actions.Rotate.RotateAction}\r\n */\r\nfunction mode(rotationMode) {\r\n    return new RotateAction().mode(rotationMode);\r\n}\r\n/**\r\n * @summary action\r\n * @description Rotate an image by the given degrees.\r\n * @param {number} angle Given degrees. (Range: 0 to 360, Default: 0).\r\n * @return {Actions.Rotate.RotateAction}\r\n * @memberOf Actions.Rotate\r\n */\r\nfunction byAngle(angle) {\r\n    return new RotateAction(angle);\r\n}\r\nconst Rotate = { byAngle, mode };\r\nexport { Rotate, byAngle, mode };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Adjusts the fill light and blends the result with the original image.\r\n * @memberOf Actions.Adjust\r\n * @extends SDK.Action\r\n */\r\nclass FillLightAction extends Action {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * @description Sets the level of adjustment\r\n     * @param {number} lvl How much to blend the adjusted fill light, where 0 means only use the original and 100 means only use the adjusted fill light result. (Range: 0 to 100, Server default: 100)\r\n     */\r\n    blend(blend) {\r\n        this.lvl = blend;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the level of the bias\r\n     * @param {number} biasLvl The bias to apply to the fill light effect (Range: -100 to 100, Server default: 0).\r\n     */\r\n    bias(biasLvl) {\r\n        this.biasLvl = biasLvl;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue(['fill_light', this.lvl, this.biasLvl]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\nexport { FillLightAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @description Converts the colors of every pixel in an image based on the supplied color matrix, in which the value of each color channel is calculated based on the values from all other channels (e.g. a 3x3 matrix for RGB, a 4x4 matrix for RGBA or CMYK, etc).<br/>\r\n * For every pixel in the image, take each color channel and adjust its value by the specified values of the matrix to get a new value.\r\n * @memberOf Actions.Adjust\r\n */\r\nclass RecolorAction extends Action {\r\n    constructor(recolorMatrix) {\r\n        super();\r\n        this.matrix = recolorMatrix;\r\n        // Turn the matrix into a flat array of values\r\n        // the values are ordered by row\r\n        // [...row1, ...row2, ...row3, ..., row(n) ]\r\n        const flat = [];\r\n        for (let row = 0; row < recolorMatrix.length; row++) {\r\n            for (let col = 0; col < recolorMatrix[row].length; col++) {\r\n                flat.push(recolorMatrix[row][col].toString());\r\n            }\r\n        }\r\n        const qualifierValue = new QualifierValue(['recolor', ...flat]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n    }\r\n}\r\nexport { RecolorAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description OpacityAction class, used to define the opacity of an asset\r\n * @memberOf Actions.Adjust\r\n * @extends SDK.Action\r\n */\r\nclass OpacityAdjustAction extends Action {\r\n    constructor(level) {\r\n        super();\r\n        this._actionModel = { actionType: 'opacity' };\r\n        this.level = level;\r\n        this._actionModel.level = level;\r\n        this.addQualifier(new Qualifier('o', level));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { level } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        return new this(level);\r\n    }\r\n}\r\nexport { OpacityAdjustAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\n/**\r\n * @description Creates the 3D_lut layer transformation\r\n * @memberOf Actions.Adjust\r\n * @extends SDK.Action\r\n */\r\nclass By3dLutAction extends Action {\r\n    constructor(publicId) {\r\n        super();\r\n        this.publicId = publicId;\r\n    }\r\n    /**\r\n     * Returns a string representation of the action\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `l_lut:${this.publicId}/fl_layer_apply`;\r\n    }\r\n}\r\nexport { By3dLutAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#e_improve|Image improvement effects}\r\n * @memberOf Actions.Adjust\r\n */\r\nclass ImproveAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = { actionType: 'improve' };\r\n    }\r\n    /**\r\n     *\r\n     * @description The improve mode.\r\n     * @param {Qualifiers.ImproveMode | string} value\r\n     */\r\n    mode(value) {\r\n        this.modeValue = value;\r\n        this._actionModel.mode = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\r\n     * @param {number} value\r\n     */\r\n    blend(value) {\r\n        this.blendValue = value;\r\n        this._actionModel.blend = value;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { mode, blend } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        mode && result.mode(mode);\r\n        blend && result.blend(blend);\r\n        return result;\r\n    }\r\n}\r\nexport { ImproveAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description\r\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\r\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#replace_color_effect|Replace color examples}\r\n * @memberOf Actions.Adjust\r\n */\r\nclass ReplaceColorAction extends Action {\r\n    /**\r\n     * @description Sets the target output color.\r\n     * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\r\n     */\r\n    constructor(toColor) {\r\n        super();\r\n        this.targetColor = toColor;\r\n    }\r\n    /**\r\n     * @description Sets the tolerance threshold.\r\n     * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\r\n     *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\r\n     *                                  Larger values result in replacing more colors within the image. </br>\r\n     *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\r\n     * @return {this}\r\n     */\r\n    tolerance(toleranceLevel) {\r\n        this.toleranceLevel = toleranceLevel;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the base input color to map.\r\n     * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\r\n     * @return {this}\r\n     */\r\n    fromColor(baseColor) {\r\n        this.baseColor = baseColor;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        // Target color and base color might not exist at this point (optional qualifiers)\r\n        // If they exist, ensure that any # for RGB are removed from the resulting string\r\n        const targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\r\n        const baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\r\n        const qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\nexport { ReplaceColorAction };\r\n", "import { LeveledEffectAction } from \"./LeveledEffectAction.js\";\r\n/**\r\n * @description A class for all effects that include a blendPercentage method\r\n * @extends {Actions.Effect.LeveledEffectAction}\r\n * @memberOf Actions.Effect\r\n * @see Visit {@link Actions.Effect|Effect} for an example\r\n */\r\nclass EffectActionWithBlend extends LeveledEffectAction {\r\n    blend(value) {\r\n        return this.setLevel(value);\r\n    }\r\n}\r\nexport { EffectActionWithBlend };\r\n", "import { Action } from \"../../../internal/Action.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * Enhances an image to its best visual quality with the Viesus Automatic Image Enhancement add-on.</br>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/viesus_automatic_image_enhancement_addon|Viesus Automatic Image Enhancement.}\r\n * @memberOf Actions.Adjust\r\n */\r\nclass ViesusCorrectAdjustAction extends Action {\r\n    /**\r\n     * @description Enhances the image without correcting for red eye.\r\n     */\r\n    noRedEye() {\r\n        this._noRedEye = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Applies saturation to the skin tones in the image.\r\n     * @param level The saturation level. (Range: -100 to 100, Server default: 50).\r\n     */\r\n    skinSaturation(level) {\r\n        this._skinSaturation = true;\r\n        if (level) {\r\n            this._skinSaturationLevel = level;\r\n        }\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let value = 'viesus_correct';\r\n        if (this._noRedEye) {\r\n            value += ':no_redeye';\r\n        }\r\n        if (this._skinSaturation) {\r\n            value += ':skin_saturation';\r\n            if (typeof this._skinSaturationLevel !== 'undefined') {\r\n                value += `_${this._skinSaturationLevel}`;\r\n            }\r\n        }\r\n        this.addQualifier(new Qualifier('e', value));\r\n    }\r\n}\r\nexport { ViesusCorrectAdjustAction };\r\n", "import { FillLightAction } from \"./adjust/FillLightAction.js\";\r\nimport { RecolorAction } from \"./adjust/RecolorAction.js\";\r\nimport { OpacityAdjustAction } from \"./adjust/OpacityAdjustAction.js\";\r\nimport { By3dLutAction } from \"./adjust/By3dLutAction.js\";\r\nimport { ImproveAction } from \"./adjust/ImproveAction.js\";\r\nimport { ReplaceColorAction } from \"./adjust/ReplaceColorAction.js\";\r\nimport { EffectActionWithLevel } from \"./effect/EffectActions/EffectActionWithLevel.js\";\r\nimport { EffectActionWithStrength } from \"./effect/EffectActions/EffectActionWithStrength.js\";\r\nimport { EffectActionWithBlend } from \"./effect/EffectActions/EffectActionWithBlend.js\";\r\nimport { ViesusCorrectAdjustAction } from \"./adjust/simple/ViesusCorrectAdjustAction.js\";\r\nimport { SimpleEffectAction } from \"./effect/EffectActions/SimpleEffectAction.js\";\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Blends an image with one or more tint colors at a specified intensity. </br>\r\n *              You can optionally equalize colors before tinting and specify gradient blend positioning per color.</br>\r\n *              <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#tint|Tint effect examples}\r\n * @param {string} value The full tint effect value, provided as a string.\r\n * @return {Actions.Effect.SimpleEffectAction}\r\n */\r\nfunction tint(value = '') {\r\n    return new SimpleEffectAction('tint', value);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Adjusts the image or video brightness.\r\n * @param {number} level The level of brightness. (Range: -99 to 100, Server default: 80)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction brightness(level) {\r\n    return new EffectActionWithLevel('brightness', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Enhances an image to its best visual quality with the Viesus Automatic Image Enhancement add-on.</br>\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/viesus_automatic_image_enhancement_addon|Viesus Automatic Image Enhancement.}\r\n * @return {Actions.Adjust.ViesusCorrectAdjustAction}\r\n */\r\nfunction viesusCorrect() {\r\n    return new ViesusCorrectAdjustAction();\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Adjusts the image's red channel.\r\n * @param {number} level The level of red. (Range: -100 to 100, Server default: 0)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction red(level) {\r\n    return new EffectActionWithLevel('red', level);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a sharpening filter to the image.\r\n * @memberOf Actions.Adjust\r\n * @param {number} strength The strength of the filter. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\r\nfunction sharpen(strength) {\r\n    return new EffectActionWithStrength('sharpen', strength);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Adjusts the color saturation.\r\n * @param {number} level The level of color saturation (Range: -100 to 100, Server default: 80).\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction saturation(level) {\r\n    return new EffectActionWithLevel('saturation', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Adjusts the image or video contrast.\r\n * @param {number} level The level of contrast. (Range: -100 to 100, Server default: 0)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction contrast(level) {\r\n    return new EffectActionWithLevel('contrast', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Adjusts the gamma level\r\n * @param {number} level The level of gamma (Range: -50 to 150, Server default: 0).\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction gamma(level) {\r\n    return new EffectActionWithLevel('gamma', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Adjusts the image's blue channel.\r\n * @param {number} level - The level of blue. (Range: -100 to 100, Server default: 0)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction blue(level) {\r\n    return new EffectActionWithLevel('blue', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Adjusts image brightness modulation in HSB to prevent artifacts in some images.\r\n * @param {number} level The level of modulation. (Range: -99 to 100, Server default: 80)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction brightnessHSB(level) {\r\n    return new EffectActionWithLevel('brightness_hsb', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description  Causes all semi-transparent pixels in an image to be either fully transparent or fully opaque.\r\n *\r\n * Each pixel with an opacity lower than the specified threshold value is set to an opacity of 0%. Each pixel with\r\n * an opacity greater than the specified threshold is set to an opacity of 100%. For example, setting\r\n * opacity_threshold:0 makes all pixels non-transparent, while opacity_threshold:100 makes all semi-transparent\r\n * pixels fully transparent. Note: This effect can be a useful solution when PhotoShop PSD files are delivered in a\r\n * format supporting partial transparency, such as PNG, and the results without this effect are not as expected.\r\n *\r\n * @param {number} level The level of the threshold. (Range: 1 to 100, Server default: 50)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction opacityThreshold(level) {\r\n    return new EffectActionWithLevel('opacity_threshold', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Adjusts the color balance and blends the result with the original image.\r\n * @param {number} blend How much to blend the adjusted color result, where 0 means only use the original and 100 means only use the adjusted color result. </br>\r\n *                                  (Range: 0 to 100, Server default: 100)\r\n * @return {Actions.Effect.EffectActionWithBlendPercentage}\r\n */\r\nfunction autoColor(blend) {\r\n    return new EffectActionWithBlend('auto_color', blend);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Adjusts the brightness and blends the result with the original image.\r\n * @param {number} blend How much to blend the adjusted brightness, where 0 means only use the original\r\n *                 and 100 means only use the adjusted brightness result.\r\n *                 (Range: 0 to 100, Server default: 100)\r\n * @return {Actions.Effect.EffectActionWithBlendPercentage}\r\n */\r\nfunction autoBrightness(blend) {\r\n    return new EffectActionWithBlend('auto_brightness', blend);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Adjusts the image's hue.\r\n * @param {number} level The level of hue. (Range: -100 to 100, Server default: 80)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction hue(level) {\r\n    return new EffectActionWithLevel('hue', level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Adjusts the image's green channel.\r\n * @param {number} level The level of green. (Range: -100 to 100, Server default: 0)\r\n * @return {Actions.Effect.EffectActionWithLevel}\r\n */\r\nfunction green(level) {\r\n    return new EffectActionWithLevel('green', level);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies an unsharp mask filter to the image.\r\n * @memberOf Actions.Adjust\r\n * @param {number} strength The strength of the filter. (Range: 1 to 2000, Server default: 100)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\r\nfunction unsharpMask(strength) {\r\n    return new EffectActionWithStrength('unsharp_mask', strength);\r\n}\r\n/**\r\n * @summary action\r\n * @description Applies a vibrance filter on the image.\r\n * @memberOf Actions.Adjust\r\n * @param {number} strength The strength of the vibrance. (Range: -100 to 100, Server default: 20)\r\n * @return {Actions.Effect.EffectActionWithStrength}\r\n */\r\nfunction vibrance(strength) {\r\n    return new EffectActionWithStrength('vibrance', strength);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Adjusts the contrast and blends the result with the original image.\r\n * @param {number} blend How much to blend the adjusted contrast, where 0 means only use the original\r\n *                 and 100 means only use the adjusted contrast result.\r\n *                (Range: 0 to 100, Server default: 100)\r\n * @return {Actions.Effect.EffectActionWithBlendPercentage}\r\n */\r\nfunction autoContrast(blend) {\r\n    return new EffectActionWithBlend('auto_contrast', blend);\r\n}\r\n/**\r\n * @summary action\r\n * @description Adjusts the opacity of the image and makes it semi-transparent.\r\n * @memberOf Actions.Adjust\r\n * @param {number} level\r\n * @return {Actions.Adjust.OpacityAdjustAction}\r\n */\r\nfunction opacity(level) {\r\n    return new OpacityAdjustAction(level);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Adjusts the image colors, contrast and brightness.\r\n * @return {Actions.Adjust.ImproveAction}\r\n */\r\nfunction improve() {\r\n    return new ImproveAction();\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description\r\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor an object in a natural way.</br>\r\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#replace_color_effect|Replace color examples}\r\n * @param {string} toColor\r\n * @return {Actions.Adjust.ReplaceColorAction}\r\n */\r\nfunction replaceColor(toColor) {\r\n    return new ReplaceColorAction(toColor);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Adjust\r\n * @description Converts the colors of every pixel in an image based on the supplied color matrix, in which the value of each color channel is calculated based on the values from all other channels (e.g. a 3x3 matrix for RGB, a 4x4 matrix for RGBA or CMYK, etc).</br>\r\n * For every pixel in the image, take each color channel and adjust its value by the specified values of the matrix to get a new value.\r\n * @param {number[][]} matrix\r\n * @return {Actions.Adjust.RecolorAction}\r\n */\r\nfunction recolor(matrix) {\r\n    return new RecolorAction(matrix);\r\n}\r\n/**\r\n * @summary action\r\n * @description Adjusts the fill light and blends the result with the original image.\r\n * @memberOf Actions.Adjust\r\n * @return {Actions.Adjust.FillLightAction}\r\n */\r\nfunction fillLight() {\r\n    return new FillLightAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description\r\n * Applies a look-up table (LUT) file to the image.</br>\r\n * The 3dl file should be pre-uploaded as a raw file\r\n *\r\n * @param {string} publicId The public ID of the LUT file.\r\n * @memberOf Actions.Adjust\r\n * @return {Actions.Adjust.By3dLutAction}\r\n */\r\nfunction by3dLut(publicId) {\r\n    return new By3dLutAction(publicId);\r\n}\r\nconst Adjust = { brightness, viesusCorrect, opacity, red, sharpen, improve, saturation,\r\n    contrast, gamma, green, blue, brightnessHSB, hue, autoBrightness, autoColor,\r\n    autoContrast, vibrance, unsharpMask, opacityThreshold, replaceColor, recolor, fillLight, by3dLut, tint };\r\nexport { Adjust, brightness, viesusCorrect, opacity, red, sharpen, improve, saturation, contrast, gamma, green, blue, brightnessHSB, hue, autoBrightness, autoColor, autoContrast, vibrance, unsharpMask, opacityThreshold, replaceColor, recolor, fillLight, by3dLut, tint };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description\r\n * Defines the mode of blending to use when overlaying an image.\r\n * Even though BlendMode is technically an actionQualifier, it implements exactly the same functionality as an action.\r\n * This is true because Position is actually compounded of multiple qualifiers\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#blending_and_masking_layers|Overlay blending effects}\r\n *\r\n * @memberOf Qualifiers.BlendMode\r\n * @extends SDK.Action\r\n */\r\nclass BlendModeQualifier extends Action {\r\n    constructor(blendMode, level) {\r\n        super();\r\n        this.addQualifier(new Qualifier('e', new QualifierValue([blendMode, level])));\r\n    }\r\n}\r\nexport { BlendModeQualifier };\r\n", "/**\r\n * Validates that given obj is an IImageSourceModel\r\n * @param obj\r\n */\r\nexport function isIImageSourceModel(obj) {\r\n    return obj && obj.sourceType === 'image';\r\n}\r\n", "/**\r\n * Validates that given obj is an IFetchSourceModel\r\n * @param obj\r\n */\r\nexport function isIFetchSourceModel(obj) {\r\n    return obj && obj.sourceType === 'fetch';\r\n}\r\n", "/**\r\n * Validates that given obj is an IImageSourceModel\r\n * @param obj\r\n */\r\nexport function isITextSourceModel(obj) {\r\n    return obj && obj.sourceType === 'text';\r\n}\r\n", "/**\r\n * Validates that given obj is an IImageSourceModel\r\n * @param obj\r\n */\r\nexport function isIAudioSourceModel(obj) {\r\n    return obj && obj.sourceType === 'audio';\r\n}\r\n", "import { isIImageSourceModel } from \"./IImageSourceModel.js\";\r\nimport { ImageSource } from \"../../qualifiers/source/sourceTypes/ImageSource.js\";\r\nimport { isIFetchSourceModel } from \"./IFetchSourceModel.js\";\r\nimport { FetchSource } from \"../../qualifiers/source/sourceTypes/FetchSource.js\";\r\nimport { VideoSource } from \"../../qualifiers/source/sourceTypes/VideoSource.js\";\r\nimport { isITextSourceModel } from \"./ITextSourceModel.js\";\r\nimport { TextSource } from \"../../qualifiers/source/sourceTypes/TextSource.js\";\r\nimport { isIAudioSourceModel } from \"./IAudioSourceModel.js\";\r\nimport { AudioSource } from \"../../qualifiers/source/sourceTypes/AudioSource.js\";\r\n/**\r\n * Create Source from given model json\r\n * @param source\r\n * @param transformationFromJson\r\n */\r\nexport function createSourceFromModel(source, transformationFromJson) {\r\n    if (isITextSourceModel(source)) {\r\n        return TextSource.fromJson(source, transformationFromJson);\r\n    }\r\n    else if (isIImageSourceModel(source)) {\r\n        return ImageSource.fromJson(source, transformationFromJson);\r\n    }\r\n    else if (isIFetchSourceModel(source)) {\r\n        return FetchSource.fromJson(source, transformationFromJson);\r\n    }\r\n    else if (isIAudioSourceModel(source)) {\r\n        return AudioSource.fromJson(source, transformationFromJson);\r\n    }\r\n    else {\r\n        return VideoSource.fromJson(source, transformationFromJson);\r\n    }\r\n}\r\n", "import { Position } from \"../../qualifiers/position.js\";\r\nimport { createGravityFromModel } from \"./createGravityFromModel.js\";\r\n/**\r\n * Create Position from given IPositionModel\r\n * @param position\r\n */\r\nexport function createPositionFromModel(position) {\r\n    const { offsetX, offsetY, tiled, allowOverflow, gravity } = position;\r\n    const result = new Position();\r\n    if (offsetX) {\r\n        result.offsetX(offsetX);\r\n    }\r\n    if (offsetY) {\r\n        result.offsetY(offsetY);\r\n    }\r\n    if (tiled) {\r\n        result.tiled();\r\n    }\r\n    if (allowOverflow != null) {\r\n        result.allowOverflow(allowOverflow);\r\n    }\r\n    if (gravity) {\r\n        result.gravity(createGravityFromModel(gravity));\r\n    }\r\n    return result;\r\n}\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Defines a video range using startOffset, endOffset, duration.\r\n * @namespace TimelinePosition\r\n * @memberOf Qualifiers\r\n */\r\n/**\r\n * TimelinePosition\r\n * @memberOf Qualifiers.TimelinePosition\r\n */\r\nclass TimelinePosition extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {};\r\n    }\r\n    /**\r\n     * @param {string | number} startOffset\r\n     */\r\n    startOffset(startOffset) {\r\n        const startOffsetQualifier = new Qualifier('so', startOffset);\r\n        this.addQualifier(startOffsetQualifier);\r\n        this._actionModel.startOffset = startOffsetQualifier.qualifierValue.toString();\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {string | number} endOffset\r\n     */\r\n    endOffset(endOffset) {\r\n        const endOffsetQualifier = new Qualifier('eo', endOffset);\r\n        this.addQualifier(endOffsetQualifier);\r\n        this._actionModel.endOffset = endOffsetQualifier.qualifierValue.toString();\r\n        return this;\r\n    }\r\n    /**\r\n     * @param {string | number} duration\r\n     */\r\n    duration(duration) {\r\n        const durationQualifier = new Qualifier('du', duration);\r\n        this.addQualifier(durationQualifier);\r\n        this._actionModel.duration = durationQualifier.qualifierValue.toString();\r\n        return this;\r\n    }\r\n}\r\nexport { TimelinePosition };\r\n", "import { TimelinePosition } from \"../../qualifiers/video/TimelinePosition.js\";\r\n/**\r\n * Create TimelinePosition from given ITimelinePositionModel\r\n * @param timelinePosition\r\n */\r\nexport function createTimelinePositionFromModel(timelinePosition) {\r\n    const { startOffset, endOffset, duration } = timelinePosition;\r\n    const result = new TimelinePosition();\r\n    if (startOffset) {\r\n        result.startOffset(startOffset);\r\n    }\r\n    if (endOffset) {\r\n        result.endOffset(endOffset);\r\n    }\r\n    if (duration) {\r\n        result.duration(duration);\r\n    }\r\n    return result;\r\n}\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { BlendModeQualifier } from \"../../qualifiers/blendMode/BlendModeQualifier.js\";\r\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\r\nimport { createPositionFromModel } from \"../../internal/models/createPositionFromModel.js\";\r\nimport { createTimelinePositionFromModel } from \"../../internal/models/createTimelinePositionFromModel.js\";\r\nimport { ACTION_TYPE_TO_BLEND_MODE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf SDK\r\n * @description\r\n * A generic Layer action that can add a Video, Text or Image layer.<br>\r\n * This class can represent an overlay or an underlay.\r\n */\r\nclass LayerAction extends Action {\r\n    /**\r\n     * @description Creates a LayerAction to be used with overlays and underlays\r\n     * @param {ImageSource | TextSource | VideoSource} layerSource The Source used for the layer, use the builders provided {@link Qualifiers.Source|here}\r\n     */\r\n    constructor(layerSource) {\r\n        super();\r\n        this.source = layerSource;\r\n        this._actionModel = {\r\n            actionType: 'overlay',\r\n            source: layerSource.toJson()\r\n        };\r\n    }\r\n    /**\r\n     * @description Sets the layerType to 'u' (underlay) or 'l' (overlay).\r\n     * @param {'u' | 'l'} type\r\n     * @return {this}\r\n     */\r\n    setLayerType(type) {\r\n        this.layerType = type;\r\n        this._actionModel.actionType = type === 'u' ? 'underlay' : 'overlay';\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the timeline position of the video layer\r\n     * @param {Qualifiers.TimelinePosition} timelinePosition\r\n     * @return {this}\r\n     */\r\n    timeline(timelinePosition) {\r\n        this._timelinePosition = timelinePosition;\r\n        this._actionModel.timelinePosition = timelinePosition.toJson();\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the position of the layer\r\n     * @param {Qualifiers.Position} position\r\n     * @return {this}\r\n     */\r\n    position(position) {\r\n        this._position = position;\r\n        this._actionModel.position = position.toJson();\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Specifies how to blend the image overlay with the base overlay\r\n     * @param {Qualifiers.BlendMode|BlendModeType} blendMode\r\n     * @return {this}\r\n     */\r\n    blendMode(blendMode) {\r\n        this._blendMode = blendMode;\r\n        const [mode, level] = `${blendMode}`.replace('e_', '').split(\":\");\r\n        if (mode === 'anti_removal') {\r\n            this._actionModel.blendMode = level ? { blendModeType: 'antiRemoval', level: level } : { blendModeType: 'antiRemoval' };\r\n        }\r\n        else {\r\n            this._actionModel.blendMode = { blendModeType: mode };\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     * @description\r\n     * Closes a layer (layers are built in three stages -> /Open/Transform/Close).\r\n     * @return {SDK.Action}\r\n     */\r\n    closeLayer() {\r\n        var _a, _b, _c, _d;\r\n        const bit = new Action().addFlag(new FlagQualifier('layer_apply'));\r\n        (_a = this._position) === null || _a === void 0 ? void 0 : _a.qualifiers.forEach((qualifier) => {\r\n            bit.addQualifier(qualifier);\r\n        });\r\n        // Flags are stored separately from qualifiers, we need to add those as well\r\n        (_b = this._position) === null || _b === void 0 ? void 0 : _b.flags.forEach((flag) => {\r\n            bit.addFlag(flag);\r\n        });\r\n        if (typeof this._blendMode === \"string\") {\r\n            bit.addQualifier(new Qualifier('e', this._blendMode));\r\n        }\r\n        else {\r\n            (_c = this._blendMode) === null || _c === void 0 ? void 0 : _c.qualifiers.forEach((qualifier) => {\r\n                bit.addQualifier(qualifier);\r\n            });\r\n        }\r\n        (_d = this._timelinePosition) === null || _d === void 0 ? void 0 : _d.qualifiers.forEach((qualifier) => {\r\n            bit.addQualifier(qualifier);\r\n        });\r\n        return bit;\r\n    }\r\n    /**\r\n     * @private\r\n     * @description\r\n     * Opens a layer (layers are built in three stages -> /Open/Transform/Close).\r\n     * @return string\r\n     */\r\n    openLayer() {\r\n        return `${this.source.getOpenSourceString(this.layerType)}`;\r\n    }\r\n    /**\r\n     * @description\r\n     * Serializes the Layer to a string\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return [\r\n            this.openLayer(),\r\n            this.source.getTransformation() && this.source.getTransformation().toString(),\r\n            this.closeLayer()\r\n        ].filter((a) => a).join('/');\r\n    }\r\n    static fromJson(actionModel, transformationFromJson) {\r\n        const { source, actionType, position, timelinePosition, blendMode } = actionModel;\r\n        const sourceInstance = createSourceFromModel(source, transformationFromJson);\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(sourceInstance);\r\n        const layerType = actionType === 'overlay' ? 'l' : 'u';\r\n        result.setLayerType(layerType);\r\n        if (position) {\r\n            result.position(createPositionFromModel(position));\r\n        }\r\n        if (timelinePosition) {\r\n            result.timeline(createTimelinePositionFromModel(timelinePosition));\r\n        }\r\n        if (blendMode) {\r\n            const blendModeType = ACTION_TYPE_TO_BLEND_MODE_MAP[blendMode.blendModeType] || blendMode.blendModeType;\r\n            if (blendMode === null || blendMode === void 0 ? void 0 : blendMode.level) {\r\n                result.blendMode(new BlendModeQualifier(blendModeType, blendMode.level));\r\n            }\r\n            else {\r\n                result.blendMode(new BlendModeQualifier(blendModeType));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { LayerAction };\r\n", "import { LayerAction } from \"./layer/LayerAction.js\";\r\n/**\r\n * @description Adds a video, text or an image layer as an overlay over the base layer. </br>\r\n * @memberOf Actions\r\n * @namespace Overlay\r\n * @see Visit {@link Qualifiers.TextStyle|TextStyle} for advanced text options\r\n * @see {@link Actions.Underlay| The underlay action}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const myVideo = yourCldInstance.video('dog');\r\n *\r\n * import {source} from \"@cloudinary/url-gen/actions/overlay\"\r\n * import {image, video, text} from \"@cloudinary/url-gen/qualifiers/source\"\r\n * import {TextStyle} from '@cloudinary/url-gen/qualifiers/textStyle\r\n *\r\n * myVideo.overlay(\r\n *       source(image('myImage'))\r\n *     )\r\n *\r\n * myVideo.overlay(\r\n *       source(video('myVideo'))\r\n *     )\r\n *\r\n * myVideo.overlay(\r\n *       source(text('My text'), 'arial_15')\r\n *     )\r\n *\r\n * // Or a text with more complex options\r\n * myVideo.overlay(\r\n *       source(text('My text'), new TextStyle('arial', 50))\r\n *     )\r\n */\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Overlay\r\n * @description Adds a layer for an asset\r\n * @param {Qualifiers.Source.ImageSource | Qualifiers.Source.TextSource | Qualifiers.Source.VideoSource} source\r\n *        The Source used for the layer, use the functions provided {@link Qualifiers.Source|here} to easily create these objects\r\n * @return {SDK.LayerAction}\r\n */\r\nfunction source(source) {\r\n    return new LayerAction(source)\r\n        .setLayerType('l');\r\n}\r\nconst Overlay = { source };\r\nexport { Overlay, source };\r\n", "import { LayerAction } from \"./layer/LayerAction.js\";\r\n/**\r\n * @memberOf Actions\r\n * @namespace Underlay\r\n * @description Adds an image or a text layer as an underlay under the base layer. </br>\r\n * @see Visit {@link Qualifiers.TextStyle|TextStyle} for advanced text options\r\n * @see {@link Actions.Overlay| The overlay action}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const myVideo = yourCldInstance.video('dog');\r\n *\r\n * import {source} from \"@cloudinary/url-gen/actions/underlay\"\r\n * import {image, video, text} from \"@cloudinary/url-gen/qualifiers/source\"\r\n * import {TextStyle} from '@cloudinary/url-gen/qualifiers/textStyle\r\n *\r\n * myVideo.underlay(\r\n *       source(image('myImage'))\r\n *     )\r\n *\r\n * myVideo.underlay(\r\n *       source(video('myVideo'))\r\n *     )\r\n *\r\n * myVideo.underlay(\r\n *       source(text('My text'), 'arial_15')\r\n *     )\r\n *\r\n * // Or a text with more complex options\r\n * myVideo.underlay(\r\n *       source(text('My text'), new TextStyle('arial', 50))\r\n *     )\r\n */\r\n/**\r\n * @summary action\r\n * @description Adds a layer for an asset\r\n * @param {Qualifiers.Source.ImageSource | Qualifiers.Source.TextSource} source\r\n *        The Source used for the layer, use the functions provided {@link Qualifiers.Source|here} to easily create these objects\r\n * @memberOf Actions.Underlay\r\n * @return {SDK.LayerAction}\r\n */\r\nfunction source(source) {\r\n    return new LayerAction(source)\r\n        .setLayerType('u');\r\n}\r\nconst Underlay = { source };\r\nexport { Underlay, source };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Applies a pre-defined named transformation of the given name, used with a builder from {@link Actions.NamedTransformation|Named Transformation}\r\n * @extends SDK.Action\r\n * @memberOf Actions.NamedTransformation\r\n * @see Visit {@link Actions.NamedTransformation|Named Transformation} for an example\r\n */\r\nclass NamedTransformationAction extends Action {\r\n    /**\r\n     *\r\n     * @param {string} name The name of the named transformation\r\n     */\r\n    constructor(name) {\r\n        super();\r\n        this.addQualifier(new Qualifier('t', name));\r\n    }\r\n}\r\nexport { NamedTransformationAction };\r\n", "import { NamedTransformationAction } from \"./namedTransformation/NamedTransformationAction.js\";\r\n/**\r\n * Applies a pre-defined named transformation of the given name.\r\n * @memberOf Actions\r\n * @namespace NamedTransformation\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {name} from \"@cloudinary/url-gen/actions/namedTransformation\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.namedTransformation(\r\n *  name('my_named_transformation'),\r\n * );\r\n */\r\n/**\r\n * @summary action\r\n * @description Applies a pre-defined named transformation of the given name.\r\n * @param {string} name Transformation name\r\n * @memberOf Actions.NamedTransformation\r\n * @return {Actions.NamedTransformation.NamedTransformationAction}\r\n */\r\nfunction name(name) {\r\n    return new NamedTransformationAction(name);\r\n}\r\nconst NamedTransformation = { name };\r\nexport { NamedTransformation, name };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { FormatQualifier } from \"../../qualifiers/format/FormatQualifier.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { DELIVERY_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @description Qualifies the delivery of an asset.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n */\r\nclass DeliveryAction extends Action {\r\n    /**\r\n     * @param {string} deliveryKey A generic Delivery Action Key (such as q, f, dn, etc.)\r\n     * @param {string} deliveryType A Format Qualifiers for the action, such as Quality.auto()\r\n     * @param {string} modelProperty internal model property of the action, for example quality uses `level` while dpr uses `density`\r\n     * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n     */\r\n    constructor(deliveryKey, deliveryType, modelProperty) {\r\n        super();\r\n        this._actionModel = {};\r\n        let deliveryTypeValue;\r\n        if (deliveryType instanceof FormatQualifier) {\r\n            deliveryTypeValue = deliveryType.getValue();\r\n        }\r\n        else {\r\n            deliveryTypeValue = deliveryType;\r\n        }\r\n        this._actionModel.actionType = DELIVERY_MODE_TO_ACTION_TYPE_MAP[deliveryKey];\r\n        this._actionModel[modelProperty] = deliveryTypeValue;\r\n        this.addQualifier(new Qualifier(deliveryKey, deliveryType));\r\n    }\r\n}\r\nexport { DeliveryAction };\r\n", "/**\r\n * @description Contains functions to select the mode when using a progressive format.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/transformation_reference#fl_progressive|Progressive modes}\r\n * @memberOf Qualifiers\r\n * @namespace Progressive\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {jpg} from \"@cloudinary/url-gen/qualifiers/format\";\r\n * import {steep} from \"@cloudinary/url-gen/qualifiers/progressive\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(format(jpg()).progressive(steep()))\r\n */\r\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\r\nclass ProgressiveQualifier extends FlagQualifier {\r\n    constructor(mode) {\r\n        super('progressive', mode);\r\n    }\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction none() {\r\n    return new ProgressiveQualifier('none');\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction semi() {\r\n    return new ProgressiveQualifier('semi');\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction steep() {\r\n    return new ProgressiveQualifier('steep');\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction progressive() {\r\n    return new ProgressiveQualifier();\r\n}\r\nconst Progressive = {\r\n    semi,\r\n    none,\r\n    steep,\r\n    progressive,\r\n    ProgressiveQualifier\r\n};\r\nexport { Progressive, semi, none, steep, progressive, ProgressiveQualifier };\r\n", "import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\r\nimport { DeliveryAction } from \"./DeliveryAction.js\";\r\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\r\n/**\r\n * @memberOf Actions.Delivery\r\n * @extends {Actions.Delivery.DeliveryAction}\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryFormatAction extends DeliveryAction {\r\n    constructor(deliveryKey, deliveryType) {\r\n        super(deliveryKey, deliveryType, 'formatType');\r\n    }\r\n    /**\r\n     * @description Uses lossy compression when delivering animated GIF files.\r\n     * @return {this}\r\n     */\r\n    lossy() {\r\n        this._actionModel.lossy = true;\r\n        this.addFlag(lossy());\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Uses progressive compression when delivering JPG file format.\r\n     * @return {this}\r\n     */\r\n    progressive(mode) {\r\n        if (mode instanceof ProgressiveQualifier) {\r\n            this._actionModel.progressive = { mode: mode.getFlagValue() };\r\n            this.addFlag(mode);\r\n        }\r\n        else {\r\n            this._actionModel.progressive = { mode: mode };\r\n            this.addFlag(progressive(mode));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Ensures that images with a transparency channel are delivered in PNG format.\r\n     */\r\n    preserveTransparency() {\r\n        this._actionModel.preserveTransparency = true;\r\n        this.addFlag(preserveTransparency());\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { formatType, lossy, progressive, preserveTransparency } = actionModel;\r\n        let result;\r\n        if (formatType) {\r\n            result = new this('f', formatType);\r\n        }\r\n        else {\r\n            result = new this('f');\r\n        }\r\n        if (progressive) {\r\n            if (progressive.mode) {\r\n                result.progressive(progressive.mode);\r\n            }\r\n            else {\r\n                result.progressive();\r\n            }\r\n        }\r\n        lossy && result.lossy();\r\n        preserveTransparency && result.preserveTransparency();\r\n        return result;\r\n    }\r\n}\r\nexport { DeliveryFormatAction };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { DeliveryAction } from \"./DeliveryAction.js\";\r\nimport { CHROMA_VALUE_TO_CHROMA_MODEL_ENUM, CHROMA_MODEL_ENUM_TO_CHROMA_VALUE, ACTION_TYPE_TO_QUALITY_MODE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @description Controls the quality of the delivered image or video.\r\n * @memberOf Actions.Delivery\r\n * @extends {Actions.Delivery.DeliveryAction}\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryQualityAction extends DeliveryAction {\r\n    /**\r\n     * @param {Qualifiers.Quality} qualityValue a Quality value\r\n     */\r\n    constructor(qualityValue) {\r\n        super('q', qualityValue.toString(), 'level');\r\n    }\r\n    /**\r\n     * Selet the Chroma sub sampling</br>\r\n     * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\r\n     * @param {420 | 444 | number} type The chroma sub sampling type\r\n     */\r\n    chromaSubSampling(type) {\r\n        this._actionModel.chromaSubSampling = CHROMA_VALUE_TO_CHROMA_MODEL_ENUM[type];\r\n        const qualityWithSubSampling = new QualifierValue([this._actionModel.level, type]);\r\n        qualityWithSubSampling.setDelimiter(':');\r\n        // We either have chroma or quantization, but not both\r\n        return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\r\n    }\r\n    /**\r\n     * Controls the final quality by setting a maximum quantization percentage\r\n     * @param {number} val\r\n     */\r\n    quantization(val) {\r\n        this._actionModel.quantization = val;\r\n        const qualityWithQuantization = new QualifierValue([this._actionModel.level, `qmax_${val}`]).setDelimiter(':');\r\n        // We either have chroma or quantization, but not both\r\n        return this.addQualifier(new Qualifier('q', qualityWithQuantization));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { level, chromaSubSampling, quantization } = actionModel;\r\n        const levelType = ACTION_TYPE_TO_QUALITY_MODE_MAP[level] || level;\r\n        const result = new this(levelType);\r\n        if (chromaSubSampling) {\r\n            //Turn strings like 'CHROMA_420' to 420\r\n            const chromaValue = CHROMA_MODEL_ENUM_TO_CHROMA_VALUE[chromaSubSampling.toUpperCase()];\r\n            chromaValue && result.chromaSubSampling(+chromaValue);\r\n        }\r\n        quantization && result.quantization(quantization);\r\n        return result;\r\n    }\r\n}\r\nexport { DeliveryQualityAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Specifies the ICC profile to use for the color space.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryColorSpaceFromICCAction extends Action {\r\n    /**\r\n     * @param {string} publicId\r\n     */\r\n    constructor(publicId) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'colorSpaceFromICC';\r\n        this._actionModel.publicId = publicId;\r\n        const qualifierValue = new QualifierValue(['icc', publicId]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('cs', qualifierValue));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { publicId } = actionModel;\r\n        return new this(publicId);\r\n    }\r\n}\r\nexport { DeliveryColorSpaceFromICCAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { ColorSpace } from \"../../qualifiers/colorSpace.js\";\r\nimport { COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP, COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @description Specifies the color space to use.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryColorSpaceAction extends Action {\r\n    /**\r\n     * Create a new DeliveryColorSpaceAction\r\n     * @param mode\r\n     */\r\n    constructor(mode) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel = {\r\n            actionType: 'colorSpace',\r\n            mode: (COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP[mode] || mode)\r\n        };\r\n        this.addQualifier(new Qualifier('cs', ColorSpace[mode] ? ColorSpace[mode]() : mode));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { mode } = actionModel;\r\n        const colorSpaceMode = COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP[mode] || mode;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        return new this(colorSpaceMode);\r\n    }\r\n}\r\nexport { DeliveryColorSpaceAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\r\n/**\r\n * @description Specifies the dpr.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryDPRAction extends Action {\r\n    /**\r\n     * Create a new DeliveryDPRAction\r\n     * @param dprValue\r\n     */\r\n    constructor(dprValue) {\r\n        super();\r\n        this._actionModel = { actionType: 'dpr' };\r\n        // toFloatAsString is used to ensure 1 turns into 1.0\r\n        const dprAsFloat = toFloatAsString(dprValue);\r\n        this._actionModel.dpr = dprAsFloat;\r\n        this.addQualifier(new Qualifier('dpr', dprAsFloat));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { dpr } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        return new this(dpr);\r\n    }\r\n}\r\nexport { DeliveryDPRAction };\r\n", "/**\r\n * @description Defines transformations for delivering your assets without changing the visual or audio experience for the end user.\r\n * @memberOf Actions\r\n * @namespace Delivery\r\n * @example\r\n * See the examples under every method\r\n */\r\nimport { DeliveryFormatAction } from \"./delivery/DeliveryFormatAction.js\";\r\nimport { DeliveryQualityAction } from \"./delivery/DeliveryQualityAction.js\";\r\nimport { DeliveryColorSpaceFromICCAction } from \"./delivery/DeliveryColorSpaceFromICCAction.js\";\r\nimport { DeliveryAction } from \"./delivery/DeliveryAction.js\";\r\nimport { DeliveryColorSpaceAction } from \"./delivery/DeliveryColorSpaceAction.js\";\r\nimport { DeliveryDPRAction } from \"./delivery/DeliveryDPRAction.js\";\r\n/**\r\n * @summary action\r\n * @description Defines the format of the delivered asset.\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/image_transformations#image_format_support|Image formats}\r\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Video formats}\r\n *\r\n * @memberOf Actions.Delivery\r\n * @param {string} format The file format. For a list of supported format types see {@link Qualifiers.Format| format types} for\r\n * possible values\r\n * @return {Actions.Delivery.DeliveryFormat}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  format('jpg'),\r\n * );\r\n *\r\n */\r\nfunction format(format) {\r\n    return new DeliveryFormatAction('f', format);\r\n}\r\n/**\r\n * @summary action\r\n * @description Deliver the image in the specified device pixel ratio.\r\n * @memberOf Actions.Delivery\r\n * @param {string} dpr The DPR (Device Pixel Ratio). Any positive float value.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {dpr} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  dpr('2.0'),\r\n * );\r\n */\r\nfunction dpr(dpr) {\r\n    return new DeliveryDPRAction(dpr);\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the quality of the delivered image or video.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_quality|Image quality}\r\n *  {@link https://cloudinary.com/documentation/video_optimization#how_to_optimize_video_quality|Video quality}\r\n * @memberOf Actions.Delivery\r\n * @param {QualityTypes | string | number | Qualifiers.Quality} qualityType For a list of supported quality types see\r\n * {@link Qualifiers.Quality| quality types} for\r\n * possible values.\r\n * @return {Actions.Delivery.DeliveryQualityAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {quality} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {quality} from \"@cloudinary/url-gen/qualifiers/quantity\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  quality('auto'),\r\n * );\r\n */\r\nfunction quality(qualityType) {\r\n    return new DeliveryQualityAction(qualityType);\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the density to use when delivering an image or when converting a vector file such as a PDF or EPS\r\n * document to a web image delivery format.\r\n * @memberOf Actions.Delivery\r\n * @param {number | string} value The density in dpi.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {density} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  density(150),\r\n * );\r\n */\r\nfunction density(value) {\r\n    return new DeliveryAction('dn', value, 'density');\r\n}\r\n/**\r\n * @summary action\r\n * @description Default images can be used in the case that a requested image does not exist.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicIdWithExtension Default image public ID\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {defaultImage} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  defaultImage('sample'),\r\n * );\r\n */\r\nfunction defaultImage(publicIdWithExtension) {\r\n    return new DeliveryAction('d', publicIdWithExtension, 'defaultImage');\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the color space used for the delivered image.\r\n * @memberOf Actions.Delivery\r\n * @param {string | Qualifiers.ColorSpace} mode The color space.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpace} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpace(trueColor()),\r\n * );\r\n */\r\nfunction colorSpace(mode) {\r\n    return new DeliveryColorSpaceAction(mode);\r\n}\r\n/**\r\n * @summary action\r\n * @description Specifies the ICC profile to use for the color space.\r\n * The ICC file must be uploaded to your account as a raw, authenticated file.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicId The public ID (including the file extension) of the ICC profile that defines the\r\n * color space.\r\n * @return {Actions.Delivery.DeliveryColorSpaceFromICC}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpaceFromICC} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpaceFromICC('sample.icc'),\r\n * );\r\n */\r\nfunction colorSpaceFromICC(publicId) {\r\n    return new DeliveryColorSpaceFromICCAction(publicId);\r\n}\r\nconst Delivery = {\r\n    format,\r\n    dpr,\r\n    density,\r\n    defaultImage,\r\n    colorSpace,\r\n    colorSpaceFromICC,\r\n    quality\r\n};\r\nexport { Delivery, format, dpr, quality, density, defaultImage, colorSpace, colorSpaceFromICC };\r\n", "import { base64Encode } from \"../../internal/utils/base64Encode.js\";\r\nimport { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @memberOf Actions.CustomFunction\r\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\r\n */\r\nclass CustomFunctionAction extends Action {\r\n    /**\r\n     *\r\n     * @param {string} fn The custom function to use, can be a URL or a publicID\r\n     */\r\n    constructor(fn) {\r\n        super();\r\n        this.fn = fn;\r\n    }\r\n    encodeCustomFunctionString(fn) {\r\n        const encodedSource = base64Encode(fn);\r\n        return encodedSource;\r\n    }\r\n    /**\r\n     * Use a WASM as a custom function,\r\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\r\n     */\r\n    asWasm() {\r\n        this.mode = 'wasm';\r\n        return this;\r\n    }\r\n    /**\r\n     * Use a remote URL as a custom function\r\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\r\n     */\r\n    asRemote() {\r\n        this.mode = 'remote';\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        this.encodedFn = this.fn;\r\n        if (this.mode === 'remote') {\r\n            this.encodedFn = this.encodeCustomFunctionString(this.fn);\r\n        }\r\n        return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\r\n    }\r\n    toString() {\r\n        return super.toString()\r\n            .replace(/\\//g, ':');\r\n    }\r\n}\r\nexport default CustomFunctionAction;\r\n", "import CustomFunctionAction from \"./CustomFunctionAction.js\";\r\nclass RemoteAction extends CustomFunctionAction {\r\n    constructor(fn) {\r\n        /* istanbul ignore next */\r\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\r\n        super(fn);\r\n    }\r\n    preprocess() {\r\n        this.pre = 'pre';\r\n        return this;\r\n    }\r\n}\r\nexport default RemoteAction;\r\n", "/**\r\n * Calls a custom function. </br>\r\n * Learn more: {@link https://cloudinary.com/documentation/custom_functions|Custom functions}\r\n * @memberOf Actions\r\n * @namespace CustomFunction\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {remote, wasm} from \"@cloudinary/url-gen/actions/customFunction\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.customFunction(\r\n *  remote('http://example.com')\r\n * );\r\n *\r\n * image.customFunction(\r\n *  wasm('myPublicID'); // publicID from Cloudinary\r\n * );\r\n */\r\nimport CustomFunctionAction from \"./customFunction/CustomFunctionAction.js\";\r\nimport RemoteAction from \"./customFunction/RemoteAction.js\";\r\n/**\r\n * @summary action\r\n * @description - Calls a custom function. </br>\r\n * For more information about remote custom functions see {@link https://cloudinary.com/documentation/custom_functions#remote_functions|the documentation}\r\n * @param {string} path - Specifies the URL of the remote custom function.\r\n * @memberOf Actions.CustomFunction\r\n * @return {Actions.CustomFunctionAction}\r\n */\r\nfunction remote(path) {\r\n    return new RemoteAction(path)\r\n        .asRemote();\r\n}\r\n/**\r\n * @summary action\r\n * @description - Calls a custom function.  </br>\r\n * For more information about wasm custom functions see {@link https://cloudinary.com/documentation/custom_functions#webassembly_functions|the documentation}\r\n * @param {string} publicID - Specifies the publicID of the custom function stored in Cloudinary\r\n * @memberOf Actions.CustomFunction\r\n * @return {Actions.CustomFunctionAction}\r\n */\r\nfunction wasm(publicID) {\r\n    return new CustomFunctionAction(publicID)\r\n        .asWasm();\r\n}\r\nconst CustomFunction = { remote, wasm };\r\nexport { CustomFunction, remote, wasm };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Class for shortening a video to the specified range.\r\n * @extends SDK.Action\r\n * @memberOf Actions.VideoEdit\r\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\r\n */\r\nclass TrimAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {\r\n            actionType: 'trimVideo'\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @description Support Percentages in values (30% -> 30p)\r\n     * @param {string|number} val\r\n     * @private\r\n     * @return {string}\r\n     */\r\n    parseVal(val) {\r\n        return typeof val === 'number' ? val : val.replace('%', 'p');\r\n    }\r\n    /**\r\n     * @description Sets the starting position of the part of the video to keep when trimming videos.\r\n     *\r\n     * @param {string|number} offset The starting position of the part of the video to keep. This can be specified as a\r\n     *                           float representing the time in seconds or a string representing the percentage of the\r\n     *                           video length (for example, \"30%\" or \"30p\").\r\n     * @return {this}\r\n     */\r\n    startOffset(offset) {\r\n        this._actionModel.startOffset = getAuto(offset) || +offset;\r\n        return this.addQualifier(new Qualifier('so', this.parseVal(offset)));\r\n    }\r\n    /**\r\n     * @description Sets the end position of the part of the video to keep when trimming videos.\r\n     *\r\n     * @param {string|number} offset The end position of the part of the video to keep. This can be specified as a\r\n     *                         float representing the time in seconds or a string representing the percentage of the\r\n     *                         video length (for example, \"30%\" or \"30p\").\r\n     * @return {this}\r\n     */\r\n    endOffset(offset) {\r\n        this._actionModel.endOffset = getAuto(offset) || +offset;\r\n        return this.addQualifier(new Qualifier('eo', this.parseVal(offset)));\r\n    }\r\n    /**\r\n     * @description Sets the duration of the video to keep.\r\n     *\r\n     * @param {string|number} duration The length of the part of the video to keep. This can be specified as a float\r\n     *                        representing the time in seconds or a string representing the percentage of the\r\n     *                        video length (for example, \"30%\" or \"30p\").\r\n     * @return {this}\r\n     */\r\n    duration(duration) {\r\n        this._actionModel.duration = duration;\r\n        return this.addQualifier(new Qualifier('du', this.parseVal(duration)));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { duration, startOffset, endOffset } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        if (duration != null) {\r\n            result.duration(duration);\r\n        }\r\n        if (startOffset != null) {\r\n            result.startOffset(startOffset);\r\n        }\r\n        if (endOffset != null) {\r\n            result.endOffset(endOffset);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Helper function that either gets 'auto' or return null\r\n */\r\nconst getAuto = (value) => value === 'auto' ? value : null;\r\nexport default TrimAction;\r\n", "import { Action } from \"../../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\r\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @description A class for background transformations.\r\n */\r\nclass BackgroundColor extends Action {\r\n    constructor(color) {\r\n        super();\r\n        this._actionModel = {};\r\n        this.addQualifier(new Qualifier('b', new QualifierValue(prepareColor(color)).setDelimiter('_')));\r\n        this._actionModel.color = color;\r\n        this._actionModel.actionType = 'backgroundColor';\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { color } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(color);\r\n        return result;\r\n    }\r\n}\r\nexport { BackgroundColor };\r\n", "import { createUnsupportedError } from \"./utils/unsupportedError.js\";\r\n/**\r\n * @summary SDK\r\n * @memberOf SDK\r\n * @description Defines an action that's a string literal, no validations or manipulations are performed\r\n */\r\nclass RawAction {\r\n    constructor(raw) {\r\n        this.raw = raw;\r\n    }\r\n    toString() {\r\n        return this.raw;\r\n    }\r\n    toJson() {\r\n        return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\r\n    }\r\n}\r\nexport { RawAction };\r\n", "/**\r\n * Validates obj is an instance of IErrorObject\r\n * @param obj\r\n */\r\nfunction isErrorObject(obj) {\r\n    const errorObj = obj;\r\n    return ('error' in errorObj) && !!errorObj.error;\r\n}\r\nexport { isErrorObject };\r\n", "import { Action } from \"../internal/Action.js\";\r\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor.js\";\r\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\r\nimport { RawAction } from \"../internal/RawAction.js\";\r\nimport { isErrorObject } from \"../internal/models/IErrorObject.js\";\r\nimport { DeliveryFormatAction } from \"../actions/delivery/DeliveryFormatAction.js\";\r\n/**\r\n * @summary SDK\r\n * @description - Defines how to transform an asset\r\n * @memberOf SDK\r\n */\r\nclass Transformation {\r\n    constructor() {\r\n        this.actions = [];\r\n    }\r\n    /**\r\n     * @param {SDK.Action | string} action\r\n     * @return {this}\r\n     */\r\n    addAction(action) {\r\n        let actionToAdd;\r\n        if (typeof action === 'string') {\r\n            if (action.indexOf('/') >= 0) {\r\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\r\n            }\r\n            else {\r\n                actionToAdd = new RawAction(action);\r\n            }\r\n        }\r\n        else {\r\n            actionToAdd = action;\r\n        }\r\n        this.actions.push(actionToAdd);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\r\n     * @param {string | SDK.Transformation} tx\r\n     * @example\r\n     * import {Transformation} from \"@cloudinary/url-gen\";\r\n     *\r\n     * const transformation = new Transformation();\r\n     * transformation.addTransformation('w_100/w_200/w_300');\r\n     * @return {this}\r\n     */\r\n    addTransformation(tx) {\r\n        if (tx instanceof Transformation) {\r\n            // Concat the new actions into the existing actions\r\n            this.actions = this.actions.concat(tx.actions);\r\n        }\r\n        else {\r\n            this.actions.push(new RawAction(tx));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return this.actions\r\n            .map((action) => {\r\n            return action.toString();\r\n        })\r\n            .filter((a) => a)\r\n            .join('/');\r\n    }\r\n    /**\r\n     * @description Delivers an animated GIF.\r\n     * @param {AnimatedAction} animatedAction\r\n     * @return {this}\r\n     */\r\n    animated(animatedAction) {\r\n        return this.addAction(animatedAction);\r\n    }\r\n    /**\r\n     * @description Adds a border around the image.\r\n     * @param {Border} borderAction\r\n     * @return {this}\r\n     */\r\n    border(borderAction) {\r\n        return this.addAction(borderAction);\r\n    }\r\n    /**\r\n     * @description Adjusts the shape of the delivered image. </br>\r\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#distort|Shape changes and distortion effects}\r\n     * @param {IReshape} reshapeAction\r\n     * @return {this}\r\n     */\r\n    reshape(reshapeAction) {\r\n        return this.addAction(reshapeAction);\r\n    }\r\n    /**\r\n     * @description Resize the asset using provided resize action\r\n     * @param {ResizeSimpleAction} resizeAction\r\n     * @return {this}\r\n     */\r\n    resize(resizeAction) {\r\n        return this.addAction(resizeAction);\r\n    }\r\n    /**\r\n     * @desc An alias to Action Delivery.quality\r\n     * @param {string|number} quality\r\n     * @return {this}\r\n     */\r\n    quality(quality) {\r\n        this.addAction(new DeliveryFormatAction('q', quality));\r\n        return this;\r\n    }\r\n    /**\r\n     * @desc An alias to Action Delivery.format\r\n     * @param {string} format\r\n     * @return {this}\r\n     */\r\n    format(format) {\r\n        this.addAction(new DeliveryFormatAction('f', format));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Rounds the specified corners of an image.\r\n     * @param roundCornersAction\r\n     * @return {this}\r\n     */\r\n    roundCorners(roundCornersAction) {\r\n        return this.addAction(roundCornersAction);\r\n    }\r\n    /**\r\n     * @description Adds an overlay over the base image.\r\n     * @param {LayerAction} overlayAction\r\n     * @return {this}\r\n     */\r\n    overlay(overlayAction) {\r\n        return this.addAction(overlayAction);\r\n    }\r\n    /**\r\n     * @description Adds an underlay under the base image.\r\n     * @param {LayerAction} underlayAction\r\n     * @return {this}\r\n     */\r\n    underlay(underlayAction) {\r\n        underlayAction.setLayerType('u');\r\n        return this.addAction(underlayAction);\r\n    }\r\n    /**\r\n     * @description Defines an new user variable.\r\n     * @param {VariableAction} variableAction\r\n     * @return {this}\r\n     */\r\n    addVariable(variableAction) {\r\n        return this.addAction(variableAction);\r\n    }\r\n    /**\r\n     * @description Specifies a condition to be met before applying a transformation.\r\n     * @param {ConditionalAction} conditionAction\r\n     * @return {this}\r\n     */\r\n    conditional(conditionAction) {\r\n        return this.addAction(conditionAction);\r\n    }\r\n    /**\r\n     * @description Applies a filter or an effect on an asset.\r\n     * @param {SimpleEffectAction} effectAction\r\n     * @return {this}\r\n     */\r\n    effect(effectAction) {\r\n        return this.addAction(effectAction);\r\n    }\r\n    /**\r\n     * @description Applies adjustment effect on an asset.\r\n     * @param action\r\n     * @return {this}\r\n     */\r\n    adjust(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Rotates the asset by the given angle.\r\n     * @param {RotateAction} rotateAction\r\n     * @return {this}\r\n     */\r\n    rotate(rotateAction) {\r\n        return this.addAction(rotateAction);\r\n    }\r\n    /**\r\n     * @description Applies a pre-defined named transformation of the given name.\r\n     * @param {NamedTransformation} namedTransformation\r\n     * @return {this}\r\n     */\r\n    namedTransformation(namedTransformation) {\r\n        return this.addAction(namedTransformation);\r\n    }\r\n    /**\r\n     * @description Applies delivery action.\r\n     * @param deliveryAction\r\n     * @return {this}\r\n     */\r\n    delivery(deliveryAction) {\r\n        return this.addAction(deliveryAction);\r\n    }\r\n    /**\r\n     * @description Sets the color of the background.\r\n     * @param {Qualifiers.Color} color\r\n     * @return {this}\r\n     */\r\n    backgroundColor(color) {\r\n        return this.addAction(new BackgroundColor(color));\r\n    }\r\n    /**\r\n     * @description Adds a layer in a Photoshop document.\r\n     * @param action\r\n     * @return {this}\r\n     */\r\n    psdTools(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\r\n     * @param action\r\n     * @return {this}\r\n     */\r\n    extract(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Adds a flag as a separate action.\r\n     * @param {Qualifiers.Flag | string} flagQualifier\r\n     * @return {this}\r\n     */\r\n    addFlag(flagQualifier) {\r\n        const action = new Action();\r\n        let flagToAdd = flagQualifier;\r\n        if (typeof flagQualifier === 'string') {\r\n            flagToAdd = new FlagQualifier(flagQualifier);\r\n        }\r\n        action.addQualifier(flagToAdd);\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * @description Inject a custom function into the image transformation pipeline.\r\n     * @return {this}\r\n     */\r\n    customFunction(customFunction) {\r\n        return this.addAction(customFunction);\r\n    }\r\n    /**\r\n     * Transcodes the video (or audio) to another format.\r\n     * @param {Action} action\r\n     * @return {this}\r\n     */\r\n    transcode(action) {\r\n        return this.addAction(action);\r\n    }\r\n    /**\r\n     * Applies the specified video edit action.\r\n     *\r\n     * @param {videoEditType} action\r\n     * @return {this}\r\n     */\r\n    videoEdit(action) {\r\n        return this.addAction(action);\r\n    }\r\n    toJson() {\r\n        const actions = [];\r\n        for (const action of this.actions) {\r\n            const json = action.toJson();\r\n            if (isErrorObject(json)) {\r\n                // Fail early and return an IErrorObject\r\n                return json;\r\n            }\r\n            actions.push(json);\r\n        }\r\n        return { actions };\r\n    }\r\n}\r\nexport { Transformation };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Transformation } from \"../../transformation/Transformation.js\";\r\nimport { VideoSource } from \"../../qualifiers/source/sourceTypes/VideoSource.js\";\r\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\r\n/**\r\n * @description Class for Concatenating another video.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_trimming_and_concatenating#concatenating_media|Concatenating videos}\r\n * @extends SDK.Action\r\n * @memberOf Actions.VideoEdit\r\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\r\n */\r\nclass ConcatenateAction extends Action {\r\n    /**\r\n     *\r\n     * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\r\n     *         the Source to concatenate\r\n     */\r\n    constructor(source) {\r\n        super();\r\n        this._actionModel = {\r\n            actionType: 'concatenate',\r\n            source: source.toJson()\r\n        };\r\n        this.concatSource = source;\r\n    }\r\n    /**\r\n     * @description Sets the transition between a video and a concatenated source\r\n     * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\r\n     * @return {this}\r\n     */\r\n    transition(source) {\r\n        this._actionModel.transition = source.toJson();\r\n        this._transition = source;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Prepend the concatenated video - Adds the video before the original\r\n     * @return {this}\r\n     */\r\n    prepend() {\r\n        this._actionModel.prepend = true;\r\n        this._prepend = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * The duration in seconds\r\n     * @param {number} sec\r\n     * @return {this}\r\n     */\r\n    duration(sec) {\r\n        this._actionModel.duration = sec;\r\n        this._duration = sec;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Get the transitionString for the toString() method\r\n     * @return {string}\r\n     */\r\n    getTransitionString() {\r\n        const transTx = this._transition.getTransformation();\r\n        return [\r\n            `e_transition,${this._transition.getOpenSourceString('l')}`,\r\n            transTx && transTx.toString(),\r\n            'fl_layer_apply'\r\n        ].filter((a) => a).join('/');\r\n    }\r\n    /**\r\n     * @description Get the string representation of the Concatenation action\r\n     */\r\n    toString() {\r\n        /*\r\n         *\r\n         * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\r\n         *\r\n         * First, we calculate the open and close parts of the top-level transformation:\r\n         *   - {open}/{sourceTransformation}/{close}\r\n         *\r\n         * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\r\n         * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\r\n         * - fl_splice is also added, but only if a transition is not needed.\r\n         *\r\n         * once we've calculated the open and close parts, we now need to deal with the Transition.\r\n         * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\r\n         *\r\n         * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\r\n         */\r\n        // Calculate the open part\r\n        const open = [\r\n            this._duration && `du_${this._duration}`,\r\n            !this._transition && `fl_splice`,\r\n            `${this.concatSource.getOpenSourceString('l')}`\r\n        ].filter((a) => a).join(',');\r\n        // Calculate the open part\r\n        const close = [\r\n            'fl_layer_apply',\r\n            this._prepend && 'so_0'\r\n        ].filter((a) => a).join(',');\r\n        // Calculate the Transition part\r\n        let concatSourceTx;\r\n        if (this.concatSource.getTransformation()) {\r\n            concatSourceTx = this.concatSource.getTransformation();\r\n        }\r\n        else {\r\n            concatSourceTx = new Transformation();\r\n        }\r\n        if (this._transition) {\r\n            concatSourceTx.addTransformation(this.getTransitionString());\r\n        }\r\n        // Put it all together, the transition is already part of the concatSourceTx\r\n        return [\r\n            open,\r\n            concatSourceTx.toString(),\r\n            close\r\n        ].filter((a) => a).join('/');\r\n    }\r\n    static fromJson(actionModel, transformationFromJson) {\r\n        const { source, transition, prepend, duration } = actionModel;\r\n        const sourceInstance = createSourceFromModel(source, transformationFromJson);\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(sourceInstance);\r\n        if (transition) {\r\n            result.transition(VideoSource.fromJson(transition, transformationFromJson));\r\n        }\r\n        if (prepend) {\r\n            result.prepend();\r\n        }\r\n        if (duration) {\r\n            result.duration(duration);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport default ConcatenateAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Class to Controls the volume of an audio or video file.\r\n * @extends SDK.Action\r\n * @memberOf Actions.VideoEdit\r\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\r\n */\r\nclass VolumeAction extends Action {\r\n    constructor(volumeValue) {\r\n        super();\r\n        let volumeValueModel = { mode: 'mute' };\r\n        if (volumeValue !== 'mute') {\r\n            volumeValueModel = {\r\n                mode: (`${volumeValue}`.endsWith('db') ? 'decibels' : 'percent'),\r\n                value: +(`${volumeValue}`.replace('db', ''))\r\n            };\r\n        }\r\n        this._actionModel = {\r\n            actionType: 'volume',\r\n            volumeValue: volumeValueModel\r\n        };\r\n        const qualifierValue = new QualifierValue(['volume', volumeValue]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { volumeValue } = actionModel;\r\n        const { mode } = volumeValue;\r\n        const value = mode === 'mute' ? mode : volumeValue.value;\r\n        const suffix = (mode === 'mute' || mode === \"percent\") ? '' : 'db';\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        return new this(`${value}${suffix}`);\r\n    }\r\n}\r\nexport default VolumeAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\r\n/**\r\n * @description Class for creating a preview of a video\r\n * @memberOf Actions.VideoEdit\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\r\n */\r\nclass PreviewAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this._actionModel = {\r\n            actionType: 'preview'\r\n        };\r\n    }\r\n    /**\r\n     * @description Control the duration of the video segments\r\n     * @param {string|number} minSegDuration The duration of a video segment\r\n     * @return {this}\r\n     */\r\n    minimumSegmentDuration(minSegDuration) {\r\n        this._actionModel.minimumSegmentDuration = +minSegDuration;\r\n        this._minSeg = minSegDuration;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Control the number of the video segments\r\n     * @param {string|number} maxSeg The number of the video segments.\r\n     * @return {this}\r\n     */\r\n    maximumSegments(maxSeg) {\r\n        this._actionModel.maximumSegments = +maxSeg;\r\n        this._maxSeg = maxSeg;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description control the length of the generated preview\r\n     * @param {string|number} duration The duration in seconds such as 1.2, or 5.0\r\n     * @return {this}\r\n     */\r\n    duration(duration) {\r\n        this._actionModel.duration = +duration;\r\n        this._duration = duration;\r\n        return this;\r\n    }\r\n    toString() {\r\n        return [\r\n            'e_preview',\r\n            this._duration && `duration_${toFloatAsString(this._duration)}`,\r\n            this._maxSeg && `max_seg_${this._maxSeg}`,\r\n            this._minSeg && `min_seg_dur_${toFloatAsString(this._minSeg)}`\r\n        ].filter((a) => a).join(':');\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { duration, maximumSegments, minimumSegmentDuration } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this();\r\n        if (duration != null) {\r\n            result.duration(duration);\r\n        }\r\n        if (maximumSegments != null) {\r\n            result.maximumSegments(maximumSegments);\r\n        }\r\n        if (minimumSegmentDuration != null) {\r\n            result.minimumSegmentDuration(minimumSegmentDuration);\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { PreviewAction };\r\n", "import TrimAction from './videoEdit/TrimAction.js';\r\nimport ConcatenateAction from './videoEdit/ConcatenateAction.js';\r\nimport VolumeAction from \"./videoEdit/VolumeAction.js\";\r\nimport { PreviewAction } from \"./videoEdit/PreviewAction.js\";\r\n/**\r\n * @summary action\r\n * @description Methods for editing a video.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery|Video manipulation}\r\n * @memberOf Actions\r\n * @namespace VideoEdit\r\n * @example\r\n * See the examples under every method\r\n */\r\n/**\r\n * @summary action\r\n * @description Concatenates another video.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_trimming_and_concatenating#concatenating_media|Concatenating videos}\r\n *\r\n * @memberOf Actions.VideoEdit\r\n * @param {VideoSource} source The source to concatenate.\r\n * @return {Actions.VideoEdit.ConcatenateAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {concatenate} from \"@cloudinary/url-gen/actions/videoEdit\";\r\n * import {videoSource as concatVideoSource} from \"@cloudinary/url-gen/qualifiers/concatenate\";\r\n * import {videoSource as tVideoSource} from \"@cloudinary/url-gen/qualifiers/transition.js\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.videoEdit( concatenate(concatVideoSource('butterfly'))\r\n *  .transition(tVideoSource('myTransition'))\r\n *  .duration(5)\r\n * )\r\n */\r\nfunction concatenate(source) {\r\n    return new ConcatenateAction(source);\r\n}\r\n/**\r\n * @summary action\r\n * @description Trims a video (and discards the rest).\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_trimming_and_concatenating#trimming_videos|\r\n  * Trimming videos}\r\n *\r\n * @memberOf Actions.VideoEdit\r\n * @return {Actions.VideoEdit.TrimAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {trim} from \"@cloudinary/url-gen/actions/videoEdit\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.videoEdit( trim()\r\n *  .startOffset(3)\r\n *  .endOffset(4)\r\n *  .duration(10)\r\n * )\r\n */\r\nfunction trim() {\r\n    return new TrimAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description Increases or decreases the volume by a percentage of the current volume.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#adjust_the_audio_volume|\r\n  * Adjust the audio volume}\r\n *\r\n * @memberOf Actions.VideoEdit\r\n * @param {string | number} volumeValue The value of volume. The percentage change of volume (Range: -100 to 400).\r\n * For a list of supported types see {@link Qualifiers.Volume| Volume values}\r\n * @return {Actions.VideoEdit.VolumeAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {volume} from \"@cloudinary/url-gen/actions/videoEdit\";\r\n * import {mute} from '@cloudinary/url-gen/qualifiers/volume';\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.videoEdit( volume(10) ) // as percent\r\n * video.videoEdit( volume('5db') ) // as decibels\r\n * video.videoEdit( volume(mute()) ) // if you prefer silence..\r\n */\r\nfunction volume(volumeValue) {\r\n    return new VolumeAction(volumeValue);\r\n}\r\n/**\r\n * @summary action\r\n * @description A video preview is a short excerpt from a video that can be used to engage your audience and help them select the video content that interests them.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_effects_and_enhancements#ai_based_video_preview|\r\n  * Create a video preview}\r\n *\r\n * @memberOf Actions.VideoEdit\r\n * @return {Actions.VideoEdit.PreviewAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {preview} from \"@cloudinary/url-gen/actions/videoEdit\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.videoEdit( preview()\r\n *  .duration(5)\r\n *  .minimumSegmentDuration(1)\r\n *  .maximumSegments(10)\r\n * )\r\n */\r\nfunction preview() {\r\n    return new PreviewAction();\r\n}\r\nconst VideoEdit = { concatenate, trim, volume, preview };\r\nexport { VideoEdit, concatenate, trim, volume, preview };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description  Defines the video bitrate in bits per second.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_optimization#bitrate_control|Bitrate control}\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass BitRateAction extends Action {\r\n    constructor(bitRate) {\r\n        super();\r\n        this.isConstant = false;\r\n        this._actionModel = { actionType: 'bitRate' };\r\n        this.bitRate = bitRate;\r\n        this._actionModel.bitRate = bitRate;\r\n    }\r\n    /**\r\n     * @description video plays with a constant bitrate (CBR).\r\n     */\r\n    constant() {\r\n        this.isConstant = true;\r\n        this._actionModel.constant = true;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let qualifierValue;\r\n        if (this.isConstant) {\r\n            qualifierValue = new QualifierValue([this.bitRate, 'constant']).setDelimiter(':');\r\n        }\r\n        else {\r\n            qualifierValue = new QualifierValue(this.bitRate);\r\n        }\r\n        this.addQualifier(new Qualifier('br', qualifierValue));\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { bitRate, constant } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(bitRate);\r\n        constant && result.constant();\r\n        return result;\r\n    }\r\n}\r\nexport default BitRateAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the audio codec or removes the audio channel.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control|Audio codec settings}\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass AudioCodecAction extends Action {\r\n    constructor(codec) {\r\n        super();\r\n        this._actionModel = { actionType: 'audioCodec' };\r\n        this.addQualifier(new Qualifier('ac', codec));\r\n        this._actionModel.audioCodec = codec;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { audioCodec } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(audioCodec);\r\n        return result;\r\n    }\r\n}\r\nexport default AudioCodecAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description Controls audio sample frequency.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_codec_settings|Audio frequency control}\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass AudioFrequencyAction extends Action {\r\n    constructor(freq) {\r\n        super();\r\n        this._actionModel = { actionType: 'audioFrequency' };\r\n        this.addQualifier(new Qualifier('af', freq));\r\n        this._actionModel.audioFrequencyType = freq;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { audioFrequencyType } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(audioFrequencyType.replace('freq', ''));\r\n        return result;\r\n    }\r\n}\r\nexport default AudioFrequencyAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized)\r\n * is delivered with\r\n * an expected FPS level (helps with sync to audio).\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_transformation_reference#video_settings|Video settings}\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass FPSRangeAction extends Action {\r\n    constructor(from, to) {\r\n        super();\r\n        this._actionModel = {};\r\n        this.from = from;\r\n        this._actionModel = {\r\n            actionType: 'fps',\r\n            fps: { from }\r\n        };\r\n        if (to != null) {\r\n            this.to = to;\r\n            this._actionModel.fps.to = to;\r\n        }\r\n    }\r\n    prepareQualifiers() {\r\n        let qualifierValue;\r\n        if (this.from && this.to) {\r\n            qualifierValue = new QualifierValue(`${this.from}-${this.to}`);\r\n        }\r\n        else {\r\n            qualifierValue = new QualifierValue(`${this.from}-`);\r\n        }\r\n        this.addQualifier(new Qualifier('fps', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\nexport default FPSRangeAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport FPSRangeAction from \"./FPSRangeAction.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the FPS (Frames Per Second) to ensure that video (even when optimized)\r\n * is delivered with\r\n * an expected FPS level (helps with sync to audio).\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_transformation_reference#video_settings|Video settings}\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass FPSAction extends Action {\r\n    constructor(from) {\r\n        super();\r\n        this._actionModel = { actionType: 'fps' };\r\n        this._actionModel.fps = from;\r\n        this.addQualifier(new Qualifier('fps', from));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { fps } = actionModel;\r\n        let result;\r\n        if (typeof fps === 'object') {\r\n            //@ts-ignore\r\n            result = new FPSRangeAction(fps.from, fps.to);\r\n        }\r\n        else {\r\n            result = new this(fps);\r\n        }\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        return result;\r\n    }\r\n}\r\nexport default FPSAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the keyframe interval of the delivered video.\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass KeyframeIntervalsAction extends Action {\r\n    constructor(interval) {\r\n        super();\r\n        this._actionModel = { actionType: 'keyframeInterval' };\r\n        this._actionModel.interval = interval;\r\n        this.addQualifier(new Qualifier('ki', toFloatAsString(interval)));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { interval } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(interval);\r\n        return result;\r\n    }\r\n}\r\nexport default KeyframeIntervalsAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP, STREAMING_PROFILE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description The predefined streaming profiles.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/adaptive_bitrate_streaming#predefined_streaming_profiles|Predefined streaming profiles}\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass StreamingProfileAction extends Action {\r\n    constructor(profile) {\r\n        super();\r\n        this._actionModel = { actionType: 'streamingProfile' };\r\n        this.addQualifier(new Qualifier('sp', profile));\r\n        this._actionModel.profile = STREAMING_PROFILE_TO_ACTION_TYPE_MAP[profile] || profile;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { profile } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const profileType = ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP[profile] || profile;\r\n        const result = new this(profileType);\r\n        return result;\r\n    }\r\n}\r\nexport default StreamingProfileAction;\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { animatedWebP } from \"../../qualifiers/flag.js\";\r\nimport { animated } from \"../../qualifiers/flag.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description Converts a video to an animated webp or gif.\r\n * The resulting transformation includes format (f_format) and the animated flag (fl_animated).\r\n * The flag fl_awebp is added only when an animated webp is requested.\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass ToAnimatedAction extends Action {\r\n    constructor(animatedFormat = '') {\r\n        super();\r\n        this._actionModel = { actionType: 'toAnimated' };\r\n        if (animatedFormat.toString() === 'webp') {\r\n            this.addFlag(animatedWebP());\r\n        }\r\n        this.addFlag(animated());\r\n        if (animatedFormat) {\r\n            this.addQualifier(new Qualifier('f', animatedFormat));\r\n        }\r\n        this._actionModel.animatedFormat = animatedFormat;\r\n    }\r\n    /**\r\n     * @description Sets the time between frames.\r\n     * @param delayValue The time in milliseconds.\r\n     */\r\n    delay(delayValue) {\r\n        this.addQualifier(new Qualifier('dl', delayValue));\r\n        this._actionModel.delay = delayValue;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the frequency at which the video is sampled.\r\n     * @param sampling As a string (e.g. '2.3s'), samples one frame every 2.3 seconds.<br>As a number (e.g. 20),\r\n     * samples that many equally spaced frames over the duration of the video.\r\n     */\r\n    sampling(sampling) {\r\n        this.addQualifier(new Qualifier('vs', sampling));\r\n        this._actionModel.sampling = sampling;\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { animatedFormat, sampling, delay } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(animatedFormat);\r\n        sampling && result.sampling(sampling);\r\n        delay && result.delay(delay);\r\n        return result;\r\n    }\r\n}\r\nexport default ToAnimatedAction;\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description A VideoCodec class, this class has no methods, and just sets the codec type (vp9, vp8, etc.)\r\n * @memberOf Qualifiers.VideoCodec\r\n */\r\nclass VideoCodecType extends Qualifier {\r\n    constructor(type) {\r\n        super('vc');\r\n        this._type = type;\r\n        this.addValue(type);\r\n    }\r\n    getType() {\r\n        return this._type;\r\n    }\r\n}\r\n/**\r\n * @description An Advanced VideoCodec class with Profile and Level methods\r\n * @memberOf Qualifiers.VideoCodec\r\n */\r\nclass AdvVideoCodecType extends Qualifier {\r\n    constructor(type) {\r\n        super('vc');\r\n        this._type = type;\r\n    }\r\n    getType() {\r\n        return this._type;\r\n    }\r\n    /**\r\n     * @description Specifies the profile to use with the h264 codec.\r\n     * @param {Qualifiers.VideoCodecProfile | string} profile Sets the profile of the video codec\r\n     * @example new AdvVideoCodecType('h264').profile(VideoCodecProfile.baseline())\r\n     * @return this;\r\n     */\r\n    profile(profile) {\r\n        this._prof = profile;\r\n        return this;\r\n    }\r\n    getProfile() {\r\n        return this._prof;\r\n    }\r\n    /**\r\n     * @description Specifies the level to use with the h264 codec and specified profile.\r\n     * @param {Qualifiers.VideoCodecLevel | number | string} lvl\r\n     * @example new AdvVideoCodecType('h264').profile(VideoCodecLevel.baseline())\r\n     * @return this;\r\n     */\r\n    level(lvl) {\r\n        this._lvl = lvl;\r\n        return this;\r\n    }\r\n    getLevel() {\r\n        return this._lvl;\r\n    }\r\n    /**\r\n     * @description returns a toString representation of this qualifier\r\n     * @return string;\r\n     */\r\n    toString() {\r\n        return `vc_${this._type}:${this._prof}:${this._lvl}`;\r\n    }\r\n}\r\nexport { VideoCodecType, AdvVideoCodecType };\r\n", "import { AdvVideoCodecType, VideoCodecType } from \"./videoCodecType/VideoCodecType.js\";\r\n/**\r\n * @description Determines the video codec to use.\r\n * @memberOf Qualifiers\r\n * @namespace VideoCodec\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @description Auto video codec.\r\n * @memberOf Qualifiers.VideoCodec\r\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\r\n */\r\nfunction auto() {\r\n    return new VideoCodecType('auto');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Video codec h264.\r\n * @memberOf Qualifiers.VideoCodec\r\n * @returns {Qualifiers.VideoCodec.AdvVideoCodecType}\r\n */\r\nfunction h264() {\r\n    return new AdvVideoCodecType('h264');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description h265 video codec.\r\n * @memberOf Qualifiers.VideoCodec\r\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\r\n */\r\nfunction h265() {\r\n    return new VideoCodecType('h265');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Video codec proRes (Apple ProRes 422 HQ).\r\n * @memberOf Qualifiers.VideoCodec\r\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\r\n */\r\nfunction proRes() {\r\n    return new VideoCodecType('prores');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Video codec theora.\r\n * @memberOf Qualifiers.VideoCodec\r\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\r\n */\r\nfunction theora() {\r\n    return new VideoCodecType('theora');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Video codec vp8.\r\n * @memberOf Qualifiers.VideoCodec\r\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\r\n */\r\nfunction vp8() {\r\n    return new VideoCodecType('vp8');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Video codec vp9.\r\n * @memberOf Qualifiers.VideoCodec\r\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\r\n */\r\nfunction vp9() {\r\n    return new VideoCodecType('vp9');\r\n}\r\nexport const VIDEO_CODEC_TO_TRANSFORMATION = {\r\n    'auto': auto(),\r\n    'h264': h264(),\r\n    'h265': h265(),\r\n    'prores': proRes(),\r\n    'theora': theora(),\r\n    'vp8': vp8(),\r\n    'vp9': vp9()\r\n};\r\nconst VideoCodec = { auto, h264, h265, proRes, theora, vp8, vp9 };\r\nexport { VideoCodec, auto, h264, h265, proRes, theora, vp8, vp9 };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { AdvVideoCodecType } from \"../../qualifiers/videoCodecType/VideoCodecType.js\";\r\nimport { VIDEO_CODEC_TO_TRANSFORMATION } from \"../../qualifiers/videoCodec.js\";\r\n/**\r\n * @extends SDK.Action\r\n * @memberOf Actions.Transcode\r\n * @description Converts a video to an animated webp or gif.\r\n * @see Visit {@link Actions.Transcode|Transcode} for an example\r\n */\r\nclass VideoCodecAction extends Action {\r\n    constructor(videoCodecTypeQualifier) {\r\n        super();\r\n        this._actionModel = { actionType: 'videoCodec' };\r\n        this._actionModel.videoCodec = { videoCodecName: videoCodecTypeQualifier.getType() };\r\n        if (videoCodecTypeQualifier instanceof AdvVideoCodecType) {\r\n            if (videoCodecTypeQualifier.getProfile()) {\r\n                this._actionModel.videoCodec = Object.assign({ profile: videoCodecTypeQualifier.getProfile() }, this._actionModel.videoCodec);\r\n            }\r\n            if (videoCodecTypeQualifier.getLevel()) {\r\n                this._actionModel.videoCodec = Object.assign({ level: videoCodecTypeQualifier.getLevel() }, this._actionModel.videoCodec);\r\n            }\r\n        }\r\n        this.addQualifier(videoCodecTypeQualifier);\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { videoCodec } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        const result = new this(VIDEO_CODEC_TO_TRANSFORMATION[videoCodec.videoCodecName]);\r\n        //@ts-ignore\r\n        videoCodec.profile && new this(VIDEO_CODEC_TO_TRANSFORMATION[videoCodec.videoCodecName].profile(videoCodec.profile));\r\n        //@ts-ignore\r\n        videoCodec.level && new this(VIDEO_CODEC_TO_TRANSFORMATION[videoCodec.videoCodecName].level(videoCodec.level));\r\n        return result;\r\n    }\r\n}\r\nexport { VideoCodecAction };\r\n", "import BitRateAction from \"./transcode/BitRateAction.js\";\r\nimport AudioCodecAction from \"./transcode/AudioCodecAction.js\";\r\nimport AudioFrequencyAction from \"./transcode/AudioFrequencyAction.js\";\r\nimport FPSAction from \"./transcode/FPSAction.js\";\r\nimport FPSRangeAction from \"./transcode/FPSRangeAction.js\";\r\nimport KeyframeIntervalsAction from \"./transcode/KeyframeIntervalsAction.js\";\r\nimport StreamingProfileAction from \"./transcode/StreamingProfile.js\";\r\nimport ToAnimatedAction from \"./transcode/ToAnimatedAction.js\";\r\nimport { VideoCodecAction } from \"./transcode/VideoCodecAction.js\";\r\n/**\r\n * @description Defines how to transcode a video to another format\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Transcoding video to other formats}\r\n * @memberOf Actions\r\n * @namespace Transcode\r\n * @example\r\n * // See examples under each method\r\n */\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the audio sample frequency.\r\n *\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control|Audio frequency control}\r\n * @param {AudioFrequencyType|string|number} freq The audio frequency.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {FREQ11025} from '@cloudinary/url-gen/qualifiers/audioFrequency'\r\n * import {audioFrequency} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode(audioFrequency(FREQ11025()))\r\n * @return {Actions.Transcode.AudioFrequencyAction}\r\n *\r\n */\r\nfunction audioFrequency(freq) {\r\n    return new AudioFrequencyAction(freq);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the audio codec or removes the audio channel.\r\n * @param {AudioCodecType | string} codec The audio codec or \"none\".\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {aac} from '@cloudinary/url-gen/qualifiers/audioCodec'\r\n * import {audioCodec} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( audioCodec( aac() ) );\r\n * @return {Actions.Transcode.AudioCodecAction}\r\n */\r\nfunction audioCodec(codec) {\r\n    return new AudioCodecAction(codec);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the video bitrate.\r\n * Supported codecs: h264, h265 (MPEG-4); vp8, vp9 (WebM).\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/video_optimization#bitrate_control|Bitrate control}\r\n *\r\n * @param {string|number}  bitRate The number of bits used to represent the video data per second. By default the video\r\n *                             uses a variable bitrate (VBR), with this value indicating the maximum bitrate.\r\n *                             The value can be an integer e.g. 120000, or a string supporting \"k\" and \"m\"\r\n *                             (kilobits and megabits respectively) e.g. 250k or 2m.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {bitRate} from '@cloudinary/url-gen/actions/transcode'\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( bitRate(500).constant() );\r\n * @return {Actions.Transcode.BitRateAction}\r\n */\r\nfunction bitRate(bitRate) {\r\n    return new BitRateAction(bitRate);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @param {number} from frame rate\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fps} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( fps(15) );\r\n * @return {Actions.Transcode.FPSAction}\r\n */\r\nfunction fps(from) {\r\n    return new FPSAction(from);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized) is\r\n * delivered with an expected FPS level (helps with sync to audio).\r\n * @param {number} from frame rate\r\n * @param {number} to frame rate\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fpsRange} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( fpsRange( 20, 25 ) );\r\n * @return {Actions.Transcode.FPSRangeAction}\r\n */\r\nfunction fpsRange(from, to) {\r\n    return new FPSRangeAction(from, to);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the keyframe interval of the delivered video.\r\n * @param {number | string} interval The keyframe interval in seconds.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {keyframeInterval} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( keyframeInterval( 0.5 ) );\r\n * @return {Actions.Transcode.KeyframeIntervalsAction}\r\n */\r\nfunction keyframeInterval(interval) {\r\n    return new KeyframeIntervalsAction(interval);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Sets the streaming profile to apply to an HLS or MPEG-DASH adaptive bitrate streaming video.\r\n * The value can be one of the pre-defined streaming profiles or a custom-defined one.\r\n * You can use the streaming profiles methods of StreamingProfilesTrait to get a list of the available streaming\r\n * profiles or to create new custom profiles.\r\n * @param {string} profile The streaming profile.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {fullHd} from \"@cloudinary/url-gen/qualifiers/streamingProfile\";\r\n * import {streamingProfile} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( streamingProfile( fullHd() ) );\r\n * @return {Actions.Transcode.StreamingProfileAction}\r\n */\r\nfunction streamingProfile(profile) {\r\n    return new StreamingProfileAction(profile);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Converts a video to animated image.\r\n * @param {string | AnimatedFormatType} animatedFormat The streaming profile.\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen/instance/Cloudinary\";\r\n * import {gif} from '@cloudinary/url-gen/qualifiers/animatedFormat'\r\n * import {toAnimated} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( toAnimated( gif() ) );\r\n * @return {Actions.Transcode.ToAnimatedAction}\r\n */\r\nfunction toAnimated(animatedFormat = '') {\r\n    return new ToAnimatedAction(animatedFormat);\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Transcode\r\n * @description Controls the video codec.\r\n * @param {Qualifiers.VideoCodec.VideoCodecType | Qualifiers.VideoCodec.AdvVideoCodecType} videoCodecType CodecType\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {vp9} from '@cloudinary/url-gen/qualifiers/videoCodec'\r\n * import {videoCodec} from '@cloudinary/url-gen/actions/transcode'\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const video = yourCldInstance.video('dog');\r\n *\r\n * video.transcode( videoCodec( vp9() ) );\r\n * @return {Actions.Transcode.VideoCodecAction}\r\n */\r\nfunction videoCodec(videoCodecType) {\r\n    return new VideoCodecAction(videoCodecType);\r\n}\r\nconst Transcode = { bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\r\nexport { Transcode, bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { clip, clipEvenOdd } from \"../../qualifiers/flag.js\";\r\n/**\r\n * @description  Defines the clipping path to use when trimming pixels.\r\n * @extends SDK.Action\r\n * @memberOf Actions.PSDTools\r\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\r\n */\r\nclass ClipAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this.isEvenOdd = false;\r\n    }\r\n    /**\r\n     * @description The name of the path to clip by\r\n     * @param {string} path\r\n     * @return {this}\r\n     */\r\n    byName(path) {\r\n        this.path = path;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description The index of the path to clip by\r\n     * @param {number} path\r\n     * @return {this}\r\n     */\r\n    byIndex(path) {\r\n        this.path = path;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Trims pixels according to a clipping path included in the original image using an evenodd clipping rule.\r\n     * @return {this}\r\n     */\r\n    evenOdd() {\r\n        this.isEvenOdd = true;\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let qualifierValue;\r\n        if (typeof this.path === 'string') {\r\n            qualifierValue = new QualifierValue(['name', this.path]).setDelimiter(':');\r\n        }\r\n        else {\r\n            qualifierValue = new QualifierValue(this.path);\r\n        }\r\n        //handles flag\r\n        if (this.isEvenOdd) {\r\n            this.addFlag(clipEvenOdd());\r\n        }\r\n        else {\r\n            this.addFlag(clip());\r\n        }\r\n        this.addQualifier(new Qualifier('pg', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\nexport { ClipAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Represents a layer in a Photoshop document.\r\n * </br><b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#deliver_selected_layers_of_a_psd_image|Deliver selected layers of a PSD image}\r\n * @extends SDK.Action\r\n * @memberOf Actions.PSDTools\r\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\r\n */\r\nclass GetLayerAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this.qualifierValue = new QualifierValue();\r\n        this.qualifierValue.delimiter = ';';\r\n    }\r\n    /**\r\n     * @description deliver an image containing only specified layer of a Photoshop image from The layer index\r\n     * @param {string|number} from the index of the layer\r\n     */\r\n    byIndex(from) {\r\n        this.qualifierValue.addValue(from);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description deliver an image containing only specified range of layers of a Photoshop image\r\n     * @param {string|number} from The layer number\r\n     * @param {string|number} to The layer number\r\n     */\r\n    byRange(from, to) {\r\n        const range = new QualifierValue(from);\r\n        range.addValue(to);\r\n        range.delimiter = '-';\r\n        this.qualifierValue.addValue(range);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description deliver an image containing only specified layer by name of a Photoshop image\r\n     * @param {string|number} name The layer by name\r\n     */\r\n    byName(name) {\r\n        this.name = name;\r\n        this.qualifierValue.addValue(name);\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let qualifierValue = this.qualifierValue;\r\n        if (this.name) {\r\n            qualifierValue = new QualifierValue(['name', this.qualifierValue]).setDelimiter(':');\r\n        }\r\n        this.addQualifier(new Qualifier('pg', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\nexport { GetLayerAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Represents an embedded smart object in a Photoshop document.\r\n * </br><b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#extract_the_original_content_of_an_embedded_object|Extract the original content of an embedded Photoshop object}\r\n * @extends SDK.Action\r\n * @memberOf Actions.PSDTools\r\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\r\n */\r\nclass SmartObjectAction extends Action {\r\n    constructor() {\r\n        super();\r\n        this.qualifierValue = new QualifierValue();\r\n        this.useName = false;\r\n        this.qualifierValue.delimiter = ';';\r\n    }\r\n    /**\r\n     * @description Creates a new instance using the specified number.\r\n     * @param index The number.\r\n     */\r\n    byIndex(index) {\r\n        this.smartObjectValue = index;\r\n        this.qualifierValue.addValue(index);\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Creates an instance using the name.\r\n     * @param {string} layerName The name of the layer\r\n     */\r\n    byLayerName(layerName) {\r\n        this.useName = true;\r\n        this.qualifierValue.addValue(layerName);\r\n        return this;\r\n    }\r\n    prepareQualifiers() {\r\n        let qualifierValue;\r\n        if (this.useName) {\r\n            qualifierValue = new QualifierValue(['embedded:name', this.qualifierValue]);\r\n        }\r\n        else {\r\n            qualifierValue = new QualifierValue(['embedded', this.qualifierValue]);\r\n        }\r\n        this.addQualifier(new Qualifier('pg', qualifierValue));\r\n    }\r\n}\r\nexport { SmartObjectAction };\r\n", "import { ClipAction } from \"./psdTools/ClipAction.js\";\r\nimport { GetLayerAction } from \"./psdTools/GetLayerAction.js\";\r\nimport { SmartObjectAction } from \"./psdTools/SmartObjectAction.js\";\r\n/**\r\n * @namespace PSDTools\r\n * @description Represents a layer in a Photoshop document.\r\n * </br><b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#deliver_selected_layers_of_a_psd_image|Deliver selected layers of a PSD image}\r\n * @memberOf Actions\r\n * @example\r\n * // See examples under each method\r\n */\r\n/**\r\n * @summary action\r\n * @description Trims the pixels of a PSD image according to a Photoshop clipping path that is stored in the image's metadata.\r\n * @memberOf Actions.PSDTools\r\n * @return {Actions.PSDTools.ClipAction}\r\n * @example\r\n * import {Cloudinary} from '@cloudinary/url-gen';\r\n * import {clip} from '@cloudinary/url-gen/actions/psdTools';\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.psdTools(\r\n *  clip()\r\n *    .byName('foo') // either name, or number\r\n *    .byNumber(2)   // either name, or number\r\n *    .evenOdd()     // Use the evenodd clipping rule\r\n * );\r\n */\r\nfunction clip() {\r\n    return new ClipAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description Delivers an image containing only specified layers of a Photoshop image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/paged_and_layered_media#deliver_selected_layers_of_a_psd_image|Deliver selected layers of a PSD image}\r\n * @memberOf Actions.PSDTools\r\n * @return {Actions.PSDTools.GetLayerAction}\r\n * @example\r\n * import {Cloudinary} from '@cloudinary/url-gen';\r\n * import {getLayer} from '@cloudinary/url-gen/actions/psdTools';\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.psdTools(\r\n *  getLayer()\r\n *    .byName('foo') // One of the three\r\n *    .byIndex(2)    // One of the three\r\n *    .byRange(1, 3) // One of the three\r\n * );\r\n */\r\nfunction getLayer() {\r\n    return new GetLayerAction();\r\n}\r\n/**\r\n * @summary action\r\n * @description Extracts the original content of an embedded object of a Photoshop image.\r\n * @memberOf Actions.PSDTools\r\n * @return {Actions.PSDTools.SmartObjectAction}\r\n * @example\r\n * import {Cloudinary} from '@cloudinary/url-gen';\r\n * import {smartObject} from '@cloudinary/url-gen/actions/psdTools';\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n *\r\n * image.psdTools(\r\n *  smartObject()\r\n *    .byLayerName('foo') // either name, or number\r\n *    .byIndex(2)         // either name, or number\r\n * );\r\n */\r\nfunction smartObject() {\r\n    return new SmartObjectAction();\r\n}\r\nconst PSDTools = { clip, getLayer, smartObject };\r\nexport { PSDTools, clip, getLayer, smartObject };\r\n", "import { Action } from \"../internal/Action.js\";\r\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @description Delivers an animated GIF that contains additional loops of the GIF.\r\n * The total number of iterations is the number of additional loops plus one.\r\n * You can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\r\n *\r\n * @memberOf Actions\r\n * @namespace Animated\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {animated} from \"@cloudinary/url-gen/actions/animated\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.animated(edit().delay(200).loop(3)));\r\n */\r\n/**\r\n * @memberOf Actions.Animated\r\n * @see Actions.Animated\r\n * @example\r\n * // Used through a builder function Animated.edit(), and not by creating a new instance\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {edit} from \"@cloudinary/url-gen/actions/animated\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.animated(edit().delay(200).loop(3)));\r\n */\r\nclass AnimatedAction extends Action {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * @description Controls the time delay between the frames of an animated image, in milliseconds.\r\n     * @param {number} delayValue The delay in milliseconds\r\n     * @return {this}\r\n     */\r\n    delay(delayValue) {\r\n        this.addQualifier(new Qualifier('dl', delayValue));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Delivers an animated GIF that contains additional loops of the GIF.\r\n     * @param {number} additionalLoops The additional number of times to play the animated GIF.\r\n     * @return {this}\r\n     */\r\n    loop(additionalLoops) {\r\n        const qualifierValue = new QualifierValue(['loop', additionalLoops]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('e', qualifierValue));\r\n        return this;\r\n    }\r\n}\r\n/**\r\n * @summary action\r\n * @memberOf Actions.Animated\r\n * @description Delivers an animated GIF.\r\n * @return {Actions.Animated.AnimatedAction}\r\n */\r\nfunction edit() {\r\n    return new AnimatedAction();\r\n}\r\nconst Animated = {\r\n    edit\r\n};\r\nexport { AnimatedAction, Animated, edit };\r\n"],
  "mappings": "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,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA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",
  "names": ["mode", "relative", "regionRelative", "name", "focusOn", "autoGravity", "brightness", "color", "color", "contrast", "color", "ocr", "auto", "normal", "normal", "auto", "none", "ignoreInitialAspectRatio", "auto", "gif", "webp", "png", "auto", "format", "normal", "text", "color", "text", "format", "text", "text", "brightness", "contrast", "auto", "fill", "auto", "color", "roundCorners", "solid", "ocr", "mode", "color", "color", "color", "color", "color", "color", "color", "mode", "color", "mode", "mode", "source", "tiled", "mode", "source", "source", "source", "name", "name", "mode", "mode", "lossy", "progressive", "preserveTransparency", "mode", "dpr", "format", "dpr", "mode", "color", "quality", "format", "color", "source", "transition", "mode", "source", "bitRate", "audioCodec", "fps", "auto", "videoCodec", "bitRate", "name", "clip"]
}
