{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/internal/qualifier/QualifierValue.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/unsupportedError.js", "../../@cloudinary/transformation-builder-sdk/internal/models/qualifierToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/QualifierModel.js", "../../@cloudinary/transformation-builder-sdk/internal/qualifier/Qualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/GravityQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/compassGravity/CompassGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/focusOnGravity/FocusOnGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/autoGravity/AutoGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/xyCenterGravity/XYCenterGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity.js"],
  "sourcesContent": ["/**\n * @summary SDK\n * @memberOf SDK\n */\nclass QualifierValue {\n    /**\n     *\n     * @param {QualifierValue | QualifierValue[] | any[] | string | number}qualifierValue\n     */\n    constructor(qualifierValue) {\n        this.values = [];\n        this.delimiter = ':'; // {value}{delimiter}{value}...\n        if (this.hasValue(qualifierValue)) {\n            this.addValue(qualifierValue);\n        }\n    }\n    /**\n     * @description Joins the provided values with the provided delimiter\n     */\n    toString() {\n        return this.values.join(this.delimiter);\n    }\n    /**\n     * @description Checks if the provided argument has a value\n     * @param {any} v\n     * @private\n     * @return {boolean}\n     */\n    hasValue(v) {\n        return typeof v !== 'undefined' && v !== null && v !== '';\n    }\n    /**\n     * @desc Adds a value for the this qualifier instance\n     * @param {any} value\n     * @return {this}\n     */\n    addValue(value) {\n        // Append value or array of values\n        if (Array.isArray(value)) {\n            this.values = this.values.concat(value);\n        }\n        else {\n            this.values.push(value);\n        }\n        // Remove falsy values\n        this.values = this.values.filter((v) => this.hasValue(v));\n        return this;\n    }\n    /**\n     * @description Sets the delimiter for this instance\n     * @param delimiter\n     */\n    setDelimiter(delimiter) {\n        this.delimiter = delimiter;\n        return this;\n    }\n}\nexport { QualifierValue };\n", "class UnsupportedError extends Error {\n    constructor(message = 'Unsupported') {\n        super(message);\n    }\n}\n/**\n * Creates a new UnsupportedError\n * @param message\n */\nfunction createUnsupportedError(message) {\n    return new UnsupportedError(message);\n}\nexport { UnsupportedError, createUnsupportedError };\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\n/**\n * Returns the action's model\n */\nexport function qualifierToJson() {\n    return this._qualifierModel || { error: createUnsupportedError(`unsupported qualifier ${this.constructor.name}`) };\n}\n", "import { qualifierToJson } from \"./qualifierToJson.js\";\nexport class QualifierModel {\n    constructor() {\n        this._qualifierModel = {};\n    }\n    toJson() {\n        return qualifierToJson.apply(this);\n    }\n}\n", "import { QualifierValue } from './QualifierValue.js';\nimport { QualifierModel } from '../models/QualifierModel.js';\n/**\n * @summary SDK\n * @memberOf SDK\n */\nclass Qualifier extends QualifierModel {\n    constructor(key, qualifierValue) {\n        super();\n        this.delimiter = '_'; // {key}{delimiter}{qualifierValue}\n        this.key = key;\n        if (qualifierValue instanceof QualifierValue) {\n            this.qualifierValue = qualifierValue;\n        }\n        else {\n            this.qualifierValue = new QualifierValue();\n            this.qualifierValue.addValue(qualifierValue);\n        }\n    }\n    toString() {\n        const { key, delimiter, qualifierValue } = this;\n        return `${key}${delimiter}${qualifierValue.toString()}`;\n    }\n    addValue(value) {\n        this.qualifierValue.addValue(value);\n        return this;\n    }\n}\nexport { Qualifier };\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @memberOf Gravity.GravityQualifier\n * @extends {SDK.Qualifier}\n */\nclass GravityQualifier extends Qualifier {\n    /**\n     * @param value, an array containing (GravityObject | AutoGravity | string) or a string;\n     */\n    constructor(value) {\n        super('g', new QualifierValue(value));\n    }\n}\nexport { GravityQualifier };\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\n/**\n * @description The class for the CompassGravity builder\n * @memberOf Qualifiers.Gravity\n * @extends {Qualifiers.Gravity.GravityQualifier}\n */\nclass CompassGravity extends GravityQualifier {\n    constructor(dir) {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super(dir);\n    }\n}\nexport { CompassGravity };\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\n/**\n * @description The class for the FocusOn builder\n * @memberOf Qualifiers.Gravity\n * @extends {Qualifiers.Gravity.GravityQualifier}\n */\nclass FocusOnGravity extends GravityQualifier {\n    constructor(FocusOnObjects) {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super(FocusOnObjects);\n    }\n    /**\n     * @description Specifies the gravity to use if none of the other gravity objects are found.\n     * @param {Qualifiers.Gravity.AutoGravity} val\n     */\n    fallbackGravity(val) {\n        /*\n         *  FocusOnGravity(this) is already a qualifier, with a key and a value g_{obj1}\n         *  fallBackGravity also attempts to add a value, to reach the result of g_{obj1}:auto:{obj2}\n         *  Since AutoGravity is a Qualifier, it also comes with its own g_ key, which needs to be removed.\n         *  To solve it, we take only the value from the qualifier, instead of the whole thing\n         */\n        this.addValue(val.qualifierValue);\n        return this;\n    }\n}\nexport { FocusOnGravity };\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\n/**\n * @description The class for the autoGravity builder\n * @memberOf Qualifiers.Gravity\n * @extends {Qualifiers.Gravity.GravityQualifier}\n */\nclass AutoGravity extends GravityQualifier {\n    constructor() {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super('auto');\n    }\n    /**\n     * @description Autofocuses on objects, allowing their priority within the algorithm to be configured.\n     * @param {AutoFocus} AutoFocusObjects\n     */\n    autoFocus(...AutoFocusObjects) {\n        this.addValue(AutoFocusObjects);\n        return this;\n    }\n}\nexport { AutoGravity };\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\n/**\n * @description The class for the XYCenter Gravity builder\n * @memberOf Qualifiers.Gravity\n * @extends {Qualifiers.Gravity.GravityQualifier}\n */\nclass XYCenterGravity extends GravityQualifier {\n    constructor() {\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\n        /* istanbul ignore next */\n        super('xy_center');\n    }\n}\nexport { XYCenterGravity };\n", "import { CompassGravity } from \"./gravity/compassGravity/CompassGravity.js\";\nimport { FocusOnGravity } from \"./gravity/focusOnGravity/FocusOnGravity.js\";\nimport { AutoGravity } from \"./gravity/autoGravity/AutoGravity.js\";\nimport { XYCenterGravity } from \"./gravity/xyCenterGravity/XYCenterGravity.js\";\n/**\n * @description Defines the gravity based on directional values from a compass.\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/resizing_and_cropping#control_gravity|Control gravity for images}\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_resizing_and_cropping#control_gravity|Control gravity for videos}\n * @param {Qualifiers.Compass | string} direction A compass Values\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n * @return {CompassGravity}\n */\nfunction compass(direction) {\n    return new CompassGravity(direction);\n}\n/**\n * @summary qualifier\n * @description Specifies what to focus on, for example: faces, objects, eyes, etc.\n * @param {...Qualifier.FocusOn} args One or more objects to focus on\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {focusOn} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(focusOn(cat())))\n * @return {FocusOnGravity}\n */\nfunction focusOn(...args) {\n    const res = [...args];\n    return new FocusOnGravity(res);\n}\n/**\n * @summary qualifier\n * @description Automatically identifies the most interesting regions in the asset, can be qualified further by including what to focus on.\n * @memberOf Qualifiers.Gravity\n * @return {Qualifiers.Gravity.AutoGravity}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity()))\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\n * import {AutoFocus} from \"@cloudinary/url-gen/qualifiers/autoFocus\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity().autoFocus(AutoFocus.focusOn(cat()))))\n */\nfunction autoGravity() {\n    return new AutoGravity();\n}\n/**\n * @summary qualifier\n * @description Set the center of gravity to the given x & y coordinates.\n * @memberOf Qualifiers.Gravity\n * @return {XYCenterGravity}\n */\nfunction xyCenter() {\n    return new XYCenterGravity();\n}\n/**\n * @description A qualifier that determines which part of an asset to focus on, and thus which part of the asset to keep, </br>\n *              when any part of the asset is cropped. For overlays, this setting determines where to place the overlay.\n * @namespace Gravity\n * @memberOf Qualifiers\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n *\n * // Expand every function separately to see its own example\n */\nconst Gravity = {\n    compass: compass,\n    autoGravity: autoGravity,\n    focusOn: focusOn,\n    xyCenter\n};\nexport { Gravity, compass, autoGravity, focusOn, xyCenter };\n"],
  "mappings": "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",
  "names": []
}
