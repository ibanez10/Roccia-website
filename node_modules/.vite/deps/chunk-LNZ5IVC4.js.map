{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/internal/qualifier/QualifierValue.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/unsupportedError.js", "../../@cloudinary/transformation-builder-sdk/internal/models/qualifierToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/QualifierModel.js", "../../@cloudinary/transformation-builder-sdk/internal/qualifier/Qualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/GravityQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/compassGravity/CompassGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/focusOnGravity/FocusOnGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/autoGravity/AutoGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity/xyCenterGravity/XYCenterGravity.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/gravity.js"],
  "sourcesContent": ["/**\r\n * @summary SDK\r\n * @memberOf SDK\r\n */\r\nclass QualifierValue {\r\n    /**\r\n     *\r\n     * @param {QualifierValue | QualifierValue[] | any[] | string | number}qualifierValue\r\n     */\r\n    constructor(qualifierValue) {\r\n        this.values = [];\r\n        this.delimiter = ':'; // {value}{delimiter}{value}...\r\n        if (this.hasValue(qualifierValue)) {\r\n            this.addValue(qualifierValue);\r\n        }\r\n    }\r\n    /**\r\n     * @description Joins the provided values with the provided delimiter\r\n     */\r\n    toString() {\r\n        return this.values.join(this.delimiter);\r\n    }\r\n    /**\r\n     * @description Checks if the provided argument has a value\r\n     * @param {any} v\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    hasValue(v) {\r\n        return typeof v !== 'undefined' && v !== null && v !== '';\r\n    }\r\n    /**\r\n     * @desc Adds a value for the this qualifier instance\r\n     * @param {any} value\r\n     * @return {this}\r\n     */\r\n    addValue(value) {\r\n        // Append value or array of values\r\n        if (Array.isArray(value)) {\r\n            this.values = this.values.concat(value);\r\n        }\r\n        else {\r\n            this.values.push(value);\r\n        }\r\n        // Remove falsy values\r\n        this.values = this.values.filter((v) => this.hasValue(v));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the delimiter for this instance\r\n     * @param delimiter\r\n     */\r\n    setDelimiter(delimiter) {\r\n        this.delimiter = delimiter;\r\n        return this;\r\n    }\r\n}\r\nexport { QualifierValue };\r\n", "class UnsupportedError extends Error {\r\n    constructor(message = 'Unsupported') {\r\n        super(message);\r\n    }\r\n}\r\n/**\r\n * Creates a new UnsupportedError\r\n * @param message\r\n */\r\nfunction createUnsupportedError(message) {\r\n    return new UnsupportedError(message);\r\n}\r\nexport { UnsupportedError, createUnsupportedError };\r\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\r\n/**\r\n * Returns the action's model\r\n */\r\nexport function qualifierToJson() {\r\n    return this._qualifierModel || { error: createUnsupportedError(`unsupported qualifier ${this.constructor.name}`) };\r\n}\r\n", "import { qualifierToJson } from \"./qualifierToJson.js\";\r\nexport class QualifierModel {\r\n    constructor() {\r\n        this._qualifierModel = {};\r\n    }\r\n    toJson() {\r\n        return qualifierToJson.apply(this);\r\n    }\r\n}\r\n", "import { QualifierValue } from './QualifierValue.js';\r\nimport { QualifierModel } from '../models/QualifierModel.js';\r\n/**\r\n * @summary SDK\r\n * @memberOf SDK\r\n */\r\nclass Qualifier extends QualifierModel {\r\n    constructor(key, qualifierValue) {\r\n        super();\r\n        this.delimiter = '_'; // {key}{delimiter}{qualifierValue}\r\n        this.key = key;\r\n        if (qualifierValue instanceof QualifierValue) {\r\n            this.qualifierValue = qualifierValue;\r\n        }\r\n        else {\r\n            this.qualifierValue = new QualifierValue();\r\n            this.qualifierValue.addValue(qualifierValue);\r\n        }\r\n    }\r\n    toString() {\r\n        const { key, delimiter, qualifierValue } = this;\r\n        return `${key}${delimiter}${qualifierValue.toString()}`;\r\n    }\r\n    addValue(value) {\r\n        this.qualifierValue.addValue(value);\r\n        return this;\r\n    }\r\n}\r\nexport { Qualifier };\r\n", "import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Gravity.GravityQualifier\r\n * @extends {SDK.Qualifier}\r\n */\r\nclass GravityQualifier extends Qualifier {\r\n    /**\r\n     * @param value, an array containing (GravityObject | AutoGravity | string) or a string;\r\n     */\r\n    constructor(value) {\r\n        super('g', new QualifierValue(value));\r\n    }\r\n}\r\nexport { GravityQualifier };\r\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\r\n/**\r\n * @description The class for the CompassGravity builder\r\n * @memberOf Qualifiers.Gravity\r\n * @extends {Qualifiers.Gravity.GravityQualifier}\r\n */\r\nclass CompassGravity extends GravityQualifier {\r\n    constructor(dir) {\r\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\r\n        /* istanbul ignore next */\r\n        super(dir);\r\n    }\r\n}\r\nexport { CompassGravity };\r\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\r\n/**\r\n * @description The class for the FocusOn builder\r\n * @memberOf Qualifiers.Gravity\r\n * @extends {Qualifiers.Gravity.GravityQualifier}\r\n */\r\nclass FocusOnGravity extends GravityQualifier {\r\n    constructor(FocusOnObjects) {\r\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\r\n        /* istanbul ignore next */\r\n        super(FocusOnObjects);\r\n    }\r\n    /**\r\n     * @description Specifies the gravity to use if none of the other gravity objects are found.\r\n     * @param {Qualifiers.Gravity.AutoGravity} val\r\n     */\r\n    fallbackGravity(val) {\r\n        /*\r\n         *  FocusOnGravity(this) is already a qualifier, with a key and a value g_{obj1}\r\n         *  fallBackGravity also attempts to add a value, to reach the result of g_{obj1}:auto:{obj2}\r\n         *  Since AutoGravity is a Qualifier, it also comes with its own g_ key, which needs to be removed.\r\n         *  To solve it, we take only the value from the qualifier, instead of the whole thing\r\n         */\r\n        this.addValue(val.qualifierValue);\r\n        return this;\r\n    }\r\n}\r\nexport { FocusOnGravity };\r\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\r\n/**\r\n * @description The class for the autoGravity builder\r\n * @memberOf Qualifiers.Gravity\r\n * @extends {Qualifiers.Gravity.GravityQualifier}\r\n */\r\nclass AutoGravity extends GravityQualifier {\r\n    constructor() {\r\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\r\n        /* istanbul ignore next */\r\n        super('auto');\r\n    }\r\n    /**\r\n     * @description Autofocuses on objects, allowing their priority within the algorithm to be configured.\r\n     * @param {AutoFocus} AutoFocusObjects\r\n     */\r\n    autoFocus(...AutoFocusObjects) {\r\n        this.addValue(AutoFocusObjects);\r\n        return this;\r\n    }\r\n}\r\nexport { AutoGravity };\r\n", "import { GravityQualifier } from \"../GravityQualifier.js\";\r\n/**\r\n * @description The class for the XYCenter Gravity builder\r\n * @memberOf Qualifiers.Gravity\r\n * @extends {Qualifiers.Gravity.GravityQualifier}\r\n */\r\nclass XYCenterGravity extends GravityQualifier {\r\n    constructor() {\r\n        // Required due to https://github.com/microsoft/TypeScript/issues/13029\r\n        /* istanbul ignore next */\r\n        super('xy_center');\r\n    }\r\n}\r\nexport { XYCenterGravity };\r\n", "import { CompassGravity } from \"./gravity/compassGravity/CompassGravity.js\";\r\nimport { FocusOnGravity } from \"./gravity/focusOnGravity/FocusOnGravity.js\";\r\nimport { AutoGravity } from \"./gravity/autoGravity/AutoGravity.js\";\r\nimport { XYCenterGravity } from \"./gravity/xyCenterGravity/XYCenterGravity.js\";\r\n/**\r\n * @description Defines the gravity based on directional values from a compass.\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/resizing_and_cropping#control_gravity|Control gravity for images}\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_resizing_and_cropping#control_gravity|Control gravity for videos}\r\n * @param {Qualifiers.Compass | string} direction A compass Values\r\n * @memberOf Qualifiers.Gravity\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(compass(north())))\r\n * @return {CompassGravity}\r\n */\r\nfunction compass(direction) {\r\n    return new CompassGravity(direction);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Specifies what to focus on, for example: faces, objects, eyes, etc.\r\n * @param {...Qualifier.FocusOn} args One or more objects to focus on\r\n * @memberOf Qualifiers.Gravity\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {focusOn} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(focusOn(cat())))\r\n * @return {FocusOnGravity}\r\n */\r\nfunction focusOn(...args) {\r\n    const res = [...args];\r\n    return new FocusOnGravity(res);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Automatically identifies the most interesting regions in the asset, can be qualified further by including what to focus on.\r\n * @memberOf Qualifiers.Gravity\r\n * @return {Qualifiers.Gravity.AutoGravity}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(autoGravity()))\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {autoGravity} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n * import {cat} from \"@cloudinary/url-gen/qualifiers/focusOn\";\r\n * import {AutoFocus} from \"@cloudinary/url-gen/qualifiers/autoFocus\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(autoGravity().autoFocus(AutoFocus.focusOn(cat()))))\r\n */\r\nfunction autoGravity() {\r\n    return new AutoGravity();\r\n}\r\n/**\r\n * @summary qualifier\r\n * @description Set the center of gravity to the given x & y coordinates.\r\n * @memberOf Qualifiers.Gravity\r\n * @return {XYCenterGravity}\r\n */\r\nfunction xyCenter() {\r\n    return new XYCenterGravity();\r\n}\r\n/**\r\n * @description A qualifier that determines which part of an asset to focus on, and thus which part of the asset to keep, </br>\r\n *              when any part of the asset is cropped. For overlays, this setting determines where to place the overlay.\r\n * @namespace Gravity\r\n * @memberOf Qualifiers\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {compass} from \"@cloudinary/url-gen/qualifiers/gravity\";\r\n * import {north} from \"@cloudinary/url-gen/qualifiers/compass\";\r\n * import {crop} from \"@cloudinary/url-gen/actions/resize\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.resize(crop().width(300).gravity(compass(north())))\r\n *\r\n * // Expand every function separately to see its own example\r\n */\r\nconst Gravity = {\r\n    compass: compass,\r\n    autoGravity: autoGravity,\r\n    focusOn: focusOn,\r\n    xyCenter\r\n};\r\nexport { Gravity, compass, autoGravity, focusOn, xyCenter };\r\n"],
  "mappings": "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",
  "names": []
}
